{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/views/Yield.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Paragraph, Text } from \"theme-ui\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { InfoIcon } from \"../../InfoIcon\";\nimport { useLiquity } from \"../../../hooks/LiquityContext\";\nimport { Badge } from \"../../Badge\";\nimport { fetchPrices } from \"../context/fetchPrices\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst selector = ({\n  remainingLiquidityMiningLQTYReward,\n  totalStakedUniTokens\n}) => ({\n  remainingLiquidityMiningLQTYReward,\n  totalStakedUniTokens\n});\n\nexport const Yield = () => {\n  _s();\n\n  const {\n    liquity: {\n      connection: {\n        addresses,\n        liquidityMiningLQTYRewardRate\n      }\n    }\n  } = useLiquity();\n  const {\n    remainingLiquidityMiningLQTYReward,\n    totalStakedUniTokens\n  } = useLiquitySelector(selector);\n  const [lqtyPrice, setLqtyPrice] = useState(undefined);\n  const [uniLpPrice, setUniLpPrice] = useState(undefined);\n  const hasZeroValue = remainingLiquidityMiningLQTYReward.isZero || totalStakedUniTokens.isZero;\n  const lqtyTokenAddress = addresses[\"lqtyToken\"];\n  const uniTokenAddress = addresses[\"uniToken\"];\n  const secondsRemaining = remainingLiquidityMiningLQTYReward.div(liquidityMiningLQTYRewardRate);\n  const daysRemaining = secondsRemaining.div(60 * 60 * 24);\n  useEffect(() => {\n    (async () => {\n      try {\n        const {\n          lqtyPriceUSD,\n          uniLpPriceUSD\n        } = await fetchPrices(lqtyTokenAddress, uniTokenAddress);\n        setLqtyPrice(lqtyPriceUSD);\n        setUniLpPrice(uniLpPriceUSD);\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }, [lqtyTokenAddress, uniTokenAddress]);\n  if (hasZeroValue || lqtyPrice === undefined || uniLpPrice === undefined) return null;\n  const remainingLqtyInUSD = remainingLiquidityMiningLQTYReward.mul(lqtyPrice);\n  const totalStakedUniLpInUSD = totalStakedUniTokens.mul(uniLpPrice);\n  const yieldPercentage = remainingLqtyInUSD.div(totalStakedUniLpInUSD).mul(100);\n  if (yieldPercentage.isZero) return null;\n  return /*#__PURE__*/_jsxDEV(Badge, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      children: [daysRemaining === null || daysRemaining === void 0 ? void 0 : daysRemaining.prettify(0), \" day yield \", yieldPercentage.toString(2), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoIcon, {\n      tooltip: /*#__PURE__*/_jsxDEV(Card, {\n        variant: \"tooltip\",\n        sx: {\n          minWidth: [\"auto\", \"352px\"]\n        },\n        children: [/*#__PURE__*/_jsxDEV(Paragraph, {\n          children: [\"An \", /*#__PURE__*/_jsxDEV(Text, {\n            sx: {\n              fontWeight: \"bold\"\n            },\n            children: \"estimate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 18\n          }, this), \" of the LQTY return on staked UNI LP tokens. The farm runs for 6-weeks, and the return is relative to the time remaining.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n          sx: {\n            fontSize: \"12px\",\n            fontFamily: \"monospace\",\n            mt: 2\n          },\n          children: [\"($LQTY_REWARDS / $STAKED_UNI_LP) * 100 =\", \" \", /*#__PURE__*/_jsxDEV(Text, {\n            sx: {\n              fontWeight: \"bold\"\n            },\n            children: \" Yield\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n          sx: {\n            fontSize: \"12px\",\n            fontFamily: \"monospace\"\n          },\n          children: [\"($\", remainingLqtyInUSD.shorten(), \" / $\", totalStakedUniLpInUSD.shorten(), \") * 100 =\", /*#__PURE__*/_jsxDEV(Text, {\n            sx: {\n              fontWeight: \"bold\"\n            },\n            children: [\" \", yieldPercentage.toString(2), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Yield, \"i4Q3me4KRPK1X/gsfGDESuMvS1Q=\", false, function () {\n  return [useLiquity, useLiquitySelector];\n});\n\n_c = Yield;\n\nvar _c;\n\n$RefreshReg$(_c, \"Yield\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/views/Yield.tsx"],"names":["React","useEffect","useState","Card","Paragraph","Text","useLiquitySelector","InfoIcon","useLiquity","Badge","fetchPrices","selector","remainingLiquidityMiningLQTYReward","totalStakedUniTokens","Yield","liquity","connection","addresses","liquidityMiningLQTYRewardRate","lqtyPrice","setLqtyPrice","undefined","uniLpPrice","setUniLpPrice","hasZeroValue","isZero","lqtyTokenAddress","uniTokenAddress","secondsRemaining","div","daysRemaining","lqtyPriceUSD","uniLpPriceUSD","error","console","remainingLqtyInUSD","mul","totalStakedUniLpInUSD","yieldPercentage","prettify","toString","minWidth","fontWeight","fontSize","fontFamily","mt","shorten"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Card, Paragraph, Text } from \"theme-ui\";\nimport { Decimal, LiquityStoreState } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { InfoIcon } from \"../../InfoIcon\";\nimport { useLiquity } from \"../../../hooks/LiquityContext\";\nimport { Badge } from \"../../Badge\";\nimport { fetchPrices } from \"../context/fetchPrices\";\n\nconst selector = ({\n  remainingLiquidityMiningLQTYReward,\n  totalStakedUniTokens\n}: LiquityStoreState) => ({\n  remainingLiquidityMiningLQTYReward,\n  totalStakedUniTokens\n});\n\nexport const Yield: React.FC = () => {\n  const {\n    liquity: {\n      connection: { addresses, liquidityMiningLQTYRewardRate }\n    }\n  } = useLiquity();\n\n  const { remainingLiquidityMiningLQTYReward, totalStakedUniTokens } = useLiquitySelector(selector);\n  const [lqtyPrice, setLqtyPrice] = useState<Decimal | undefined>(undefined);\n  const [uniLpPrice, setUniLpPrice] = useState<Decimal | undefined>(undefined);\n  const hasZeroValue = remainingLiquidityMiningLQTYReward.isZero || totalStakedUniTokens.isZero;\n  const lqtyTokenAddress = addresses[\"lqtyToken\"];\n  const uniTokenAddress = addresses[\"uniToken\"];\n  const secondsRemaining = remainingLiquidityMiningLQTYReward.div(liquidityMiningLQTYRewardRate);\n  const daysRemaining = secondsRemaining.div(60 * 60 * 24);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { lqtyPriceUSD, uniLpPriceUSD } = await fetchPrices(lqtyTokenAddress, uniTokenAddress);\n        setLqtyPrice(lqtyPriceUSD);\n        setUniLpPrice(uniLpPriceUSD);\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }, [lqtyTokenAddress, uniTokenAddress]);\n\n  if (hasZeroValue || lqtyPrice === undefined || uniLpPrice === undefined) return null;\n\n  const remainingLqtyInUSD = remainingLiquidityMiningLQTYReward.mul(lqtyPrice);\n  const totalStakedUniLpInUSD = totalStakedUniTokens.mul(uniLpPrice);\n  const yieldPercentage = remainingLqtyInUSD.div(totalStakedUniLpInUSD).mul(100);\n\n  if (yieldPercentage.isZero) return null;\n\n  return (\n    <Badge>\n      <Text>\n        {daysRemaining?.prettify(0)} day yield {yieldPercentage.toString(2)}%\n      </Text>\n      <InfoIcon\n        tooltip={\n          <Card variant=\"tooltip\" sx={{ minWidth: [\"auto\", \"352px\"] }}>\n            <Paragraph>\n              An <Text sx={{ fontWeight: \"bold\" }}>estimate</Text> of the LQTY return on staked UNI\n              LP tokens. The farm runs for 6-weeks, and the return is relative to the time remaining.\n            </Paragraph>\n            <Paragraph sx={{ fontSize: \"12px\", fontFamily: \"monospace\", mt: 2 }}>\n              ($LQTY_REWARDS / $STAKED_UNI_LP) * 100 ={\" \"}\n              <Text sx={{ fontWeight: \"bold\" }}> Yield</Text>\n            </Paragraph>\n            <Paragraph sx={{ fontSize: \"12px\", fontFamily: \"monospace\" }}>\n              ($\n              {remainingLqtyInUSD.shorten()} / ${totalStakedUniLpInUSD.shorten()}) * 100 =\n              <Text sx={{ fontWeight: \"bold\" }}> {yieldPercentage.toString(2)}%</Text>\n            </Paragraph>\n          </Card>\n        }\n      ></InfoIcon>\n    </Badge>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}