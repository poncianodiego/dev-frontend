{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquityStore = void 0;\n\nconst assert_1 = __importDefault(require(\"assert\"));\n\nconst strictEquals = (a, b) => a === b;\n\nconst eq = (a, b) => a.eq(b);\n\nconst equals = (a, b) => a.equals(b);\n\nconst frontendStatusEquals = (a, b) => a.status === \"unregistered\" ? b.status === \"unregistered\" : b.status === \"registered\" && a.kickbackRate.eq(b.kickbackRate);\n\nconst showFrontendStatus = x => x.status === \"unregistered\" ? '{ status: \"unregistered\" }' : `{ status: \"registered\", kickbackRate: ${x.kickbackRate} }`;\n\nconst wrap = f => (...args) => f(...args);\n\nconst difference = (a, b) => Object.fromEntries(Object.entries(a).filter(([key, value]) => value !== b[key]));\n/**\n * Abstract base class of Liquity data store implementations.\n *\n * @remarks\n * The type parameter `T` may be used to type extra state added to {@link LiquityStoreState} by the\n * subclass.\n *\n * Implemented by {@link @liquity/lib-ethers#BlockPolledLiquityStore}.\n *\n * @public\n */\n\n\nclass LiquityStore {\n  constructor() {\n    /** Turn console logging on/off. */\n    this.logging = false;\n    /** @internal */\n\n    this._loaded = false;\n    this._listeners = new Set();\n  }\n  /**\n   * The current store state.\n   *\n   * @remarks\n   * Should not be accessed before the store is loaded. Assign a function to\n   * {@link LiquityStore.onLoaded | onLoaded} to get a callback when this happens.\n   *\n   * See {@link LiquityStoreState} for the list of properties returned.\n   */\n\n\n  get state() {\n    return Object.assign({}, this._baseState, this._derivedState, this._extraState);\n  }\n  /**\n   * Start monitoring the blockchain for Liquity state changes.\n   *\n   * @remarks\n   * The {@link LiquityStore.onLoaded | onLoaded} callback will be called after the state is fetched\n   * for the first time.\n   *\n   * Use the {@link LiquityStore.subscribe | subscribe()} function to register listeners.\n   *\n   * @returns Function to stop the monitoring.\n   */\n\n\n  start() {\n    const doStop = this._doStart();\n\n    return () => {\n      doStop();\n\n      this._cancelUpdateIfScheduled();\n    };\n  }\n\n  _cancelUpdateIfScheduled() {\n    if (this._updateTimeoutId !== undefined) {\n      clearTimeout(this._updateTimeoutId);\n    }\n  }\n\n  _scheduleUpdate() {\n    this._cancelUpdateIfScheduled();\n\n    this._updateTimeoutId = setTimeout(() => {\n      this._updateTimeoutId = undefined;\n\n      this._update();\n    }, 30000);\n  }\n\n  _logUpdate(name, next, show) {\n    if (this.logging) {\n      console.log(`${name} updated to ${show ? show(next) : next}`);\n    }\n\n    return next;\n  }\n\n  _updateIfChanged(equals, name, prev, next, show) {\n    return next !== undefined && !equals(prev, next) ? this._logUpdate(name, next, show) : prev;\n  }\n\n  _silentlyUpdateIfChanged(equals, prev, next) {\n    return next !== undefined && !equals(prev, next) ? next : prev;\n  }\n\n  _updateFees(name, prev, next) {\n    if (next && !next.equals(prev)) {\n      // Filter out fee update spam that happens on every new block by only logging when string\n      // representation changes.\n      if (`${next}` !== `${prev}`) {\n        this._logUpdate(name, next);\n      }\n\n      return next;\n    } else {\n      return prev;\n    }\n  }\n\n  _reduce(baseState, baseStateUpdate) {\n    return {\n      frontend: this._updateIfChanged(frontendStatusEquals, \"frontend\", baseState.frontend, baseStateUpdate.frontend, showFrontendStatus),\n      ownFrontend: this._updateIfChanged(frontendStatusEquals, \"ownFrontend\", baseState.ownFrontend, baseStateUpdate.ownFrontend, showFrontendStatus),\n      numberOfTroves: this._updateIfChanged(strictEquals, \"numberOfTroves\", baseState.numberOfTroves, baseStateUpdate.numberOfTroves),\n      accountBalance: this._updateIfChanged(eq, \"accountBalance\", baseState.accountBalance, baseStateUpdate.accountBalance),\n      lusdBalance: this._updateIfChanged(eq, \"lusdBalance\", baseState.lusdBalance, baseStateUpdate.lusdBalance),\n      lqtyBalance: this._updateIfChanged(eq, \"lqtyBalance\", baseState.lqtyBalance, baseStateUpdate.lqtyBalance),\n      uniTokenBalance: this._updateIfChanged(eq, \"uniTokenBalance\", baseState.uniTokenBalance, baseStateUpdate.uniTokenBalance),\n      uniTokenAllowance: this._updateIfChanged(eq, \"uniTokenAllowance\", baseState.uniTokenAllowance, baseStateUpdate.uniTokenAllowance),\n      remainingLiquidityMiningLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.remainingLiquidityMiningLQTYReward, baseStateUpdate.remainingLiquidityMiningLQTYReward),\n      liquidityMiningStake: this._updateIfChanged(eq, \"liquidityMiningStake\", baseState.liquidityMiningStake, baseStateUpdate.liquidityMiningStake),\n      totalStakedUniTokens: this._updateIfChanged(eq, \"totalStakedUniTokens\", baseState.totalStakedUniTokens, baseStateUpdate.totalStakedUniTokens),\n      liquidityMiningLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.liquidityMiningLQTYReward, baseStateUpdate.liquidityMiningLQTYReward),\n      collateralSurplusBalance: this._updateIfChanged(eq, \"collateralSurplusBalance\", baseState.collateralSurplusBalance, baseStateUpdate.collateralSurplusBalance),\n      price: this._updateIfChanged(eq, \"price\", baseState.price, baseStateUpdate.price),\n      lusdInStabilityPool: this._updateIfChanged(eq, \"lusdInStabilityPool\", baseState.lusdInStabilityPool, baseStateUpdate.lusdInStabilityPool),\n      total: this._updateIfChanged(equals, \"total\", baseState.total, baseStateUpdate.total),\n      totalRedistributed: this._updateIfChanged(equals, \"totalRedistributed\", baseState.totalRedistributed, baseStateUpdate.totalRedistributed),\n      troveBeforeRedistribution: this._updateIfChanged(equals, \"troveBeforeRedistribution\", baseState.troveBeforeRedistribution, baseStateUpdate.troveBeforeRedistribution),\n      stabilityDeposit: this._updateIfChanged(equals, \"stabilityDeposit\", baseState.stabilityDeposit, baseStateUpdate.stabilityDeposit),\n      remainingStabilityPoolLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.remainingStabilityPoolLQTYReward, baseStateUpdate.remainingStabilityPoolLQTYReward),\n      _feesInNormalMode: this._silentlyUpdateIfChanged(equals, baseState._feesInNormalMode, baseStateUpdate._feesInNormalMode),\n      lqtyStake: this._updateIfChanged(equals, \"lqtyStake\", baseState.lqtyStake, baseStateUpdate.lqtyStake),\n      totalStakedLQTY: this._updateIfChanged(eq, \"totalStakedLQTY\", baseState.totalStakedLQTY, baseStateUpdate.totalStakedLQTY),\n      _riskiestTroveBeforeRedistribution: this._silentlyUpdateIfChanged(equals, baseState._riskiestTroveBeforeRedistribution, baseStateUpdate._riskiestTroveBeforeRedistribution)\n    };\n  }\n\n  _derive({\n    troveBeforeRedistribution,\n    totalRedistributed,\n    _feesInNormalMode,\n    total,\n    price,\n    _riskiestTroveBeforeRedistribution\n  }) {\n    const fees = _feesInNormalMode._setRecoveryMode(total.collateralRatioIsBelowCritical(price));\n\n    return {\n      trove: troveBeforeRedistribution.applyRedistribution(totalRedistributed),\n      fees,\n      borrowingRate: fees.borrowingRate(),\n      redemptionRate: fees.redemptionRate(),\n      haveUndercollateralizedTroves: _riskiestTroveBeforeRedistribution.applyRedistribution(totalRedistributed).collateralRatioIsBelowMinimum(price)\n    };\n  }\n\n  _reduceDerived(derivedState, derivedStateUpdate) {\n    return {\n      fees: this._updateFees(\"fees\", derivedState.fees, derivedStateUpdate.fees),\n      trove: this._updateIfChanged(equals, \"trove\", derivedState.trove, derivedStateUpdate.trove),\n      borrowingRate: this._silentlyUpdateIfChanged(eq, derivedState.borrowingRate, derivedStateUpdate.borrowingRate),\n      redemptionRate: this._silentlyUpdateIfChanged(eq, derivedState.redemptionRate, derivedStateUpdate.redemptionRate),\n      haveUndercollateralizedTroves: this._updateIfChanged(strictEquals, \"haveUndercollateralizedTroves\", derivedState.haveUndercollateralizedTroves, derivedStateUpdate.haveUndercollateralizedTroves)\n    };\n  }\n\n  _notify(params) {\n    // Iterate on a copy of `_listeners`, to avoid notifying any new listeners subscribed by\n    // existing listeners, as that could result in infinite loops.\n    //\n    // Before calling a listener from our copy of `_listeners`, check if it has been removed from\n    // the original set. This way we avoid calling listeners that have already been unsubscribed\n    // by an earlier listener callback.\n    [...this._listeners].forEach(listener => {\n      if (this._listeners.has(listener)) {\n        listener(params);\n      }\n    });\n  }\n  /**\n   * Register a state change listener.\n   *\n   * @param listener - Function that will be called whenever state changes.\n   * @returns Function to unregister this listener.\n   */\n\n\n  subscribe(listener) {\n    const uniqueListener = wrap(listener);\n\n    this._listeners.add(uniqueListener);\n\n    return () => {\n      this._listeners.delete(uniqueListener);\n    };\n  }\n  /** @internal */\n\n\n  _load(baseState, extraState) {\n    assert_1.default(!this._loaded);\n    this._baseState = baseState;\n    this._derivedState = this._derive(baseState);\n    this._extraState = extraState;\n    this._loaded = true;\n\n    this._scheduleUpdate();\n\n    if (this.onLoaded) {\n      this.onLoaded();\n    }\n  }\n  /** @internal */\n\n\n  _update(baseStateUpdate, extraStateUpdate) {\n    assert_1.default(this._baseState && this._derivedState);\n    const oldState = this.state;\n\n    if (baseStateUpdate) {\n      this._baseState = this._reduce(this._baseState, baseStateUpdate);\n    } // Always running this lets us derive state based on passage of time, like baseRate decay\n\n\n    this._derivedState = this._reduceDerived(this._derivedState, this._derive(this._baseState));\n\n    if (extraStateUpdate) {\n      assert_1.default(this._extraState);\n      this._extraState = this._reduceExtra(this._extraState, extraStateUpdate);\n    }\n\n    this._scheduleUpdate();\n\n    this._notify({\n      newState: this.state,\n      oldState,\n      stateChange: difference(this.state, oldState)\n    });\n  }\n\n}\n\nexports.LiquityStore = LiquityStore;","map":{"version":3,"sources":["../../src/LiquityStore.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LiquityStore = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst strictEquals = (a, b) => a === b;\nconst eq = (a, b) => a.eq(b);\nconst equals = (a, b) => a.equals(b);\nconst frontendStatusEquals = (a, b) => a.status === \"unregistered\"\n    ? b.status === \"unregistered\"\n    : b.status === \"registered\" && a.kickbackRate.eq(b.kickbackRate);\nconst showFrontendStatus = (x) => x.status === \"unregistered\"\n    ? '{ status: \"unregistered\" }'\n    : `{ status: \"registered\", kickbackRate: ${x.kickbackRate} }`;\nconst wrap = (f) => (...args) => f(...args);\nconst difference = (a, b) => Object.fromEntries(Object.entries(a).filter(([key, value]) => value !== b[key]));\n/**\n * Abstract base class of Liquity data store implementations.\n *\n * @remarks\n * The type parameter `T` may be used to type extra state added to {@link LiquityStoreState} by the\n * subclass.\n *\n * Implemented by {@link @liquity/lib-ethers#BlockPolledLiquityStore}.\n *\n * @public\n */\nclass LiquityStore {\n    constructor() {\n        /** Turn console logging on/off. */\n        this.logging = false;\n        /** @internal */\n        this._loaded = false;\n        this._listeners = new Set();\n    }\n    /**\n     * The current store state.\n     *\n     * @remarks\n     * Should not be accessed before the store is loaded. Assign a function to\n     * {@link LiquityStore.onLoaded | onLoaded} to get a callback when this happens.\n     *\n     * See {@link LiquityStoreState} for the list of properties returned.\n     */\n    get state() {\n        return Object.assign({}, this._baseState, this._derivedState, this._extraState);\n    }\n    /**\n     * Start monitoring the blockchain for Liquity state changes.\n     *\n     * @remarks\n     * The {@link LiquityStore.onLoaded | onLoaded} callback will be called after the state is fetched\n     * for the first time.\n     *\n     * Use the {@link LiquityStore.subscribe | subscribe()} function to register listeners.\n     *\n     * @returns Function to stop the monitoring.\n     */\n    start() {\n        const doStop = this._doStart();\n        return () => {\n            doStop();\n            this._cancelUpdateIfScheduled();\n        };\n    }\n    _cancelUpdateIfScheduled() {\n        if (this._updateTimeoutId !== undefined) {\n            clearTimeout(this._updateTimeoutId);\n        }\n    }\n    _scheduleUpdate() {\n        this._cancelUpdateIfScheduled();\n        this._updateTimeoutId = setTimeout(() => {\n            this._updateTimeoutId = undefined;\n            this._update();\n        }, 30000);\n    }\n    _logUpdate(name, next, show) {\n        if (this.logging) {\n            console.log(`${name} updated to ${show ? show(next) : next}`);\n        }\n        return next;\n    }\n    _updateIfChanged(equals, name, prev, next, show) {\n        return next !== undefined && !equals(prev, next) ? this._logUpdate(name, next, show) : prev;\n    }\n    _silentlyUpdateIfChanged(equals, prev, next) {\n        return next !== undefined && !equals(prev, next) ? next : prev;\n    }\n    _updateFees(name, prev, next) {\n        if (next && !next.equals(prev)) {\n            // Filter out fee update spam that happens on every new block by only logging when string\n            // representation changes.\n            if (`${next}` !== `${prev}`) {\n                this._logUpdate(name, next);\n            }\n            return next;\n        }\n        else {\n            return prev;\n        }\n    }\n    _reduce(baseState, baseStateUpdate) {\n        return {\n            frontend: this._updateIfChanged(frontendStatusEquals, \"frontend\", baseState.frontend, baseStateUpdate.frontend, showFrontendStatus),\n            ownFrontend: this._updateIfChanged(frontendStatusEquals, \"ownFrontend\", baseState.ownFrontend, baseStateUpdate.ownFrontend, showFrontendStatus),\n            numberOfTroves: this._updateIfChanged(strictEquals, \"numberOfTroves\", baseState.numberOfTroves, baseStateUpdate.numberOfTroves),\n            accountBalance: this._updateIfChanged(eq, \"accountBalance\", baseState.accountBalance, baseStateUpdate.accountBalance),\n            lusdBalance: this._updateIfChanged(eq, \"lusdBalance\", baseState.lusdBalance, baseStateUpdate.lusdBalance),\n            lqtyBalance: this._updateIfChanged(eq, \"lqtyBalance\", baseState.lqtyBalance, baseStateUpdate.lqtyBalance),\n            uniTokenBalance: this._updateIfChanged(eq, \"uniTokenBalance\", baseState.uniTokenBalance, baseStateUpdate.uniTokenBalance),\n            uniTokenAllowance: this._updateIfChanged(eq, \"uniTokenAllowance\", baseState.uniTokenAllowance, baseStateUpdate.uniTokenAllowance),\n            remainingLiquidityMiningLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.remainingLiquidityMiningLQTYReward, baseStateUpdate.remainingLiquidityMiningLQTYReward),\n            liquidityMiningStake: this._updateIfChanged(eq, \"liquidityMiningStake\", baseState.liquidityMiningStake, baseStateUpdate.liquidityMiningStake),\n            totalStakedUniTokens: this._updateIfChanged(eq, \"totalStakedUniTokens\", baseState.totalStakedUniTokens, baseStateUpdate.totalStakedUniTokens),\n            liquidityMiningLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.liquidityMiningLQTYReward, baseStateUpdate.liquidityMiningLQTYReward),\n            collateralSurplusBalance: this._updateIfChanged(eq, \"collateralSurplusBalance\", baseState.collateralSurplusBalance, baseStateUpdate.collateralSurplusBalance),\n            price: this._updateIfChanged(eq, \"price\", baseState.price, baseStateUpdate.price),\n            lusdInStabilityPool: this._updateIfChanged(eq, \"lusdInStabilityPool\", baseState.lusdInStabilityPool, baseStateUpdate.lusdInStabilityPool),\n            total: this._updateIfChanged(equals, \"total\", baseState.total, baseStateUpdate.total),\n            totalRedistributed: this._updateIfChanged(equals, \"totalRedistributed\", baseState.totalRedistributed, baseStateUpdate.totalRedistributed),\n            troveBeforeRedistribution: this._updateIfChanged(equals, \"troveBeforeRedistribution\", baseState.troveBeforeRedistribution, baseStateUpdate.troveBeforeRedistribution),\n            stabilityDeposit: this._updateIfChanged(equals, \"stabilityDeposit\", baseState.stabilityDeposit, baseStateUpdate.stabilityDeposit),\n            remainingStabilityPoolLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.remainingStabilityPoolLQTYReward, baseStateUpdate.remainingStabilityPoolLQTYReward),\n            _feesInNormalMode: this._silentlyUpdateIfChanged(equals, baseState._feesInNormalMode, baseStateUpdate._feesInNormalMode),\n            lqtyStake: this._updateIfChanged(equals, \"lqtyStake\", baseState.lqtyStake, baseStateUpdate.lqtyStake),\n            totalStakedLQTY: this._updateIfChanged(eq, \"totalStakedLQTY\", baseState.totalStakedLQTY, baseStateUpdate.totalStakedLQTY),\n            _riskiestTroveBeforeRedistribution: this._silentlyUpdateIfChanged(equals, baseState._riskiestTroveBeforeRedistribution, baseStateUpdate._riskiestTroveBeforeRedistribution)\n        };\n    }\n    _derive({ troveBeforeRedistribution, totalRedistributed, _feesInNormalMode, total, price, _riskiestTroveBeforeRedistribution }) {\n        const fees = _feesInNormalMode._setRecoveryMode(total.collateralRatioIsBelowCritical(price));\n        return {\n            trove: troveBeforeRedistribution.applyRedistribution(totalRedistributed),\n            fees,\n            borrowingRate: fees.borrowingRate(),\n            redemptionRate: fees.redemptionRate(),\n            haveUndercollateralizedTroves: _riskiestTroveBeforeRedistribution\n                .applyRedistribution(totalRedistributed)\n                .collateralRatioIsBelowMinimum(price)\n        };\n    }\n    _reduceDerived(derivedState, derivedStateUpdate) {\n        return {\n            fees: this._updateFees(\"fees\", derivedState.fees, derivedStateUpdate.fees),\n            trove: this._updateIfChanged(equals, \"trove\", derivedState.trove, derivedStateUpdate.trove),\n            borrowingRate: this._silentlyUpdateIfChanged(eq, derivedState.borrowingRate, derivedStateUpdate.borrowingRate),\n            redemptionRate: this._silentlyUpdateIfChanged(eq, derivedState.redemptionRate, derivedStateUpdate.redemptionRate),\n            haveUndercollateralizedTroves: this._updateIfChanged(strictEquals, \"haveUndercollateralizedTroves\", derivedState.haveUndercollateralizedTroves, derivedStateUpdate.haveUndercollateralizedTroves)\n        };\n    }\n    _notify(params) {\n        // Iterate on a copy of `_listeners`, to avoid notifying any new listeners subscribed by\n        // existing listeners, as that could result in infinite loops.\n        //\n        // Before calling a listener from our copy of `_listeners`, check if it has been removed from\n        // the original set. This way we avoid calling listeners that have already been unsubscribed\n        // by an earlier listener callback.\n        [...this._listeners].forEach(listener => {\n            if (this._listeners.has(listener)) {\n                listener(params);\n            }\n        });\n    }\n    /**\n     * Register a state change listener.\n     *\n     * @param listener - Function that will be called whenever state changes.\n     * @returns Function to unregister this listener.\n     */\n    subscribe(listener) {\n        const uniqueListener = wrap(listener);\n        this._listeners.add(uniqueListener);\n        return () => {\n            this._listeners.delete(uniqueListener);\n        };\n    }\n    /** @internal */\n    _load(baseState, extraState) {\n        assert_1.default(!this._loaded);\n        this._baseState = baseState;\n        this._derivedState = this._derive(baseState);\n        this._extraState = extraState;\n        this._loaded = true;\n        this._scheduleUpdate();\n        if (this.onLoaded) {\n            this.onLoaded();\n        }\n    }\n    /** @internal */\n    _update(baseStateUpdate, extraStateUpdate) {\n        assert_1.default(this._baseState && this._derivedState);\n        const oldState = this.state;\n        if (baseStateUpdate) {\n            this._baseState = this._reduce(this._baseState, baseStateUpdate);\n        }\n        // Always running this lets us derive state based on passage of time, like baseRate decay\n        this._derivedState = this._reduceDerived(this._derivedState, this._derive(this._baseState));\n        if (extraStateUpdate) {\n            assert_1.default(this._extraState);\n            this._extraState = this._reduceExtra(this._extraState, extraStateUpdate);\n        }\n        this._scheduleUpdate();\n        this._notify({\n            newState: this.state,\n            oldState,\n            stateChange: difference(this.state, oldState)\n        });\n    }\n}\nexports.LiquityStore = LiquityStore;\n//# sourceMappingURL=LiquityStore.js.map"]},"metadata":{},"sourceType":"script"}