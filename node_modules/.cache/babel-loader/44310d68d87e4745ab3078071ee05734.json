{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/views/Staking/Staking.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\nimport { Heading, Box, Flex, Card, Button } from \"theme-ui\";\nimport { Decimal } from \"@liquity/lib-base\";\nimport { LP } from \"../../../../strings\";\nimport { Icon } from \"../../../Icon\";\nimport { EditableRow, StaticRow } from \"../../../Trove/Editor\";\nimport { LoadingOverlay } from \"../../../LoadingOverlay\";\nimport { useFarmView } from \"../../context/FarmViewContext\";\nimport { useMyTransactionState } from \"../../../Transaction\";\nimport { Confirm } from \"../Confirm\";\nimport { Description } from \"../Description\";\nimport { Approve } from \"../Approve\";\nimport { Validation } from \"../Validation\";\nimport { useValidationState } from \"../../context/useValidationState\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst transactionId = /farm-/;\n\nconst selector = ({\n  totalStakedUniTokens\n}) => ({\n  totalStakedUniTokens\n});\n\nexport const Staking = () => {\n  _s();\n\n  const {\n    dispatchEvent\n  } = useFarmView();\n  const {\n    totalStakedUniTokens\n  } = useLiquitySelector(selector);\n  const [amount, setAmount] = useState(Decimal.from(0));\n  const editingState = useState();\n  const isDirty = !amount.isZero;\n  const {\n    maximumStake,\n    hasSetMaximumStake\n  } = useValidationState(amount);\n  const transactionState = useMyTransactionState(transactionId);\n  const isTransactionPending = transactionState.type === \"waitingForApproval\" || transactionState.type === \"waitingForConfirmation\";\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_PRESSED\");\n  }, [dispatchEvent]);\n  const nextTotalStakedUniTokens = totalStakedUniTokens.add(amount);\n  const poolShare = amount.mulDiv(100, nextTotalStakedUniTokens);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      children: [\"Uniswap Liquidity Farm\", isDirty && !isTransactionPending && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"titleIcon\",\n        sx: {\n          \":enabled:hover\": {\n            color: \"danger\"\n          }\n        },\n        onClick: () => setAmount(Decimal.from(0)),\n        children: /*#__PURE__*/_jsxDEV(Icon, {\n          name: \"history\",\n          size: \"lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: [2, 3]\n      },\n      children: [/*#__PURE__*/_jsxDEV(EditableRow, {\n        label: \"Stake\",\n        inputId: \"amount-lp\",\n        amount: amount.prettify(4),\n        unit: LP,\n        editingState: editingState,\n        editedAmount: amount.toString(4),\n        setEditedAmount: amount => setAmount(Decimal.from(amount)),\n        maxAmount: maximumStake.toString(),\n        maxedOut: hasSetMaximumStake\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), poolShare.infinite ? /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Pool share\",\n        inputId: \"farm-share\",\n        amount: \"N/A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Pool share\",\n        inputId: \"farm-share\",\n        amount: poolShare.prettify(4),\n        unit: \"%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), isDirty && /*#__PURE__*/_jsxDEV(Validation, {\n        amount: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Description, {\n        amount: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        variant: \"layout.actions\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"cancel\",\n          onClick: handleCancelPressed,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Approve, {\n          amount: amount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Confirm, {\n          amount: amount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), isTransactionPending && /*#__PURE__*/_jsxDEV(LoadingOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Staking, \"h+rRqnVdMqFghXbP0R8rSq1agcM=\", false, function () {\n  return [useFarmView, useLiquitySelector, useValidationState, useMyTransactionState];\n});\n\n_c = Staking;\n\nvar _c;\n\n$RefreshReg$(_c, \"Staking\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/views/Staking/Staking.tsx"],"names":["React","useCallback","useState","Heading","Box","Flex","Card","Button","Decimal","LP","Icon","EditableRow","StaticRow","LoadingOverlay","useFarmView","useMyTransactionState","Confirm","Description","Approve","Validation","useValidationState","useLiquitySelector","transactionId","selector","totalStakedUniTokens","Staking","dispatchEvent","amount","setAmount","from","editingState","isDirty","isZero","maximumStake","hasSetMaximumStake","transactionState","isTransactionPending","type","handleCancelPressed","nextTotalStakedUniTokens","add","poolShare","mulDiv","color","p","prettify","toString","infinite"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport { Heading, Box, Flex, Card, Button } from \"theme-ui\";\nimport { Decimal, LiquityStoreState } from \"@liquity/lib-base\";\nimport { LP } from \"../../../../strings\";\nimport { Icon } from \"../../../Icon\";\nimport { EditableRow, StaticRow } from \"../../../Trove/Editor\";\nimport { LoadingOverlay } from \"../../../LoadingOverlay\";\nimport { useFarmView } from \"../../context/FarmViewContext\";\nimport { useMyTransactionState } from \"../../../Transaction\";\nimport { Confirm } from \"../Confirm\";\nimport { Description } from \"../Description\";\nimport { Approve } from \"../Approve\";\nimport { Validation } from \"../Validation\";\nimport { useValidationState } from \"../../context/useValidationState\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\n\nconst transactionId = /farm-/;\nconst selector = ({ totalStakedUniTokens }: LiquityStoreState) => ({ totalStakedUniTokens });\n\nexport const Staking: React.FC = () => {\n  const { dispatchEvent } = useFarmView();\n  const { totalStakedUniTokens } = useLiquitySelector(selector);\n\n  const [amount, setAmount] = useState<Decimal>(Decimal.from(0));\n  const editingState = useState<string>();\n  const isDirty = !amount.isZero;\n\n  const { maximumStake, hasSetMaximumStake } = useValidationState(amount);\n\n  const transactionState = useMyTransactionState(transactionId);\n  const isTransactionPending =\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\";\n\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_PRESSED\");\n  }, [dispatchEvent]);\n\n  const nextTotalStakedUniTokens = totalStakedUniTokens.add(amount);\n\n  const poolShare = amount.mulDiv(100, nextTotalStakedUniTokens);\n\n  return (\n    <Card>\n      <Heading>\n        Uniswap Liquidity Farm\n        {isDirty && !isTransactionPending && (\n          <Button\n            variant=\"titleIcon\"\n            sx={{ \":enabled:hover\": { color: \"danger\" } }}\n            onClick={() => setAmount(Decimal.from(0))}\n          >\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Stake\"\n          inputId=\"amount-lp\"\n          amount={amount.prettify(4)}\n          unit={LP}\n          editingState={editingState}\n          editedAmount={amount.toString(4)}\n          setEditedAmount={amount => setAmount(Decimal.from(amount))}\n          maxAmount={maximumStake.toString()}\n          maxedOut={hasSetMaximumStake}\n        ></EditableRow>\n\n        {poolShare.infinite ? (\n          <StaticRow label=\"Pool share\" inputId=\"farm-share\" amount=\"N/A\" />\n        ) : (\n          <StaticRow\n            label=\"Pool share\"\n            inputId=\"farm-share\"\n            amount={poolShare.prettify(4)}\n            unit=\"%\"\n          />\n        )}\n\n        {isDirty && <Validation amount={amount} />}\n        <Description amount={amount} />\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"cancel\" onClick={handleCancelPressed}>\n            Cancel\n          </Button>\n          <Approve amount={amount} />\n          <Confirm amount={amount} />\n        </Flex>\n      </Box>\n      {isTransactionPending && <LoadingOverlay />}\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}