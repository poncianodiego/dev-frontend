{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MINIMUM_REDEMPTION_RATE = exports.MAXIMUM_BORROWING_RATE = exports.MINIMUM_BORROWING_RATE = exports.LUSD_MINIMUM_DEBT = exports.LUSD_MINIMUM_NET_DEBT = exports.LUSD_LIQUIDATION_RESERVE = exports.MINIMUM_COLLATERAL_RATIO = exports.CRITICAL_COLLATERAL_RATIO = void 0;\n\nvar Decimal_1 = require(\"./Decimal\");\n/**\n * Total collateral ratio below which recovery mode is triggered.\n *\n * @public\n */\n\n\nexports.CRITICAL_COLLATERAL_RATIO = Decimal_1.Decimal.from(1.5);\n/**\n * Collateral ratio below which a Trove can be liquidated in normal mode.\n *\n * @public\n */\n\nexports.MINIMUM_COLLATERAL_RATIO = Decimal_1.Decimal.from(1.1);\n/**\n * Amount of LUSD that's reserved for compensating the liquidator of a Trove.\n *\n * @public\n */\n\nexports.LUSD_LIQUIDATION_RESERVE = Decimal_1.Decimal.from(200);\n/**\n * A Trove must always have at least this much debt on top of the\n * {@link LUSD_LIQUIDATION_RESERVE | liquidation reserve}.\n *\n * @remarks\n * Any transaction that would result in a Trove with less net debt than this will be reverted.\n *\n * @public\n */\n\nexports.LUSD_MINIMUM_NET_DEBT = Decimal_1.Decimal.from(1800);\n/**\n * A Trove must always have at least this much debt.\n *\n * @remarks\n * Any transaction that would result in a Trove with less debt than this will be reverted.\n *\n * @public\n */\n\nexports.LUSD_MINIMUM_DEBT = exports.LUSD_LIQUIDATION_RESERVE.add(exports.LUSD_MINIMUM_NET_DEBT);\n/**\n * Value that the {@link Fees.borrowingRate | borrowing rate} will never decay below.\n *\n * @remarks\n * Note that the borrowing rate can still be lower than this during recovery mode, when it's\n * overridden by zero.\n *\n * @public\n */\n\nexports.MINIMUM_BORROWING_RATE = Decimal_1.Decimal.from(0.005);\n/**\n * Value that the {@link Fees.borrowingRate | borrowing rate} will never exceed.\n *\n * @public\n */\n\nexports.MAXIMUM_BORROWING_RATE = Decimal_1.Decimal.from(0.05);\n/**\n * Value that the {@link Fees.redemptionRate | redemption rate} will never decay below.\n *\n * @public\n */\n\nexports.MINIMUM_REDEMPTION_RATE = Decimal_1.Decimal.from(0.005);","map":{"version":3,"sources":["../../src/constants.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;;;;AAIG;;;AACU,OAAA,CAAA,yBAAA,GAA4B,SAAA,CAAA,OAAA,CAAQ,IAAR,CAAa,GAAb,CAA5B;AAEb;;;;AAIG;;AACU,OAAA,CAAA,wBAAA,GAA2B,SAAA,CAAA,OAAA,CAAQ,IAAR,CAAa,GAAb,CAA3B;AAEb;;;;AAIG;;AACU,OAAA,CAAA,wBAAA,GAA2B,SAAA,CAAA,OAAA,CAAQ,IAAR,CAAa,GAAb,CAA3B;AAEb;;;;;;;;AAQG;;AACU,OAAA,CAAA,qBAAA,GAAwB,SAAA,CAAA,OAAA,CAAQ,IAAR,CAAa,IAAb,CAAxB;AAEb;;;;;;;AAOG;;AACU,OAAA,CAAA,iBAAA,GAAoB,OAAA,CAAA,wBAAA,CAAyB,GAAzB,CAA6B,OAAA,CAAA,qBAA7B,CAApB;AAEb;;;;;;;;AAQG;;AACU,OAAA,CAAA,sBAAA,GAAyB,SAAA,CAAA,OAAA,CAAQ,IAAR,CAAa,KAAb,CAAzB;AAEb;;;;AAIG;;AACU,OAAA,CAAA,sBAAA,GAAyB,SAAA,CAAA,OAAA,CAAQ,IAAR,CAAa,IAAb,CAAzB;AAEb;;;;AAIG;;AACU,OAAA,CAAA,uBAAA,GAA0B,SAAA,CAAA,OAAA,CAAQ,IAAR,CAAa,KAAb,CAA1B","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MINIMUM_REDEMPTION_RATE = exports.MAXIMUM_BORROWING_RATE = exports.MINIMUM_BORROWING_RATE = exports.LUSD_MINIMUM_DEBT = exports.LUSD_MINIMUM_NET_DEBT = exports.LUSD_LIQUIDATION_RESERVE = exports.MINIMUM_COLLATERAL_RATIO = exports.CRITICAL_COLLATERAL_RATIO = void 0;\nconst Decimal_1 = require(\"./Decimal\");\n/**\n * Total collateral ratio below which recovery mode is triggered.\n *\n * @public\n */\nexports.CRITICAL_COLLATERAL_RATIO = Decimal_1.Decimal.from(1.5);\n/**\n * Collateral ratio below which a Trove can be liquidated in normal mode.\n *\n * @public\n */\nexports.MINIMUM_COLLATERAL_RATIO = Decimal_1.Decimal.from(1.1);\n/**\n * Amount of LUSD that's reserved for compensating the liquidator of a Trove.\n *\n * @public\n */\nexports.LUSD_LIQUIDATION_RESERVE = Decimal_1.Decimal.from(200);\n/**\n * A Trove must always have at least this much debt on top of the\n * {@link LUSD_LIQUIDATION_RESERVE | liquidation reserve}.\n *\n * @remarks\n * Any transaction that would result in a Trove with less net debt than this will be reverted.\n *\n * @public\n */\nexports.LUSD_MINIMUM_NET_DEBT = Decimal_1.Decimal.from(1800);\n/**\n * A Trove must always have at least this much debt.\n *\n * @remarks\n * Any transaction that would result in a Trove with less debt than this will be reverted.\n *\n * @public\n */\nexports.LUSD_MINIMUM_DEBT = exports.LUSD_LIQUIDATION_RESERVE.add(exports.LUSD_MINIMUM_NET_DEBT);\n/**\n * Value that the {@link Fees.borrowingRate | borrowing rate} will never decay below.\n *\n * @remarks\n * Note that the borrowing rate can still be lower than this during recovery mode, when it's\n * overridden by zero.\n *\n * @public\n */\nexports.MINIMUM_BORROWING_RATE = Decimal_1.Decimal.from(0.005);\n/**\n * Value that the {@link Fees.borrowingRate | borrowing rate} will never exceed.\n *\n * @public\n */\nexports.MAXIMUM_BORROWING_RATE = Decimal_1.Decimal.from(0.05);\n/**\n * Value that the {@link Fees.redemptionRate | redemption rate} will never decay below.\n *\n * @public\n */\nexports.MINIMUM_REDEMPTION_RATE = Decimal_1.Decimal.from(0.005);\n//# sourceMappingURL=constants.js.map"]},"metadata":{},"sourceType":"script"}