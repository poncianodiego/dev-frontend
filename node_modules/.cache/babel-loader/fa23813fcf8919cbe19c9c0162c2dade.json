{"ast":null,"code":"import _slicedToArray from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useCallback,useEffect,useRef}from\"react\";import{useLiquitySelector}from\"@liquity/lib-react\";import{TroveViewContext}from\"./TroveViewContext\";import{jsx as _jsx}from\"react/jsx-runtime\";var transitions={NONE:{OPEN_TROVE_PRESSED:\"OPENING\",TROVE_OPENED:\"ACTIVE\"},LIQUIDATED:{OPEN_TROVE_PRESSED:\"OPENING\",TROVE_SURPLUS_COLLATERAL_CLAIMED:\"NONE\",TROVE_OPENED:\"ACTIVE\"},REDEEMED:{OPEN_TROVE_PRESSED:\"OPENING\",TROVE_SURPLUS_COLLATERAL_CLAIMED:\"NONE\",TROVE_OPENED:\"ACTIVE\"},OPENING:{CANCEL_ADJUST_TROVE_PRESSED:\"NONE\",TROVE_OPENED:\"ACTIVE\"},ADJUSTING:{CANCEL_ADJUST_TROVE_PRESSED:\"ACTIVE\",TROVE_ADJUSTED:\"ACTIVE\",TROVE_CLOSED:\"NONE\",TROVE_LIQUIDATED:\"LIQUIDATED\",TROVE_REDEEMED:\"REDEEMED\"},CLOSING:{CANCEL_ADJUST_TROVE_PRESSED:\"ACTIVE\",TROVE_CLOSED:\"NONE\",TROVE_ADJUSTED:\"ACTIVE\",TROVE_LIQUIDATED:\"LIQUIDATED\",TROVE_REDEEMED:\"REDEEMED\"},ACTIVE:{ADJUST_TROVE_PRESSED:\"ADJUSTING\",CLOSE_TROVE_PRESSED:\"CLOSING\",TROVE_CLOSED:\"NONE\",TROVE_LIQUIDATED:\"LIQUIDATED\",TROVE_REDEEMED:\"REDEEMED\"}};var troveStatusEvents={open:\"TROVE_OPENED\",closedByOwner:\"TROVE_CLOSED\",closedByLiquidation:\"TROVE_LIQUIDATED\",closedByRedemption:\"TROVE_REDEEMED\"};var transition=function transition(view,event){var _transitions$view$eve;var nextView=(_transitions$view$eve=transitions[view][event])!==null&&_transitions$view$eve!==void 0?_transitions$view$eve:view;return nextView;};var getInitialView=function getInitialView(troveStatus){if(troveStatus===\"closedByLiquidation\"){return\"LIQUIDATED\";}if(troveStatus===\"closedByRedemption\"){return\"REDEEMED\";}if(troveStatus===\"open\"){return\"ACTIVE\";}return\"NONE\";};var select=function select(_ref){var status=_ref.trove.status;return status;};export var TroveViewProvider=function TroveViewProvider(props){var children=props.children;var troveStatus=useLiquitySelector(select);var _useState=useState(getInitialView(troveStatus)),_useState2=_slicedToArray(_useState,2),view=_useState2[0],setView=_useState2[1];var viewRef=useRef(view);var dispatchEvent=useCallback(function(event){var nextView=transition(viewRef.current,event);console.log(\"dispatchEvent() [current-view, event, next-view]\",viewRef.current,event,nextView);setView(nextView);},[]);useEffect(function(){viewRef.current=view;},[view]);useEffect(function(){var _troveStatusEvents$tr;var event=(_troveStatusEvents$tr=troveStatusEvents[troveStatus])!==null&&_troveStatusEvents$tr!==void 0?_troveStatusEvents$tr:null;if(event!==null){dispatchEvent(event);}},[troveStatus,dispatchEvent]);var provider={view:view,dispatchEvent:dispatchEvent};return/*#__PURE__*/_jsx(TroveViewContext.Provider,{value:provider,children:children});};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/context/TroveViewProvider.tsx"],"names":["React","useState","useCallback","useEffect","useRef","useLiquitySelector","TroveViewContext","transitions","NONE","OPEN_TROVE_PRESSED","TROVE_OPENED","LIQUIDATED","TROVE_SURPLUS_COLLATERAL_CLAIMED","REDEEMED","OPENING","CANCEL_ADJUST_TROVE_PRESSED","ADJUSTING","TROVE_ADJUSTED","TROVE_CLOSED","TROVE_LIQUIDATED","TROVE_REDEEMED","CLOSING","ACTIVE","ADJUST_TROVE_PRESSED","CLOSE_TROVE_PRESSED","troveStatusEvents","open","closedByOwner","closedByLiquidation","closedByRedemption","transition","view","event","nextView","getInitialView","troveStatus","select","status","trove","TroveViewProvider","props","children","setView","viewRef","dispatchEvent","current","console","log","provider"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { LiquityStoreState, UserTroveStatus } from \"@liquity/lib-base\";\nimport { TroveViewContext } from \"./TroveViewContext\";\nimport type { TroveView, TroveEvent } from \"./types\";\n\ntype TroveEventTransitions = Record<TroveView, Partial<Record<TroveEvent, TroveView>>>;\n\nconst transitions: TroveEventTransitions = {\n  NONE: {\n    OPEN_TROVE_PRESSED: \"OPENING\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  LIQUIDATED: {\n    OPEN_TROVE_PRESSED: \"OPENING\",\n    TROVE_SURPLUS_COLLATERAL_CLAIMED: \"NONE\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  REDEEMED: {\n    OPEN_TROVE_PRESSED: \"OPENING\",\n    TROVE_SURPLUS_COLLATERAL_CLAIMED: \"NONE\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  OPENING: {\n    CANCEL_ADJUST_TROVE_PRESSED: \"NONE\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  ADJUSTING: {\n    CANCEL_ADJUST_TROVE_PRESSED: \"ACTIVE\",\n    TROVE_ADJUSTED: \"ACTIVE\",\n    TROVE_CLOSED: \"NONE\",\n    TROVE_LIQUIDATED: \"LIQUIDATED\",\n    TROVE_REDEEMED: \"REDEEMED\"\n  },\n  CLOSING: {\n    CANCEL_ADJUST_TROVE_PRESSED: \"ACTIVE\",\n    TROVE_CLOSED: \"NONE\",\n    TROVE_ADJUSTED: \"ACTIVE\",\n    TROVE_LIQUIDATED: \"LIQUIDATED\",\n    TROVE_REDEEMED: \"REDEEMED\"\n  },\n  ACTIVE: {\n    ADJUST_TROVE_PRESSED: \"ADJUSTING\",\n    CLOSE_TROVE_PRESSED: \"CLOSING\",\n    TROVE_CLOSED: \"NONE\",\n    TROVE_LIQUIDATED: \"LIQUIDATED\",\n    TROVE_REDEEMED: \"REDEEMED\"\n  }\n};\n\ntype TroveStateEvents = Partial<Record<UserTroveStatus, TroveEvent>>;\n\nconst troveStatusEvents: TroveStateEvents = {\n  open: \"TROVE_OPENED\",\n  closedByOwner: \"TROVE_CLOSED\",\n  closedByLiquidation: \"TROVE_LIQUIDATED\",\n  closedByRedemption: \"TROVE_REDEEMED\"\n};\n\nconst transition = (view: TroveView, event: TroveEvent): TroveView => {\n  const nextView = transitions[view][event] ?? view;\n  return nextView;\n};\n\nconst getInitialView = (troveStatus: UserTroveStatus): TroveView => {\n  if (troveStatus === \"closedByLiquidation\") {\n    return \"LIQUIDATED\";\n  }\n  if (troveStatus === \"closedByRedemption\") {\n    return \"REDEEMED\";\n  }\n  if (troveStatus === \"open\") {\n    return \"ACTIVE\";\n  }\n  return \"NONE\";\n};\n\nconst select = ({ trove: { status } }: LiquityStoreState) => status;\n\nexport const TroveViewProvider: React.FC = props => {\n  const { children } = props;\n  const troveStatus = useLiquitySelector(select);\n\n  const [view, setView] = useState<TroveView>(getInitialView(troveStatus));\n  const viewRef = useRef<TroveView>(view);\n\n  const dispatchEvent = useCallback((event: TroveEvent) => {\n    const nextView = transition(viewRef.current, event);\n\n    console.log(\n      \"dispatchEvent() [current-view, event, next-view]\",\n      viewRef.current,\n      event,\n      nextView\n    );\n    setView(nextView);\n  }, []);\n\n  useEffect(() => {\n    viewRef.current = view;\n  }, [view]);\n\n  useEffect(() => {\n    const event = troveStatusEvents[troveStatus] ?? null;\n    if (event !== null) {\n      dispatchEvent(event);\n    }\n  }, [troveStatus, dispatchEvent]);\n\n  const provider = {\n    view,\n    dispatchEvent\n  };\n  return <TroveViewContext.Provider value={provider}>{children}</TroveViewContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}