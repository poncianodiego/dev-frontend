{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/Opening.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Flex, Button, Box, Card, Heading } from \"theme-ui\";\nimport { Decimal, Trove, LUSD_LIQUIDATION_RESERVE, LUSD_MINIMUM_NET_DEBT, Percent } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { ActionDescription } from \"../ActionDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\nimport { TroveAction } from \"./TroveAction\";\nimport { useTroveView } from \"./context/TroveViewContext\";\nimport { COIN } from \"../../strings\";\nimport { Icon } from \"../Icon\";\nimport { InfoIcon } from \"../InfoIcon\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { CollateralRatio } from \"./CollateralRatio\";\nimport { EditableRow, StaticRow } from \"./Editor\";\nimport { selectForTroveChangeValidation, validateTroveChange } from \"./validation/validateTroveChange\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst selector = state => {\n  const {\n    fees,\n    price,\n    accountBalance\n  } = state;\n  return {\n    fees,\n    price,\n    accountBalance,\n    validationContext: selectForTroveChangeValidation(state)\n  };\n};\n\nconst EMPTY_TROVE = new Trove(Decimal.ZERO, Decimal.ZERO);\nconst TRANSACTION_ID = \"trove-creation\";\nconst GAS_ROOM_ETH = Decimal.from(0.1);\nexport const Opening = () => {\n  _s();\n\n  const {\n    dispatchEvent\n  } = useTroveView();\n  const {\n    fees,\n    price,\n    accountBalance,\n    validationContext\n  } = useLiquitySelector(selector);\n  const borrowingRate = fees.borrowingRate();\n  const editingState = useState();\n  const [collateral, setCollateral] = useState(Decimal.ZERO);\n  const [borrowAmount, setBorrowAmount] = useState(Decimal.ZERO);\n  const maxBorrowingRate = borrowingRate.add(0.005);\n  const fee = borrowAmount.mul(borrowingRate);\n  const feePct = new Percent(borrowingRate);\n  const totalDebt = borrowAmount.add(LUSD_LIQUIDATION_RESERVE).add(fee);\n  const isDirty = !collateral.isZero || !borrowAmount.isZero;\n  const trove = isDirty ? new Trove(collateral, totalDebt) : EMPTY_TROVE;\n  const maxEth = accountBalance.gt(GAS_ROOM_ETH) ? accountBalance.sub(GAS_ROOM_ETH) : Decimal.ZERO;\n  const maxCollateral = collateral.add(maxEth);\n  const collateralMaxedOut = collateral.eq(maxCollateral);\n  const collateralRatio = !collateral.isZero && !borrowAmount.isZero ? trove.collateralRatio(price) : undefined;\n  const [troveChange, description] = validateTroveChange(EMPTY_TROVE, trove, borrowingRate, validationContext);\n  const transactionState = useMyTransactionState(TRANSACTION_ID);\n  const isTransactionPending = transactionState.type === \"waitingForApproval\" || transactionState.type === \"waitingForConfirmation\";\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n  const reset = useCallback(() => {\n    setCollateral(Decimal.ZERO);\n    setBorrowAmount(Decimal.ZERO);\n  }, []);\n  useEffect(() => {\n    if (!collateral.isZero && borrowAmount.isZero) {\n      setBorrowAmount(LUSD_MINIMUM_NET_DEBT);\n    }\n  }, [collateral, borrowAmount]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      children: [\"Trove\", isDirty && !isTransactionPending && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"titleIcon\",\n        sx: {\n          \":enabled:hover\": {\n            color: \"danger\"\n          }\n        },\n        onClick: reset,\n        children: /*#__PURE__*/_jsxDEV(Icon, {\n          name: \"history\",\n          size: \"lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: [2, 3]\n      },\n      children: [/*#__PURE__*/_jsxDEV(EditableRow, {\n        label: \"Collateral\",\n        inputId: \"trove-collateral\",\n        amount: collateral.prettify(4),\n        maxAmount: maxCollateral.toString(),\n        maxedOut: collateralMaxedOut,\n        editingState: editingState,\n        unit: \"ETH\",\n        editedAmount: collateral.toString(4),\n        setEditedAmount: amount => setCollateral(Decimal.from(amount))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditableRow, {\n        label: \"Borrow\",\n        inputId: \"trove-borrow-amount\",\n        amount: borrowAmount.prettify(),\n        unit: COIN,\n        editingState: editingState,\n        editedAmount: borrowAmount.toString(2),\n        setEditedAmount: amount => setBorrowAmount(Decimal.from(amount))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Liquidation Reserve\",\n        inputId: \"trove-liquidation-reserve\",\n        amount: `${LUSD_LIQUIDATION_RESERVE}`,\n        unit: COIN,\n        infoIcon: /*#__PURE__*/_jsxDEV(InfoIcon, {\n          tooltip: /*#__PURE__*/_jsxDEV(Card, {\n            variant: \"tooltip\",\n            sx: {\n              width: \"200px\"\n            },\n            children: \"An amount set aside to cover the liquidator\\u2019s gas costs if your Trove needs to be liquidated. The amount increases your debt and is refunded if you close your Trove by fully paying off its net debt.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Borrowing Fee\",\n        inputId: \"trove-borrowing-fee\",\n        amount: fee.prettify(2),\n        pendingAmount: feePct.toString(2),\n        unit: COIN,\n        infoIcon: /*#__PURE__*/_jsxDEV(InfoIcon, {\n          tooltip: /*#__PURE__*/_jsxDEV(Card, {\n            variant: \"tooltip\",\n            sx: {\n              width: \"240px\"\n            },\n            children: \"This amount is deducted from the borrowed amount as a one-time fee. There are no recurring fees for borrowing, which is thus interest-free.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Total debt\",\n        inputId: \"trove-total-debt\",\n        amount: totalDebt.prettify(2),\n        unit: COIN,\n        infoIcon: /*#__PURE__*/_jsxDEV(InfoIcon, {\n          tooltip: /*#__PURE__*/_jsxDEV(Card, {\n            variant: \"tooltip\",\n            sx: {\n              width: \"240px\"\n            },\n            children: [\"The total amount of LUSD your Trove will hold.\", \" \", isDirty && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"You will need to repay \", totalDebt.sub(LUSD_LIQUIDATION_RESERVE).prettify(2), \" \", \"LUSD to reclaim your collateral (\", LUSD_LIQUIDATION_RESERVE.toString(), \" LUSD Liquidation Reserve excluded).\"]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CollateralRatio, {\n        value: collateralRatio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), description !== null && description !== void 0 ? description : /*#__PURE__*/_jsxDEV(ActionDescription, {\n        children: \"Start by entering the amount of ETH you'd like to deposit as collateral.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        variant: \"layout.actions\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"cancel\",\n          onClick: handleCancelPressed,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), troveChange ? /*#__PURE__*/_jsxDEV(TroveAction, {\n          transactionId: TRANSACTION_ID,\n          change: troveChange,\n          maxBorrowingRate: maxBorrowingRate,\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          disabled: true,\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), isTransactionPending && /*#__PURE__*/_jsxDEV(LoadingOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Opening, \"XFSmMaEwMJK8rLG2k1AD8b/oXms=\", false, function () {\n  return [useTroveView, useLiquitySelector, useMyTransactionState];\n});\n\n_c = Opening;\n\nvar _c;\n\n$RefreshReg$(_c, \"Opening\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/Opening.tsx"],"names":["React","useCallback","useEffect","useState","Flex","Button","Box","Card","Heading","Decimal","Trove","LUSD_LIQUIDATION_RESERVE","LUSD_MINIMUM_NET_DEBT","Percent","useLiquitySelector","ActionDescription","useMyTransactionState","TroveAction","useTroveView","COIN","Icon","InfoIcon","LoadingOverlay","CollateralRatio","EditableRow","StaticRow","selectForTroveChangeValidation","validateTroveChange","selector","state","fees","price","accountBalance","validationContext","EMPTY_TROVE","ZERO","TRANSACTION_ID","GAS_ROOM_ETH","from","Opening","dispatchEvent","borrowingRate","editingState","collateral","setCollateral","borrowAmount","setBorrowAmount","maxBorrowingRate","add","fee","mul","feePct","totalDebt","isDirty","isZero","trove","maxEth","gt","sub","maxCollateral","collateralMaxedOut","eq","collateralRatio","undefined","troveChange","description","transactionState","isTransactionPending","type","handleCancelPressed","reset","color","p","prettify","toString","amount","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Flex, Button, Box, Card, Heading } from \"theme-ui\";\nimport {\n  LiquityStoreState,\n  Decimal,\n  Trove,\n  LUSD_LIQUIDATION_RESERVE,\n  LUSD_MINIMUM_NET_DEBT,\n  Percent\n} from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { ActionDescription } from \"../ActionDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\nimport { TroveAction } from \"./TroveAction\";\nimport { useTroveView } from \"./context/TroveViewContext\";\nimport { COIN } from \"../../strings\";\nimport { Icon } from \"../Icon\";\nimport { InfoIcon } from \"../InfoIcon\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { CollateralRatio } from \"./CollateralRatio\";\nimport { EditableRow, StaticRow } from \"./Editor\";\nimport {\n  selectForTroveChangeValidation,\n  validateTroveChange\n} from \"./validation/validateTroveChange\";\n\nconst selector = (state: LiquityStoreState) => {\n  const { fees, price, accountBalance } = state;\n  return {\n    fees,\n    price,\n    accountBalance,\n    validationContext: selectForTroveChangeValidation(state)\n  };\n};\n\nconst EMPTY_TROVE = new Trove(Decimal.ZERO, Decimal.ZERO);\nconst TRANSACTION_ID = \"trove-creation\";\nconst GAS_ROOM_ETH = Decimal.from(0.1);\n\nexport const Opening: React.FC = () => {\n  const { dispatchEvent } = useTroveView();\n  const { fees, price, accountBalance, validationContext } = useLiquitySelector(selector);\n  const borrowingRate = fees.borrowingRate();\n  const editingState = useState<string>();\n\n  const [collateral, setCollateral] = useState<Decimal>(Decimal.ZERO);\n  const [borrowAmount, setBorrowAmount] = useState<Decimal>(Decimal.ZERO);\n\n  const maxBorrowingRate = borrowingRate.add(0.005);\n\n  const fee = borrowAmount.mul(borrowingRate);\n  const feePct = new Percent(borrowingRate);\n  const totalDebt = borrowAmount.add(LUSD_LIQUIDATION_RESERVE).add(fee);\n  const isDirty = !collateral.isZero || !borrowAmount.isZero;\n  const trove = isDirty ? new Trove(collateral, totalDebt) : EMPTY_TROVE;\n  const maxEth = accountBalance.gt(GAS_ROOM_ETH) ? accountBalance.sub(GAS_ROOM_ETH) : Decimal.ZERO;\n  const maxCollateral = collateral.add(maxEth);\n  const collateralMaxedOut = collateral.eq(maxCollateral);\n  const collateralRatio =\n    !collateral.isZero && !borrowAmount.isZero ? trove.collateralRatio(price) : undefined;\n\n  const [troveChange, description] = validateTroveChange(\n    EMPTY_TROVE,\n    trove,\n    borrowingRate,\n    validationContext\n  );\n\n  const transactionState = useMyTransactionState(TRANSACTION_ID);\n  const isTransactionPending =\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\";\n\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n\n  const reset = useCallback(() => {\n    setCollateral(Decimal.ZERO);\n    setBorrowAmount(Decimal.ZERO);\n  }, []);\n\n  useEffect(() => {\n    if (!collateral.isZero && borrowAmount.isZero) {\n      setBorrowAmount(LUSD_MINIMUM_NET_DEBT);\n    }\n  }, [collateral, borrowAmount]);\n\n  return (\n    <Card>\n      <Heading>\n        Trove\n        {isDirty && !isTransactionPending && (\n          <Button variant=\"titleIcon\" sx={{ \":enabled:hover\": { color: \"danger\" } }} onClick={reset}>\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Collateral\"\n          inputId=\"trove-collateral\"\n          amount={collateral.prettify(4)}\n          maxAmount={maxCollateral.toString()}\n          maxedOut={collateralMaxedOut}\n          editingState={editingState}\n          unit=\"ETH\"\n          editedAmount={collateral.toString(4)}\n          setEditedAmount={(amount: string) => setCollateral(Decimal.from(amount))}\n        />\n\n        <EditableRow\n          label=\"Borrow\"\n          inputId=\"trove-borrow-amount\"\n          amount={borrowAmount.prettify()}\n          unit={COIN}\n          editingState={editingState}\n          editedAmount={borrowAmount.toString(2)}\n          setEditedAmount={(amount: string) => setBorrowAmount(Decimal.from(amount))}\n        />\n\n        <StaticRow\n          label=\"Liquidation Reserve\"\n          inputId=\"trove-liquidation-reserve\"\n          amount={`${LUSD_LIQUIDATION_RESERVE}`}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"200px\" }}>\n                  An amount set aside to cover the liquidator’s gas costs if your Trove needs to be\n                  liquidated. The amount increases your debt and is refunded if you close your Trove\n                  by fully paying off its net debt.\n                </Card>\n              }\n            />\n          }\n        />\n\n        <StaticRow\n          label=\"Borrowing Fee\"\n          inputId=\"trove-borrowing-fee\"\n          amount={fee.prettify(2)}\n          pendingAmount={feePct.toString(2)}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                  This amount is deducted from the borrowed amount as a one-time fee. There are no\n                  recurring fees for borrowing, which is thus interest-free.\n                </Card>\n              }\n            />\n          }\n        />\n\n        <StaticRow\n          label=\"Total debt\"\n          inputId=\"trove-total-debt\"\n          amount={totalDebt.prettify(2)}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                  The total amount of LUSD your Trove will hold.{\" \"}\n                  {isDirty && (\n                    <>\n                      You will need to repay {totalDebt.sub(LUSD_LIQUIDATION_RESERVE).prettify(2)}{\" \"}\n                      LUSD to reclaim your collateral ({LUSD_LIQUIDATION_RESERVE.toString()} LUSD\n                      Liquidation Reserve excluded).\n                    </>\n                  )}\n                </Card>\n              }\n            />\n          }\n        />\n\n        <CollateralRatio value={collateralRatio} />\n\n        {description ?? (\n          <ActionDescription>\n            Start by entering the amount of ETH you'd like to deposit as collateral.\n          </ActionDescription>\n        )}\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"cancel\" onClick={handleCancelPressed}>\n            Cancel\n          </Button>\n\n          {troveChange ? (\n            <TroveAction\n              transactionId={TRANSACTION_ID}\n              change={troveChange}\n              maxBorrowingRate={maxBorrowingRate}\n            >\n              Confirm\n            </TroveAction>\n          ) : (\n            <Button disabled>Confirm</Button>\n          )}\n        </Flex>\n      </Box>\n      {isTransactionPending && <LoadingOverlay />}\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}