{"ast":null,"code":"import React,{useState}from\"react\";import{Heading,Box,Card,Button}from\"theme-ui\";import{Difference}from\"@liquity/lib-base\";import{useLiquitySelector}from\"@liquity/lib-react\";import{COIN,GT}from\"../../strings\";import{Icon}from\"../Icon\";import{EditableRow,StaticRow}from\"../Trove/Editor\";import{LoadingOverlay}from\"../LoadingOverlay\";import{InfoIcon}from\"../InfoIcon\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var select=function select(_ref){var lusdBalance=_ref.lusdBalance,lusdInStabilityPool=_ref.lusdInStabilityPool;return{lusdBalance:lusdBalance,lusdInStabilityPool:lusdInStabilityPool};};export var StabilityDepositEditor=function StabilityDepositEditor(_ref2){var originalDeposit=_ref2.originalDeposit,editedLUSD=_ref2.editedLUSD,changePending=_ref2.changePending,dispatch=_ref2.dispatch,children=_ref2.children;var _useLiquitySelector=useLiquitySelector(select),lusdBalance=_useLiquitySelector.lusdBalance,lusdInStabilityPool=_useLiquitySelector.lusdInStabilityPool;var editingState=useState();var edited=!editedLUSD.eq(originalDeposit.currentLUSD);var maxAmount=originalDeposit.currentLUSD.add(lusdBalance);var maxedOut=editedLUSD.eq(maxAmount);var lusdInStabilityPoolAfterChange=lusdInStabilityPool.sub(originalDeposit.currentLUSD).add(editedLUSD);var originalPoolShare=originalDeposit.currentLUSD.mulDiv(100,lusdInStabilityPool);var newPoolShare=editedLUSD.mulDiv(100,lusdInStabilityPoolAfterChange);var poolShareChange=originalDeposit.currentLUSD.nonZero&&Difference.between(newPoolShare,originalPoolShare).nonZero;return/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsxs(Heading,{children:[\"Stability Pool\",edited&&!changePending&&/*#__PURE__*/_jsx(Button,{variant:\"titleIcon\",sx:{\":enabled:hover\":{color:\"danger\"}},onClick:function onClick(){return dispatch({type:\"revert\"});},children:/*#__PURE__*/_jsx(Icon,{name:\"history\",size:\"lg\"})})]}),/*#__PURE__*/_jsxs(Box,{sx:{p:[2,3]},children:[/*#__PURE__*/_jsx(EditableRow,{label:\"Deposit\",inputId:\"deposit-lqty\",amount:editedLUSD.prettify(),maxAmount:maxAmount.toString(),maxedOut:maxedOut,unit:COIN,editingState:editingState,editedAmount:editedLUSD.toString(2),setEditedAmount:function setEditedAmount(newValue){return dispatch({type:\"setDeposit\",newValue:newValue});}}),newPoolShare.infinite?/*#__PURE__*/_jsx(StaticRow,{label:\"Pool share\",inputId:\"deposit-share\",amount:\"N/A\"}):/*#__PURE__*/_jsx(StaticRow,{label:\"Pool share\",inputId:\"deposit-share\",amount:newPoolShare.prettify(4),pendingAmount:poolShareChange===null||poolShareChange===void 0?void 0:poolShareChange.prettify(4).concat(\"%\"),pendingColor:(poolShareChange===null||poolShareChange===void 0?void 0:poolShareChange.positive)?\"success\":\"danger\",unit:\"%\"}),!originalDeposit.isEmpty&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(StaticRow,{label:\"Liquidation gain\",inputId:\"deposit-gain\",amount:originalDeposit.collateralGain.prettify(4),color:originalDeposit.collateralGain.nonZero&&\"success\",unit:\"ETH\"}),/*#__PURE__*/_jsx(StaticRow,{label:\"Reward\",inputId:\"deposit-reward\",amount:originalDeposit.lqtyReward.prettify(),color:originalDeposit.lqtyReward.nonZero&&\"success\",unit:GT,infoIcon:/*#__PURE__*/_jsx(InfoIcon,{tooltip:/*#__PURE__*/_jsx(Card,{variant:\"tooltip\",sx:{width:\"240px\"},children:\"Although the LQTY rewards accrue every minute, the value on the UI only updates when a user transacts with the Stability Pool. Therefore you may receive more rewards than is displayed when you claim or adjust your deposit.\"})})})]}),children]}),changePending&&/*#__PURE__*/_jsx(LoadingOverlay,{})]});};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Stability/StabilityDepositEditor.tsx"],"names":["React","useState","Heading","Box","Card","Button","Difference","useLiquitySelector","COIN","GT","Icon","EditableRow","StaticRow","LoadingOverlay","InfoIcon","select","lusdBalance","lusdInStabilityPool","StabilityDepositEditor","originalDeposit","editedLUSD","changePending","dispatch","children","editingState","edited","eq","currentLUSD","maxAmount","add","maxedOut","lusdInStabilityPoolAfterChange","sub","originalPoolShare","mulDiv","newPoolShare","poolShareChange","nonZero","between","color","type","p","prettify","toString","newValue","infinite","concat","positive","isEmpty","collateralGain","lqtyReward","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Heading, Box, Card, Button } from \"theme-ui\";\n\nimport {\n  Decimal,\n  Decimalish,\n  StabilityDeposit,\n  LiquityStoreState,\n  Difference\n} from \"@liquity/lib-base\";\n\nimport { useLiquitySelector } from \"@liquity/lib-react\";\n\nimport { COIN, GT } from \"../../strings\";\n\nimport { Icon } from \"../Icon\";\nimport { EditableRow, StaticRow } from \"../Trove/Editor\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { InfoIcon } from \"../InfoIcon\";\n\nconst select = ({ lusdBalance, lusdInStabilityPool }: LiquityStoreState) => ({\n  lusdBalance,\n  lusdInStabilityPool\n});\n\ntype StabilityDepositEditorProps = {\n  originalDeposit: StabilityDeposit;\n  editedLUSD: Decimal;\n  changePending: boolean;\n  dispatch: (action: { type: \"setDeposit\"; newValue: Decimalish } | { type: \"revert\" }) => void;\n};\n\nexport const StabilityDepositEditor: React.FC<StabilityDepositEditorProps> = ({\n  originalDeposit,\n  editedLUSD,\n  changePending,\n  dispatch,\n  children\n}) => {\n  const { lusdBalance, lusdInStabilityPool } = useLiquitySelector(select);\n  const editingState = useState<string>();\n\n  const edited = !editedLUSD.eq(originalDeposit.currentLUSD);\n\n  const maxAmount = originalDeposit.currentLUSD.add(lusdBalance);\n  const maxedOut = editedLUSD.eq(maxAmount);\n\n  const lusdInStabilityPoolAfterChange = lusdInStabilityPool\n    .sub(originalDeposit.currentLUSD)\n    .add(editedLUSD);\n\n  const originalPoolShare = originalDeposit.currentLUSD.mulDiv(100, lusdInStabilityPool);\n  const newPoolShare = editedLUSD.mulDiv(100, lusdInStabilityPoolAfterChange);\n  const poolShareChange =\n    originalDeposit.currentLUSD.nonZero &&\n    Difference.between(newPoolShare, originalPoolShare).nonZero;\n\n  return (\n    <Card>\n      <Heading>\n        Stability Pool\n        {edited && !changePending && (\n          <Button\n            variant=\"titleIcon\"\n            sx={{ \":enabled:hover\": { color: \"danger\" } }}\n            onClick={() => dispatch({ type: \"revert\" })}\n          >\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Deposit\"\n          inputId=\"deposit-lqty\"\n          amount={editedLUSD.prettify()}\n          maxAmount={maxAmount.toString()}\n          maxedOut={maxedOut}\n          unit={COIN}\n          {...{ editingState }}\n          editedAmount={editedLUSD.toString(2)}\n          setEditedAmount={newValue => dispatch({ type: \"setDeposit\", newValue })}\n        />\n\n        {newPoolShare.infinite ? (\n          <StaticRow label=\"Pool share\" inputId=\"deposit-share\" amount=\"N/A\" />\n        ) : (\n          <StaticRow\n            label=\"Pool share\"\n            inputId=\"deposit-share\"\n            amount={newPoolShare.prettify(4)}\n            pendingAmount={poolShareChange?.prettify(4).concat(\"%\")}\n            pendingColor={poolShareChange?.positive ? \"success\" : \"danger\"}\n            unit=\"%\"\n          />\n        )}\n\n        {!originalDeposit.isEmpty && (\n          <>\n            <StaticRow\n              label=\"Liquidation gain\"\n              inputId=\"deposit-gain\"\n              amount={originalDeposit.collateralGain.prettify(4)}\n              color={originalDeposit.collateralGain.nonZero && \"success\"}\n              unit=\"ETH\"\n            />\n\n            <StaticRow\n              label=\"Reward\"\n              inputId=\"deposit-reward\"\n              amount={originalDeposit.lqtyReward.prettify()}\n              color={originalDeposit.lqtyReward.nonZero && \"success\"}\n              unit={GT}\n              infoIcon={\n                <InfoIcon\n                  tooltip={\n                    <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                      Although the LQTY rewards accrue every minute, the value on the UI only updates\n                      when a user transacts with the Stability Pool. Therefore you may receive more\n                      rewards than is displayed when you claim or adjust your deposit.\n                    </Card>\n                  }\n                />\n              }\n            />\n          </>\n        )}\n        {children}\n      </Box>\n\n      {changePending && <LoadingOverlay />}\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}