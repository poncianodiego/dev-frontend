{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthersLiquity = exports.EthersTransactionFailedError = void 0;\n\nconst lib_base_1 = require(\"@liquity/lib-base\");\n\nconst EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\n\nconst PopulatableEthersLiquity_1 = require(\"./PopulatableEthersLiquity\");\n\nconst ReadableEthersLiquity_1 = require(\"./ReadableEthersLiquity\");\n\nconst SendableEthersLiquity_1 = require(\"./SendableEthersLiquity\");\n/**\n * Thrown by {@link EthersLiquity} in case of transaction failure.\n *\n * @public\n */\n\n\nclass EthersTransactionFailedError extends lib_base_1.TransactionFailedError {\n  constructor(message, failedReceipt) {\n    super(\"EthersTransactionFailedError\", message, failedReceipt);\n  }\n\n}\n\nexports.EthersTransactionFailedError = EthersTransactionFailedError;\n\nconst waitForSuccess = async tx => {\n  const receipt = await tx.waitForReceipt();\n\n  if (receipt.status !== \"succeeded\") {\n    throw new EthersTransactionFailedError(\"Transaction failed\", receipt);\n  }\n\n  return receipt.details;\n};\n/**\n * Convenience class that combines multiple interfaces of the library in one object.\n *\n * @public\n */\n\n\nclass EthersLiquity {\n  /** @internal */\n  constructor(readable) {\n    this._readable = readable;\n    this.connection = readable.connection;\n    this.populate = new PopulatableEthersLiquity_1.PopulatableEthersLiquity(readable);\n    this.send = new SendableEthersLiquity_1.SendableEthersLiquity(this.populate);\n  }\n  /** @internal */\n\n\n  static _from(connection) {\n    if (EthersLiquityConnection_1._usingStore(connection)) {\n      return new _EthersLiquityWithStore(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));\n    } else {\n      return new EthersLiquity(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));\n    }\n  }\n\n  static async connect(signerOrProvider, optionalParams) {\n    return EthersLiquity._from(await EthersLiquityConnection_1._connect(signerOrProvider, optionalParams));\n  }\n\n  hasStore() {\n    return false;\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalRedistributed} */\n\n\n  getTotalRedistributed(overrides) {\n    return this._readable.getTotalRedistributed(overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTroveBeforeRedistribution} */\n\n\n  getTroveBeforeRedistribution(address, overrides) {\n    return this._readable.getTroveBeforeRedistribution(address, overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTrove} */\n\n\n  getTrove(address, overrides) {\n    return this._readable.getTrove(address, overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getNumberOfTroves} */\n\n\n  getNumberOfTroves(overrides) {\n    return this._readable.getNumberOfTroves(overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getPrice} */\n\n\n  getPrice(overrides) {\n    return this._readable.getPrice(overrides);\n  }\n  /** @internal */\n\n\n  _getActivePool(overrides) {\n    return this._readable._getActivePool(overrides);\n  }\n  /** @internal */\n\n\n  _getDefaultPool(overrides) {\n    return this._readable._getDefaultPool(overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotal} */\n\n\n  getTotal(overrides) {\n    return this._readable.getTotal(overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getStabilityDeposit} */\n\n\n  getStabilityDeposit(address, overrides) {\n    return this._readable.getStabilityDeposit(address, overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingStabilityPoolLQTYReward} */\n\n\n  getRemainingStabilityPoolLQTYReward(overrides) {\n    return this._readable.getRemainingStabilityPoolLQTYReward(overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDInStabilityPool} */\n\n\n  getLUSDInStabilityPool(overrides) {\n    return this._readable.getLUSDInStabilityPool(overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDBalance} */\n\n\n  getLUSDBalance(address, overrides) {\n    return this._readable.getLUSDBalance(address, overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYBalance} */\n\n\n  getLQTYBalance(address, overrides) {\n    return this._readable.getLQTYBalance(address, overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenBalance} */\n\n\n  getUniTokenBalance(address, overrides) {\n    return this._readable.getUniTokenBalance(address, overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenAllowance} */\n\n\n  getUniTokenAllowance(address, overrides) {\n    return this._readable.getUniTokenAllowance(address, overrides);\n  }\n  /** @internal */\n\n\n  _getRemainingLiquidityMiningLQTYRewardCalculator(overrides) {\n    return this._readable._getRemainingLiquidityMiningLQTYRewardCalculator(overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingLiquidityMiningLQTYReward} */\n\n\n  getRemainingLiquidityMiningLQTYReward(overrides) {\n    return this._readable.getRemainingLiquidityMiningLQTYReward(overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningStake} */\n\n\n  getLiquidityMiningStake(address, overrides) {\n    return this._readable.getLiquidityMiningStake(address, overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedUniTokens} */\n\n\n  getTotalStakedUniTokens(overrides) {\n    return this._readable.getTotalStakedUniTokens(overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningLQTYReward} */\n\n\n  getLiquidityMiningLQTYReward(address, overrides) {\n    return this._readable.getLiquidityMiningLQTYReward(address, overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getCollateralSurplusBalance} */\n\n\n  getCollateralSurplusBalance(address, overrides) {\n    return this._readable.getCollateralSurplusBalance(address, overrides);\n  }\n\n  getTroves(params, overrides) {\n    return this._readable.getTroves(params, overrides);\n  }\n  /** @internal */\n\n\n  _getFeesFactory(overrides) {\n    return this._readable._getFeesFactory(overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFees} */\n\n\n  getFees(overrides) {\n    return this._readable.getFees(overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYStake} */\n\n\n  getLQTYStake(address, overrides) {\n    return this._readable.getLQTYStake(address, overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedLQTY} */\n\n\n  getTotalStakedLQTY(overrides) {\n    return this._readable.getTotalStakedLQTY(overrides);\n  }\n  /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFrontendStatus} */\n\n\n  getFrontendStatus(address, overrides) {\n    return this._readable.getFrontendStatus(address, overrides);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.openTrove}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  openTrove(params, maxBorrowingRate, overrides) {\n    return this.send.openTrove(params, maxBorrowingRate, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.closeTrove}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  closeTrove(overrides) {\n    return this.send.closeTrove(overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.adjustTrove}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  adjustTrove(params, maxBorrowingRate, overrides) {\n    return this.send.adjustTrove(params, maxBorrowingRate, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.depositCollateral}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  depositCollateral(amount, overrides) {\n    return this.send.depositCollateral(amount, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawCollateral}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  withdrawCollateral(amount, overrides) {\n    return this.send.withdrawCollateral(amount, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.borrowLUSD}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  borrowLUSD(amount, maxBorrowingRate, overrides) {\n    return this.send.borrowLUSD(amount, maxBorrowingRate, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.repayLUSD}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  repayLUSD(amount, overrides) {\n    return this.send.repayLUSD(amount, overrides).then(waitForSuccess);\n  }\n  /** @internal */\n\n\n  setPrice(price, overrides) {\n    return this.send.setPrice(price, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.liquidate}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  liquidate(address, overrides) {\n    return this.send.liquidate(address, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.liquidateUpTo}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides) {\n    return this.send.liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.depositLUSDInStabilityPool}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  depositLUSDInStabilityPool(amount, frontendTag, overrides) {\n    return this.send.depositLUSDInStabilityPool(amount, frontendTag, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawLUSDFromStabilityPool}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  withdrawLUSDFromStabilityPool(amount, overrides) {\n    return this.send.withdrawLUSDFromStabilityPool(amount, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawGainsFromStabilityPool}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  withdrawGainsFromStabilityPool(overrides) {\n    return this.send.withdrawGainsFromStabilityPool(overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.transferCollateralGainToTrove}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  transferCollateralGainToTrove(overrides) {\n    return this.send.transferCollateralGainToTrove(overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.sendLUSD}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  sendLUSD(toAddress, amount, overrides) {\n    return this.send.sendLUSD(toAddress, amount, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.sendLQTY}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  sendLQTY(toAddress, amount, overrides) {\n    return this.send.sendLQTY(toAddress, amount, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.redeemLUSD}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  redeemLUSD(amount, maxRedemptionRate, overrides) {\n    return this.send.redeemLUSD(amount, maxRedemptionRate, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.claimCollateralSurplus}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  claimCollateralSurplus(overrides) {\n    return this.send.claimCollateralSurplus(overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.stakeLQTY}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  stakeLQTY(amount, overrides) {\n    return this.send.stakeLQTY(amount, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.unstakeLQTY}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  unstakeLQTY(amount, overrides) {\n    return this.send.unstakeLQTY(amount, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawGainsFromStaking}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  withdrawGainsFromStaking(overrides) {\n    return this.send.withdrawGainsFromStaking(overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.registerFrontend}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  registerFrontend(kickbackRate, overrides) {\n    return this.send.registerFrontend(kickbackRate, overrides).then(waitForSuccess);\n  }\n  /** @internal */\n\n\n  _mintUniToken(amount, address, overrides) {\n    return this.send._mintUniToken(amount, address, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.approveUniTokens}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  approveUniTokens(allowance, overrides) {\n    return this.send.approveUniTokens(allowance, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.stakeUniTokens}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  stakeUniTokens(amount, overrides) {\n    return this.send.stakeUniTokens(amount, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.unstakeUniTokens}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  unstakeUniTokens(amount, overrides) {\n    return this.send.unstakeUniTokens(amount, overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawLQTYRewardFromLiquidityMining}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  withdrawLQTYRewardFromLiquidityMining(overrides) {\n    return this.send.withdrawLQTYRewardFromLiquidityMining(overrides).then(waitForSuccess);\n  }\n  /**\n   * {@inheritDoc @liquity/lib-base#TransactableLiquity.exitLiquidityMining}\n   *\n   * @throws\n   * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n   */\n\n\n  exitLiquidityMining(overrides) {\n    return this.send.exitLiquidityMining(overrides).then(waitForSuccess);\n  }\n\n}\n\nexports.EthersLiquity = EthersLiquity;\n\nclass _EthersLiquityWithStore extends EthersLiquity {\n  constructor(readable) {\n    super(readable);\n    this.store = readable.store;\n  }\n\n  hasStore(store) {\n    return store === undefined || store === this.connection.useStore;\n  }\n\n}","map":{"version":3,"sources":["../../src/EthersLiquity.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EthersLiquity = exports.EthersTransactionFailedError = void 0;\nconst lib_base_1 = require(\"@liquity/lib-base\");\nconst EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\nconst PopulatableEthersLiquity_1 = require(\"./PopulatableEthersLiquity\");\nconst ReadableEthersLiquity_1 = require(\"./ReadableEthersLiquity\");\nconst SendableEthersLiquity_1 = require(\"./SendableEthersLiquity\");\n/**\n * Thrown by {@link EthersLiquity} in case of transaction failure.\n *\n * @public\n */\nclass EthersTransactionFailedError extends lib_base_1.TransactionFailedError {\n    constructor(message, failedReceipt) {\n        super(\"EthersTransactionFailedError\", message, failedReceipt);\n    }\n}\nexports.EthersTransactionFailedError = EthersTransactionFailedError;\nconst waitForSuccess = async (tx) => {\n    const receipt = await tx.waitForReceipt();\n    if (receipt.status !== \"succeeded\") {\n        throw new EthersTransactionFailedError(\"Transaction failed\", receipt);\n    }\n    return receipt.details;\n};\n/**\n * Convenience class that combines multiple interfaces of the library in one object.\n *\n * @public\n */\nclass EthersLiquity {\n    /** @internal */\n    constructor(readable) {\n        this._readable = readable;\n        this.connection = readable.connection;\n        this.populate = new PopulatableEthersLiquity_1.PopulatableEthersLiquity(readable);\n        this.send = new SendableEthersLiquity_1.SendableEthersLiquity(this.populate);\n    }\n    /** @internal */\n    static _from(connection) {\n        if (EthersLiquityConnection_1._usingStore(connection)) {\n            return new _EthersLiquityWithStore(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));\n        }\n        else {\n            return new EthersLiquity(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));\n        }\n    }\n    static async connect(signerOrProvider, optionalParams) {\n        return EthersLiquity._from(await EthersLiquityConnection_1._connect(signerOrProvider, optionalParams));\n    }\n    hasStore() {\n        return false;\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalRedistributed} */\n    getTotalRedistributed(overrides) {\n        return this._readable.getTotalRedistributed(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTroveBeforeRedistribution} */\n    getTroveBeforeRedistribution(address, overrides) {\n        return this._readable.getTroveBeforeRedistribution(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTrove} */\n    getTrove(address, overrides) {\n        return this._readable.getTrove(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getNumberOfTroves} */\n    getNumberOfTroves(overrides) {\n        return this._readable.getNumberOfTroves(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getPrice} */\n    getPrice(overrides) {\n        return this._readable.getPrice(overrides);\n    }\n    /** @internal */\n    _getActivePool(overrides) {\n        return this._readable._getActivePool(overrides);\n    }\n    /** @internal */\n    _getDefaultPool(overrides) {\n        return this._readable._getDefaultPool(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotal} */\n    getTotal(overrides) {\n        return this._readable.getTotal(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getStabilityDeposit} */\n    getStabilityDeposit(address, overrides) {\n        return this._readable.getStabilityDeposit(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingStabilityPoolLQTYReward} */\n    getRemainingStabilityPoolLQTYReward(overrides) {\n        return this._readable.getRemainingStabilityPoolLQTYReward(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDInStabilityPool} */\n    getLUSDInStabilityPool(overrides) {\n        return this._readable.getLUSDInStabilityPool(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDBalance} */\n    getLUSDBalance(address, overrides) {\n        return this._readable.getLUSDBalance(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYBalance} */\n    getLQTYBalance(address, overrides) {\n        return this._readable.getLQTYBalance(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenBalance} */\n    getUniTokenBalance(address, overrides) {\n        return this._readable.getUniTokenBalance(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenAllowance} */\n    getUniTokenAllowance(address, overrides) {\n        return this._readable.getUniTokenAllowance(address, overrides);\n    }\n    /** @internal */\n    _getRemainingLiquidityMiningLQTYRewardCalculator(overrides) {\n        return this._readable._getRemainingLiquidityMiningLQTYRewardCalculator(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingLiquidityMiningLQTYReward} */\n    getRemainingLiquidityMiningLQTYReward(overrides) {\n        return this._readable.getRemainingLiquidityMiningLQTYReward(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningStake} */\n    getLiquidityMiningStake(address, overrides) {\n        return this._readable.getLiquidityMiningStake(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedUniTokens} */\n    getTotalStakedUniTokens(overrides) {\n        return this._readable.getTotalStakedUniTokens(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningLQTYReward} */\n    getLiquidityMiningLQTYReward(address, overrides) {\n        return this._readable.getLiquidityMiningLQTYReward(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getCollateralSurplusBalance} */\n    getCollateralSurplusBalance(address, overrides) {\n        return this._readable.getCollateralSurplusBalance(address, overrides);\n    }\n    getTroves(params, overrides) {\n        return this._readable.getTroves(params, overrides);\n    }\n    /** @internal */\n    _getFeesFactory(overrides) {\n        return this._readable._getFeesFactory(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFees} */\n    getFees(overrides) {\n        return this._readable.getFees(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYStake} */\n    getLQTYStake(address, overrides) {\n        return this._readable.getLQTYStake(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedLQTY} */\n    getTotalStakedLQTY(overrides) {\n        return this._readable.getTotalStakedLQTY(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFrontendStatus} */\n    getFrontendStatus(address, overrides) {\n        return this._readable.getFrontendStatus(address, overrides);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.openTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    openTrove(params, maxBorrowingRate, overrides) {\n        return this.send.openTrove(params, maxBorrowingRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.closeTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    closeTrove(overrides) {\n        return this.send.closeTrove(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.adjustTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    adjustTrove(params, maxBorrowingRate, overrides) {\n        return this.send.adjustTrove(params, maxBorrowingRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.depositCollateral}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    depositCollateral(amount, overrides) {\n        return this.send.depositCollateral(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawCollateral}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawCollateral(amount, overrides) {\n        return this.send.withdrawCollateral(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.borrowLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    borrowLUSD(amount, maxBorrowingRate, overrides) {\n        return this.send.borrowLUSD(amount, maxBorrowingRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.repayLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    repayLUSD(amount, overrides) {\n        return this.send.repayLUSD(amount, overrides).then(waitForSuccess);\n    }\n    /** @internal */\n    setPrice(price, overrides) {\n        return this.send.setPrice(price, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.liquidate}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    liquidate(address, overrides) {\n        return this.send.liquidate(address, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.liquidateUpTo}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides) {\n        return this.send.liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.depositLUSDInStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    depositLUSDInStabilityPool(amount, frontendTag, overrides) {\n        return this.send.depositLUSDInStabilityPool(amount, frontendTag, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawLUSDFromStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawLUSDFromStabilityPool(amount, overrides) {\n        return this.send.withdrawLUSDFromStabilityPool(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawGainsFromStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawGainsFromStabilityPool(overrides) {\n        return this.send.withdrawGainsFromStabilityPool(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.transferCollateralGainToTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    transferCollateralGainToTrove(overrides) {\n        return this.send.transferCollateralGainToTrove(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.sendLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    sendLUSD(toAddress, amount, overrides) {\n        return this.send.sendLUSD(toAddress, amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.sendLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    sendLQTY(toAddress, amount, overrides) {\n        return this.send.sendLQTY(toAddress, amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.redeemLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    redeemLUSD(amount, maxRedemptionRate, overrides) {\n        return this.send.redeemLUSD(amount, maxRedemptionRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.claimCollateralSurplus}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    claimCollateralSurplus(overrides) {\n        return this.send.claimCollateralSurplus(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.stakeLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    stakeLQTY(amount, overrides) {\n        return this.send.stakeLQTY(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.unstakeLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    unstakeLQTY(amount, overrides) {\n        return this.send.unstakeLQTY(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawGainsFromStaking}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawGainsFromStaking(overrides) {\n        return this.send.withdrawGainsFromStaking(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.registerFrontend}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    registerFrontend(kickbackRate, overrides) {\n        return this.send.registerFrontend(kickbackRate, overrides).then(waitForSuccess);\n    }\n    /** @internal */\n    _mintUniToken(amount, address, overrides) {\n        return this.send._mintUniToken(amount, address, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.approveUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    approveUniTokens(allowance, overrides) {\n        return this.send.approveUniTokens(allowance, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.stakeUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    stakeUniTokens(amount, overrides) {\n        return this.send.stakeUniTokens(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.unstakeUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    unstakeUniTokens(amount, overrides) {\n        return this.send.unstakeUniTokens(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawLQTYRewardFromLiquidityMining}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawLQTYRewardFromLiquidityMining(overrides) {\n        return this.send.withdrawLQTYRewardFromLiquidityMining(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.exitLiquidityMining}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    exitLiquidityMining(overrides) {\n        return this.send.exitLiquidityMining(overrides).then(waitForSuccess);\n    }\n}\nexports.EthersLiquity = EthersLiquity;\nclass _EthersLiquityWithStore extends EthersLiquity {\n    constructor(readable) {\n        super(readable);\n        this.store = readable.store;\n    }\n    hasStore(store) {\n        return store === undefined || store === this.connection.useStore;\n    }\n}\n//# sourceMappingURL=EthersLiquity.js.map"]},"metadata":{},"sourceType":"script"}