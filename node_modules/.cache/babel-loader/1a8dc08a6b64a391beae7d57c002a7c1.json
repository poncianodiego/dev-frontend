{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Staking/context/StakingViewProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useLiquityReducer } from \"@liquity/lib-react\";\nimport { useMyTransactionState } from \"../../Transaction\";\nimport { StakingViewContext } from \"./StakingViewContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst init = ({\n  lqtyStake\n}) => ({\n  lqtyStake,\n  changePending: false,\n  adjusting: false\n});\n\nconst reduce = (state, action) => {\n  // console.log(state);\n  // console.log(action);\n  switch (action.type) {\n    case \"startAdjusting\":\n      return { ...state,\n        adjusting: true\n      };\n\n    case \"cancelAdjusting\":\n      return { ...state,\n        adjusting: false\n      };\n\n    case \"startChange\":\n      return { ...state,\n        changePending: true\n      };\n\n    case \"abortChange\":\n      return { ...state,\n        changePending: false\n      };\n\n    case \"updateStore\":\n      {\n        const {\n          oldState: {\n            lqtyStake: oldStake\n          },\n          stateChange: {\n            lqtyStake: updatedStake\n          }\n        } = action;\n\n        if (updatedStake) {\n          const changeCommitted = !updatedStake.stakedLQTY.eq(oldStake.stakedLQTY) || updatedStake.collateralGain.lt(oldStake.collateralGain) || updatedStake.lusdGain.lt(oldStake.lusdGain);\n          return { ...state,\n            lqtyStake: updatedStake,\n            adjusting: false,\n            changePending: changeCommitted ? false : state.changePending\n          };\n        }\n      }\n  }\n\n  return state;\n};\n\nexport const StakingViewProvider = ({\n  children\n}) => {\n  _s();\n\n  const stakingTransactionState = useMyTransactionState(\"stake\");\n  const [{\n    adjusting,\n    changePending,\n    lqtyStake\n  }, dispatch] = useLiquityReducer(reduce, init);\n  useEffect(() => {\n    if (stakingTransactionState.type === \"waitingForApproval\" || stakingTransactionState.type === \"waitingForConfirmation\") {\n      dispatch({\n        type: \"startChange\"\n      });\n    } else if (stakingTransactionState.type === \"failed\" || stakingTransactionState.type === \"cancelled\") {\n      dispatch({\n        type: \"abortChange\"\n      });\n    }\n  }, [stakingTransactionState.type, dispatch]);\n  return /*#__PURE__*/_jsxDEV(StakingViewContext.Provider, {\n    value: {\n      view: adjusting ? \"ADJUSTING\" : lqtyStake.isEmpty ? \"NONE\" : \"ACTIVE\",\n      changePending,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StakingViewProvider, \"8YvKzOPT/M2zmK3cR3NTKgg8zAQ=\", false, function () {\n  return [useMyTransactionState, useLiquityReducer];\n});\n\n_c = StakingViewProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakingViewProvider\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Staking/context/StakingViewProvider.tsx"],"names":["useEffect","useLiquityReducer","useMyTransactionState","StakingViewContext","init","lqtyStake","changePending","adjusting","reduce","state","action","type","oldState","oldStake","stateChange","updatedStake","changeCommitted","stakedLQTY","eq","collateralGain","lt","lusdGain","StakingViewProvider","children","stakingTransactionState","dispatch","view","isEmpty"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\n\nimport { LiquityStoreState, LQTYStake } from \"@liquity/lib-base\";\nimport { LiquityStoreUpdate, useLiquityReducer } from \"@liquity/lib-react\";\n\nimport { useMyTransactionState } from \"../../Transaction\";\n\nimport { StakingViewAction, StakingViewContext } from \"./StakingViewContext\";\n\ntype StakingViewProviderAction =\n  | LiquityStoreUpdate\n  | StakingViewAction\n  | { type: \"startChange\" | \"abortChange\" };\n\ntype StakingViewProviderState = {\n  lqtyStake: LQTYStake;\n  changePending: boolean;\n  adjusting: boolean;\n};\n\nconst init = ({ lqtyStake }: LiquityStoreState): StakingViewProviderState => ({\n  lqtyStake,\n  changePending: false,\n  adjusting: false\n});\n\nconst reduce = (\n  state: StakingViewProviderState,\n  action: StakingViewProviderAction\n): StakingViewProviderState => {\n  // console.log(state);\n  // console.log(action);\n\n  switch (action.type) {\n    case \"startAdjusting\":\n      return { ...state, adjusting: true };\n\n    case \"cancelAdjusting\":\n      return { ...state, adjusting: false };\n\n    case \"startChange\":\n      return { ...state, changePending: true };\n\n    case \"abortChange\":\n      return { ...state, changePending: false };\n\n    case \"updateStore\": {\n      const {\n        oldState: { lqtyStake: oldStake },\n        stateChange: { lqtyStake: updatedStake }\n      } = action;\n\n      if (updatedStake) {\n        const changeCommitted =\n          !updatedStake.stakedLQTY.eq(oldStake.stakedLQTY) ||\n          updatedStake.collateralGain.lt(oldStake.collateralGain) ||\n          updatedStake.lusdGain.lt(oldStake.lusdGain);\n\n        return {\n          ...state,\n          lqtyStake: updatedStake,\n          adjusting: false,\n          changePending: changeCommitted ? false : state.changePending\n        };\n      }\n    }\n  }\n\n  return state;\n};\n\nexport const StakingViewProvider: React.FC = ({ children }) => {\n  const stakingTransactionState = useMyTransactionState(\"stake\");\n  const [{ adjusting, changePending, lqtyStake }, dispatch] = useLiquityReducer(reduce, init);\n\n  useEffect(() => {\n    if (\n      stakingTransactionState.type === \"waitingForApproval\" ||\n      stakingTransactionState.type === \"waitingForConfirmation\"\n    ) {\n      dispatch({ type: \"startChange\" });\n    } else if (\n      stakingTransactionState.type === \"failed\" ||\n      stakingTransactionState.type === \"cancelled\"\n    ) {\n      dispatch({ type: \"abortChange\" });\n    }\n  }, [stakingTransactionState.type, dispatch]);\n\n  return (\n    <StakingViewContext.Provider\n      value={{\n        view: adjusting ? \"ADJUSTING\" : lqtyStake.isEmpty ? \"NONE\" : \"ACTIVE\",\n        changePending,\n        dispatch\n      }}\n    >\n      {children}\n    </StakingViewContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}