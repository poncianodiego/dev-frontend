{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Percent = exports.Difference = exports.Decimal = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\n\nvar getDigits = function getDigits(numDigits) {\n  return TEN.pow(numDigits);\n};\n\nvar MAX_UINT_256 = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\nvar PRECISION = 18;\nvar ONE = bignumber_1.BigNumber.from(1);\nvar TEN = bignumber_1.BigNumber.from(10);\nvar DIGITS = getDigits(PRECISION);\nvar stringRepresentationFormat = /^[0-9]*(\\.[0-9]*)?(e[-+]?[0-9]+)?$/;\nvar trailingZeros = /0*$/;\nvar magnitudes = [\"\", \"K\", \"M\", \"B\", \"T\"];\n\nvar roundedMul = function roundedMul(x, y) {\n  return x.mul(y).add(Decimal.HALF.hex).div(DIGITS);\n};\n/**\n * Fixed-point decimal bignumber with 18 digits of precision.\n *\n * @remarks\n * Used by Liquity libraries to precisely represent native currency (e.g. Ether), LUSD and LQTY\n * amounts, as well as derived metrics like collateral ratios.\n *\n * @public\n */\n\n\nvar Decimal = /*#__PURE__*/function () {\n  function Decimal(bigNumber) {\n    _classCallCheck(this, Decimal);\n\n    if (bigNumber.isNegative()) {\n      throw new Error(\"negatives not supported by Decimal\");\n    }\n\n    this._bigNumber = bigNumber;\n  }\n  /** @internal */\n\n\n  _createClass(Decimal, [{\n    key: \"hex\",\n    get: function get() {\n      return this._bigNumber.toHexString();\n    }\n    /** @internal */\n\n  }, {\n    key: \"bigNumber\",\n    get: function get() {\n      return this._bigNumber.toString();\n    }\n  }, {\n    key: \"_toStringWithAutomaticPrecision\",\n    value: function _toStringWithAutomaticPrecision() {\n      var characteristic = this._bigNumber.div(DIGITS);\n\n      var mantissa = this._bigNumber.mod(DIGITS);\n\n      if (mantissa.isZero()) {\n        return characteristic.toString();\n      } else {\n        var paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n        var trimmedMantissa = paddedMantissa.replace(trailingZeros, \"\");\n        return characteristic.toString() + \".\" + trimmedMantissa;\n      }\n    }\n  }, {\n    key: \"_roundUp\",\n    value: function _roundUp(precision) {\n      var halfDigit = getDigits(PRECISION - 1 - precision).mul(5);\n      return this._bigNumber.add(halfDigit);\n    }\n  }, {\n    key: \"_toStringWithPrecision\",\n    value: function _toStringWithPrecision(precision) {\n      if (precision < 0) {\n        throw new Error(\"precision must not be negative\");\n      }\n\n      var value = precision < PRECISION ? this._roundUp(precision) : this._bigNumber;\n      var characteristic = value.div(DIGITS);\n      var mantissa = value.mod(DIGITS);\n\n      if (precision === 0) {\n        return characteristic.toString();\n      } else {\n        var paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n        var trimmedMantissa = paddedMantissa.substr(0, precision);\n        return characteristic.toString() + \".\" + trimmedMantissa;\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(precision) {\n      if (this.infinite) {\n        return \"âˆž\";\n      } else if (precision !== undefined) {\n        return this._toStringWithPrecision(precision);\n      } else {\n        return this._toStringWithAutomaticPrecision();\n      }\n    }\n  }, {\n    key: \"prettify\",\n    value: function prettify() {\n      var precision = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n\n      var _this$toString$split = this.toString(precision).split(\".\"),\n          _this$toString$split2 = _slicedToArray(_this$toString$split, 2),\n          characteristic = _this$toString$split2[0],\n          mantissa = _this$toString$split2[1];\n\n      var prettyCharacteristic = characteristic.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n      return mantissa !== undefined ? prettyCharacteristic + \".\" + mantissa : prettyCharacteristic;\n    }\n  }, {\n    key: \"shorten\",\n    value: function shorten() {\n      var characteristicLength = this.toString(0).length;\n      var magnitude = Math.min(Math.floor((characteristicLength - 1) / 3), magnitudes.length - 1);\n      var precision = Math.max(3 * (magnitude + 1) - characteristicLength, 0);\n      var normalized = this.div(new Decimal(getDigits(PRECISION + 3 * magnitude)));\n      return normalized.prettify(precision) + magnitudes[magnitude];\n    }\n  }, {\n    key: \"add\",\n    value: function add(addend) {\n      return new Decimal(this._bigNumber.add(Decimal.from(addend)._bigNumber));\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(subtrahend) {\n      return new Decimal(this._bigNumber.sub(Decimal.from(subtrahend)._bigNumber));\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(multiplier) {\n      return new Decimal(this._bigNumber.mul(Decimal.from(multiplier)._bigNumber).div(DIGITS));\n    }\n  }, {\n    key: \"div\",\n    value: function div(divider) {\n      divider = Decimal.from(divider);\n\n      if (divider.isZero) {\n        return Decimal.INFINITY;\n      }\n\n      return new Decimal(this._bigNumber.mul(DIGITS).div(divider._bigNumber));\n    }\n    /** @internal */\n\n  }, {\n    key: \"_divCeil\",\n    value: function _divCeil(divider) {\n      divider = Decimal.from(divider);\n\n      if (divider.isZero) {\n        return Decimal.INFINITY;\n      }\n\n      return new Decimal(this._bigNumber.mul(DIGITS).add(divider._bigNumber.sub(ONE)).div(divider._bigNumber));\n    }\n  }, {\n    key: \"mulDiv\",\n    value: function mulDiv(multiplier, divider) {\n      multiplier = Decimal.from(multiplier);\n      divider = Decimal.from(divider);\n\n      if (divider.isZero) {\n        return Decimal.INFINITY;\n      }\n\n      return new Decimal(this._bigNumber.mul(multiplier._bigNumber).div(divider._bigNumber));\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(exponent) {\n      assert_1.default(Number.isInteger(exponent));\n      assert_1.default(0 <= exponent && exponent <= 0xffffffff); // Ensure we're safe to use bitwise ops\n\n      if (exponent === 0) {\n        return Decimal.ONE;\n      }\n\n      if (exponent === 1) {\n        return this;\n      }\n\n      var x = this._bigNumber;\n      var y = DIGITS;\n\n      for (; exponent > 1; exponent >>>= 1) {\n        if (exponent & 1) {\n          y = roundedMul(x, y);\n        }\n\n        x = roundedMul(x, x);\n      }\n\n      return new Decimal(roundedMul(x, y));\n    }\n  }, {\n    key: \"isZero\",\n    get: function get() {\n      return this._bigNumber.isZero();\n    }\n  }, {\n    key: \"zero\",\n    get: function get() {\n      if (this.isZero) {\n        return this;\n      }\n    }\n  }, {\n    key: \"nonZero\",\n    get: function get() {\n      if (!this.isZero) {\n        return this;\n      }\n    }\n  }, {\n    key: \"infinite\",\n    get: function get() {\n      if (this.eq(Decimal.INFINITY)) {\n        return this;\n      }\n    }\n  }, {\n    key: \"finite\",\n    get: function get() {\n      if (!this.eq(Decimal.INFINITY)) {\n        return this;\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"absoluteValue\",\n    get: function get() {\n      return this;\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(that) {\n      return this._bigNumber.lt(Decimal.from(that)._bigNumber);\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(that) {\n      return this._bigNumber.eq(Decimal.from(that)._bigNumber);\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(that) {\n      return this._bigNumber.gt(Decimal.from(that)._bigNumber);\n    }\n  }, {\n    key: \"gte\",\n    value: function gte(that) {\n      return this._bigNumber.gte(Decimal.from(that)._bigNumber);\n    }\n  }, {\n    key: \"lte\",\n    value: function lte(that) {\n      return this._bigNumber.lte(Decimal.from(that)._bigNumber);\n    }\n  }], [{\n    key: \"fromBigNumberString\",\n    value: function fromBigNumberString(bigNumberString) {\n      return new Decimal(bignumber_1.BigNumber.from(bigNumberString));\n    }\n  }, {\n    key: \"_fromString\",\n    value: function _fromString(representation) {\n      if (!representation || !representation.match(stringRepresentationFormat)) {\n        throw new Error(\"bad decimal format: \\\"\".concat(representation, \"\\\"\"));\n      }\n\n      if (representation.includes(\"e\")) {\n        // eslint-disable-next-line prefer-const\n        var _representation$split = representation.split(\"e\"),\n            _representation$split2 = _slicedToArray(_representation$split, 2),\n            coefficient = _representation$split2[0],\n            exponent = _representation$split2[1];\n\n        if (exponent.startsWith(\"-\")) {\n          return new Decimal(Decimal._fromString(coefficient)._bigNumber.div(TEN.pow(bignumber_1.BigNumber.from(exponent.substr(1)))));\n        }\n\n        if (exponent.startsWith(\"+\")) {\n          exponent = exponent.substr(1);\n        }\n\n        return new Decimal(Decimal._fromString(coefficient)._bigNumber.mul(TEN.pow(bignumber_1.BigNumber.from(exponent))));\n      }\n\n      if (!representation.includes(\".\")) {\n        return new Decimal(bignumber_1.BigNumber.from(representation).mul(DIGITS));\n      } // eslint-disable-next-line prefer-const\n\n\n      var _representation$split3 = representation.split(\".\"),\n          _representation$split4 = _slicedToArray(_representation$split3, 2),\n          characteristic = _representation$split4[0],\n          mantissa = _representation$split4[1];\n\n      if (mantissa.length < PRECISION) {\n        mantissa += \"0\".repeat(PRECISION - mantissa.length);\n      } else {\n        mantissa = mantissa.substr(0, PRECISION);\n      }\n\n      return new Decimal(bignumber_1.BigNumber.from(characteristic || 0).mul(DIGITS).add(mantissa));\n    }\n  }, {\n    key: \"from\",\n    value: function from(decimalish) {\n      switch (typeof decimalish) {\n        case \"object\":\n          if (decimalish instanceof Decimal) {\n            return decimalish;\n          } else {\n            throw new Error(\"invalid Decimalish value\");\n          }\n\n        case \"string\":\n          return Decimal._fromString(decimalish);\n\n        case \"number\":\n          return Decimal._fromString(decimalish.toString());\n\n        default:\n          throw new Error(\"invalid Decimalish value\");\n      }\n    }\n  }, {\n    key: \"min\",\n    value: function min(a, b) {\n      a = Decimal.from(a);\n      b = Decimal.from(b);\n      return a.lt(b) ? a : b;\n    }\n  }, {\n    key: \"max\",\n    value: function max(a, b) {\n      a = Decimal.from(a);\n      b = Decimal.from(b);\n      return a.gt(b) ? a : b;\n    }\n  }]);\n\n  return Decimal;\n}();\n\nexports.Decimal = Decimal;\nDecimal.INFINITY = Decimal.fromBigNumberString(MAX_UINT_256);\nDecimal.ZERO = Decimal.from(0);\nDecimal.HALF = Decimal.from(0.5);\nDecimal.ONE = Decimal.from(1);\n/** @alpha */\n\nvar Difference = /*#__PURE__*/function () {\n  function Difference(number) {\n    _classCallCheck(this, Difference);\n\n    this._number = number;\n  }\n\n  _createClass(Difference, [{\n    key: \"toString\",\n    value: function toString(precision) {\n      if (!this._number) {\n        return \"N/A\";\n      }\n\n      return this._number.sign + this._number.absoluteValue.toString(precision);\n    }\n  }, {\n    key: \"prettify\",\n    value: function prettify(precision) {\n      if (!this._number) {\n        return this.toString();\n      }\n\n      return this._number.sign + this._number.absoluteValue.prettify(precision);\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(multiplier) {\n      return new Difference(this._number && {\n        sign: this._number.sign,\n        absoluteValue: this._number.absoluteValue.mul(multiplier)\n      });\n    }\n  }, {\n    key: \"nonZero\",\n    get: function get() {\n      var _a;\n\n      return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.nonZero) && this;\n    }\n  }, {\n    key: \"positive\",\n    get: function get() {\n      var _a;\n\n      return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.sign) === \"+\" ? this : undefined;\n    }\n  }, {\n    key: \"negative\",\n    get: function get() {\n      var _a;\n\n      return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.sign) === \"-\" ? this : undefined;\n    }\n  }, {\n    key: \"absoluteValue\",\n    get: function get() {\n      var _a;\n\n      return (_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue;\n    }\n  }, {\n    key: \"infinite\",\n    get: function get() {\n      var _a;\n\n      return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.infinite) && this;\n    }\n  }, {\n    key: \"finite\",\n    get: function get() {\n      var _a;\n\n      return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.finite) && this;\n    }\n  }], [{\n    key: \"between\",\n    value: function between(d1, d2) {\n      if (d1 === undefined || d2 === undefined) {\n        return new Difference(undefined);\n      }\n\n      d1 = Decimal.from(d1);\n      d2 = Decimal.from(d2);\n\n      if (d1.infinite && d2.infinite) {\n        return new Difference(undefined);\n      } else if (d1.infinite) {\n        return new Difference({\n          sign: \"+\",\n          absoluteValue: d1\n        });\n      } else if (d2.infinite) {\n        return new Difference({\n          sign: \"-\",\n          absoluteValue: d2\n        });\n      } else if (d1.gt(d2)) {\n        return new Difference({\n          sign: \"+\",\n          absoluteValue: Decimal.from(d1).sub(d2)\n        });\n      } else if (d2.gt(d1)) {\n        return new Difference({\n          sign: \"-\",\n          absoluteValue: Decimal.from(d2).sub(d1)\n        });\n      } else {\n        return new Difference({\n          sign: \"\",\n          absoluteValue: Decimal.ZERO\n        });\n      }\n    }\n  }]);\n\n  return Difference;\n}();\n\nexports.Difference = Difference;\n/** @alpha */\n\nvar Percent = /*#__PURE__*/function () {\n  function Percent(ratio) {\n    _classCallCheck(this, Percent);\n\n    this._percent = ratio.infinite || ratio.mul && ratio.mul(100) || ratio;\n  }\n\n  _createClass(Percent, [{\n    key: \"nonZeroish\",\n    value: function nonZeroish(precision) {\n      var _a;\n\n      var zeroish = \"0.\".concat(\"0\".repeat(precision), \"5\");\n\n      if ((_a = this._percent.absoluteValue) === null || _a === void 0 ? void 0 : _a.gte(zeroish)) {\n        return this;\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(precision) {\n      return this._percent.toString(precision) + (this._percent.absoluteValue && !this._percent.infinite ? \"%\" : \"\");\n    }\n  }, {\n    key: \"prettify\",\n    value: function prettify() {\n      var _a, _b;\n\n      if ((_a = this._percent.absoluteValue) === null || _a === void 0 ? void 0 : _a.gte(\"1000\")) {\n        return this.toString(0);\n      } else if ((_b = this._percent.absoluteValue) === null || _b === void 0 ? void 0 : _b.gte(\"10\")) {\n        return this.toString(1);\n      } else {\n        return this.toString(2);\n      }\n    }\n  }]);\n\n  return Percent;\n}();\n\nexports.Percent = Percent;","map":{"version":3,"sources":["../../src/Decimal.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Percent = exports.Difference = exports.Decimal = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\nconst getDigits = (numDigits) => TEN.pow(numDigits);\nconst MAX_UINT_256 = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\nconst PRECISION = 18;\nconst ONE = bignumber_1.BigNumber.from(1);\nconst TEN = bignumber_1.BigNumber.from(10);\nconst DIGITS = getDigits(PRECISION);\nconst stringRepresentationFormat = /^[0-9]*(\\.[0-9]*)?(e[-+]?[0-9]+)?$/;\nconst trailingZeros = /0*$/;\nconst magnitudes = [\"\", \"K\", \"M\", \"B\", \"T\"];\nconst roundedMul = (x, y) => x.mul(y).add(Decimal.HALF.hex).div(DIGITS);\n/**\n * Fixed-point decimal bignumber with 18 digits of precision.\n *\n * @remarks\n * Used by Liquity libraries to precisely represent native currency (e.g. Ether), LUSD and LQTY\n * amounts, as well as derived metrics like collateral ratios.\n *\n * @public\n */\nclass Decimal {\n    constructor(bigNumber) {\n        if (bigNumber.isNegative()) {\n            throw new Error(\"negatives not supported by Decimal\");\n        }\n        this._bigNumber = bigNumber;\n    }\n    /** @internal */\n    get hex() {\n        return this._bigNumber.toHexString();\n    }\n    /** @internal */\n    get bigNumber() {\n        return this._bigNumber.toString();\n    }\n    static fromBigNumberString(bigNumberString) {\n        return new Decimal(bignumber_1.BigNumber.from(bigNumberString));\n    }\n    static _fromString(representation) {\n        if (!representation || !representation.match(stringRepresentationFormat)) {\n            throw new Error(`bad decimal format: \"${representation}\"`);\n        }\n        if (representation.includes(\"e\")) {\n            // eslint-disable-next-line prefer-const\n            let [coefficient, exponent] = representation.split(\"e\");\n            if (exponent.startsWith(\"-\")) {\n                return new Decimal(Decimal._fromString(coefficient)._bigNumber.div(TEN.pow(bignumber_1.BigNumber.from(exponent.substr(1)))));\n            }\n            if (exponent.startsWith(\"+\")) {\n                exponent = exponent.substr(1);\n            }\n            return new Decimal(Decimal._fromString(coefficient)._bigNumber.mul(TEN.pow(bignumber_1.BigNumber.from(exponent))));\n        }\n        if (!representation.includes(\".\")) {\n            return new Decimal(bignumber_1.BigNumber.from(representation).mul(DIGITS));\n        }\n        // eslint-disable-next-line prefer-const\n        let [characteristic, mantissa] = representation.split(\".\");\n        if (mantissa.length < PRECISION) {\n            mantissa += \"0\".repeat(PRECISION - mantissa.length);\n        }\n        else {\n            mantissa = mantissa.substr(0, PRECISION);\n        }\n        return new Decimal(bignumber_1.BigNumber.from(characteristic || 0)\n            .mul(DIGITS)\n            .add(mantissa));\n    }\n    static from(decimalish) {\n        switch (typeof decimalish) {\n            case \"object\":\n                if (decimalish instanceof Decimal) {\n                    return decimalish;\n                }\n                else {\n                    throw new Error(\"invalid Decimalish value\");\n                }\n            case \"string\":\n                return Decimal._fromString(decimalish);\n            case \"number\":\n                return Decimal._fromString(decimalish.toString());\n            default:\n                throw new Error(\"invalid Decimalish value\");\n        }\n    }\n    _toStringWithAutomaticPrecision() {\n        const characteristic = this._bigNumber.div(DIGITS);\n        const mantissa = this._bigNumber.mod(DIGITS);\n        if (mantissa.isZero()) {\n            return characteristic.toString();\n        }\n        else {\n            const paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n            const trimmedMantissa = paddedMantissa.replace(trailingZeros, \"\");\n            return characteristic.toString() + \".\" + trimmedMantissa;\n        }\n    }\n    _roundUp(precision) {\n        const halfDigit = getDigits(PRECISION - 1 - precision).mul(5);\n        return this._bigNumber.add(halfDigit);\n    }\n    _toStringWithPrecision(precision) {\n        if (precision < 0) {\n            throw new Error(\"precision must not be negative\");\n        }\n        const value = precision < PRECISION ? this._roundUp(precision) : this._bigNumber;\n        const characteristic = value.div(DIGITS);\n        const mantissa = value.mod(DIGITS);\n        if (precision === 0) {\n            return characteristic.toString();\n        }\n        else {\n            const paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n            const trimmedMantissa = paddedMantissa.substr(0, precision);\n            return characteristic.toString() + \".\" + trimmedMantissa;\n        }\n    }\n    toString(precision) {\n        if (this.infinite) {\n            return \"âˆž\";\n        }\n        else if (precision !== undefined) {\n            return this._toStringWithPrecision(precision);\n        }\n        else {\n            return this._toStringWithAutomaticPrecision();\n        }\n    }\n    prettify(precision = 2) {\n        const [characteristic, mantissa] = this.toString(precision).split(\".\");\n        const prettyCharacteristic = characteristic.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n        return mantissa !== undefined ? prettyCharacteristic + \".\" + mantissa : prettyCharacteristic;\n    }\n    shorten() {\n        const characteristicLength = this.toString(0).length;\n        const magnitude = Math.min(Math.floor((characteristicLength - 1) / 3), magnitudes.length - 1);\n        const precision = Math.max(3 * (magnitude + 1) - characteristicLength, 0);\n        const normalized = this.div(new Decimal(getDigits(PRECISION + 3 * magnitude)));\n        return normalized.prettify(precision) + magnitudes[magnitude];\n    }\n    add(addend) {\n        return new Decimal(this._bigNumber.add(Decimal.from(addend)._bigNumber));\n    }\n    sub(subtrahend) {\n        return new Decimal(this._bigNumber.sub(Decimal.from(subtrahend)._bigNumber));\n    }\n    mul(multiplier) {\n        return new Decimal(this._bigNumber.mul(Decimal.from(multiplier)._bigNumber).div(DIGITS));\n    }\n    div(divider) {\n        divider = Decimal.from(divider);\n        if (divider.isZero) {\n            return Decimal.INFINITY;\n        }\n        return new Decimal(this._bigNumber.mul(DIGITS).div(divider._bigNumber));\n    }\n    /** @internal */\n    _divCeil(divider) {\n        divider = Decimal.from(divider);\n        if (divider.isZero) {\n            return Decimal.INFINITY;\n        }\n        return new Decimal(this._bigNumber.mul(DIGITS).add(divider._bigNumber.sub(ONE)).div(divider._bigNumber));\n    }\n    mulDiv(multiplier, divider) {\n        multiplier = Decimal.from(multiplier);\n        divider = Decimal.from(divider);\n        if (divider.isZero) {\n            return Decimal.INFINITY;\n        }\n        return new Decimal(this._bigNumber.mul(multiplier._bigNumber).div(divider._bigNumber));\n    }\n    pow(exponent) {\n        assert_1.default(Number.isInteger(exponent));\n        assert_1.default(0 <= exponent && exponent <= 0xffffffff); // Ensure we're safe to use bitwise ops\n        if (exponent === 0) {\n            return Decimal.ONE;\n        }\n        if (exponent === 1) {\n            return this;\n        }\n        let x = this._bigNumber;\n        let y = DIGITS;\n        for (; exponent > 1; exponent >>>= 1) {\n            if (exponent & 1) {\n                y = roundedMul(x, y);\n            }\n            x = roundedMul(x, x);\n        }\n        return new Decimal(roundedMul(x, y));\n    }\n    get isZero() {\n        return this._bigNumber.isZero();\n    }\n    get zero() {\n        if (this.isZero) {\n            return this;\n        }\n    }\n    get nonZero() {\n        if (!this.isZero) {\n            return this;\n        }\n    }\n    get infinite() {\n        if (this.eq(Decimal.INFINITY)) {\n            return this;\n        }\n    }\n    get finite() {\n        if (!this.eq(Decimal.INFINITY)) {\n            return this;\n        }\n    }\n    /** @internal */\n    get absoluteValue() {\n        return this;\n    }\n    lt(that) {\n        return this._bigNumber.lt(Decimal.from(that)._bigNumber);\n    }\n    eq(that) {\n        return this._bigNumber.eq(Decimal.from(that)._bigNumber);\n    }\n    gt(that) {\n        return this._bigNumber.gt(Decimal.from(that)._bigNumber);\n    }\n    gte(that) {\n        return this._bigNumber.gte(Decimal.from(that)._bigNumber);\n    }\n    lte(that) {\n        return this._bigNumber.lte(Decimal.from(that)._bigNumber);\n    }\n    static min(a, b) {\n        a = Decimal.from(a);\n        b = Decimal.from(b);\n        return a.lt(b) ? a : b;\n    }\n    static max(a, b) {\n        a = Decimal.from(a);\n        b = Decimal.from(b);\n        return a.gt(b) ? a : b;\n    }\n}\nexports.Decimal = Decimal;\nDecimal.INFINITY = Decimal.fromBigNumberString(MAX_UINT_256);\nDecimal.ZERO = Decimal.from(0);\nDecimal.HALF = Decimal.from(0.5);\nDecimal.ONE = Decimal.from(1);\n/** @alpha */\nclass Difference {\n    constructor(number) {\n        this._number = number;\n    }\n    static between(d1, d2) {\n        if (d1 === undefined || d2 === undefined) {\n            return new Difference(undefined);\n        }\n        d1 = Decimal.from(d1);\n        d2 = Decimal.from(d2);\n        if (d1.infinite && d2.infinite) {\n            return new Difference(undefined);\n        }\n        else if (d1.infinite) {\n            return new Difference({ sign: \"+\", absoluteValue: d1 });\n        }\n        else if (d2.infinite) {\n            return new Difference({ sign: \"-\", absoluteValue: d2 });\n        }\n        else if (d1.gt(d2)) {\n            return new Difference({ sign: \"+\", absoluteValue: Decimal.from(d1).sub(d2) });\n        }\n        else if (d2.gt(d1)) {\n            return new Difference({ sign: \"-\", absoluteValue: Decimal.from(d2).sub(d1) });\n        }\n        else {\n            return new Difference({ sign: \"\", absoluteValue: Decimal.ZERO });\n        }\n    }\n    toString(precision) {\n        if (!this._number) {\n            return \"N/A\";\n        }\n        return this._number.sign + this._number.absoluteValue.toString(precision);\n    }\n    prettify(precision) {\n        if (!this._number) {\n            return this.toString();\n        }\n        return this._number.sign + this._number.absoluteValue.prettify(precision);\n    }\n    mul(multiplier) {\n        return new Difference(this._number && {\n            sign: this._number.sign,\n            absoluteValue: this._number.absoluteValue.mul(multiplier)\n        });\n    }\n    get nonZero() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.nonZero) && this;\n    }\n    get positive() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.sign) === \"+\" ? this : undefined;\n    }\n    get negative() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.sign) === \"-\" ? this : undefined;\n    }\n    get absoluteValue() {\n        var _a;\n        return (_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue;\n    }\n    get infinite() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.infinite) && this;\n    }\n    get finite() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.finite) && this;\n    }\n}\nexports.Difference = Difference;\n/** @alpha */\nclass Percent {\n    constructor(ratio) {\n        this._percent = ratio.infinite || (ratio.mul && ratio.mul(100)) || ratio;\n    }\n    nonZeroish(precision) {\n        var _a;\n        const zeroish = `0.${\"0\".repeat(precision)}5`;\n        if ((_a = this._percent.absoluteValue) === null || _a === void 0 ? void 0 : _a.gte(zeroish)) {\n            return this;\n        }\n    }\n    toString(precision) {\n        return (this._percent.toString(precision) +\n            (this._percent.absoluteValue && !this._percent.infinite ? \"%\" : \"\"));\n    }\n    prettify() {\n        var _a, _b;\n        if ((_a = this._percent.absoluteValue) === null || _a === void 0 ? void 0 : _a.gte(\"1000\")) {\n            return this.toString(0);\n        }\n        else if ((_b = this._percent.absoluteValue) === null || _b === void 0 ? void 0 : _b.gte(\"10\")) {\n            return this.toString(1);\n        }\n        else {\n            return this.toString(2);\n        }\n    }\n}\nexports.Percent = Percent;\n//# sourceMappingURL=Decimal.js.map"]},"metadata":{},"sourceType":"script"}