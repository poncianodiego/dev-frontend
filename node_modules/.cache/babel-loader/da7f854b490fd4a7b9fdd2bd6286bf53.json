{"ast":null,"code":"import React,{useState}from\"react\";import{Heading,Box,Card,Button}from\"theme-ui\";import{Difference}from\"@liquity/lib-base\";import{useLiquitySelector}from\"@liquity/lib-react\";import{COIN,GT}from\"../../strings\";import{Icon}from\"../Icon\";import{EditableRow,StaticRow}from\"../Trove/Editor\";import{LoadingOverlay}from\"../LoadingOverlay\";import{useStakingView}from\"./context/StakingViewContext\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var select=function select(_ref){var lqtyBalance=_ref.lqtyBalance,totalStakedLQTY=_ref.totalStakedLQTY;return{lqtyBalance:lqtyBalance,totalStakedLQTY:totalStakedLQTY};};export var StakingEditor=function StakingEditor(_ref2){var children=_ref2.children,title=_ref2.title,originalStake=_ref2.originalStake,editedLQTY=_ref2.editedLQTY,dispatch=_ref2.dispatch;var _useLiquitySelector=useLiquitySelector(select),lqtyBalance=_useLiquitySelector.lqtyBalance,totalStakedLQTY=_useLiquitySelector.totalStakedLQTY;var _useStakingView=useStakingView(),changePending=_useStakingView.changePending;var editingState=useState();var edited=!editedLQTY.eq(originalStake.stakedLQTY);var maxAmount=originalStake.stakedLQTY.add(lqtyBalance);var maxedOut=editedLQTY.eq(maxAmount);var totalStakedLQTYAfterChange=totalStakedLQTY.sub(originalStake.stakedLQTY).add(editedLQTY);var originalPoolShare=originalStake.stakedLQTY.mulDiv(100,totalStakedLQTY);var newPoolShare=editedLQTY.mulDiv(100,totalStakedLQTYAfterChange);var poolShareChange=originalStake.stakedLQTY.nonZero&&Difference.between(newPoolShare,originalPoolShare).nonZero;return/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsxs(Heading,{children:[title,edited&&!changePending&&/*#__PURE__*/_jsx(Button,{variant:\"titleIcon\",sx:{\":enabled:hover\":{color:\"danger\"}},onClick:function onClick(){return dispatch({type:\"revert\"});},children:/*#__PURE__*/_jsx(Icon,{name:\"history\",size:\"lg\"})})]}),/*#__PURE__*/_jsxs(Box,{sx:{p:[2,3]},children:[/*#__PURE__*/_jsx(EditableRow,{label:\"Stake\",inputId:\"stake-lqty\",amount:editedLQTY.prettify(),maxAmount:maxAmount.toString(),maxedOut:maxedOut,unit:GT,editingState:editingState,editedAmount:editedLQTY.toString(2),setEditedAmount:function setEditedAmount(newValue){return dispatch({type:\"setStake\",newValue:newValue});}}),newPoolShare.infinite?/*#__PURE__*/_jsx(StaticRow,{label:\"Pool share\",inputId:\"stake-share\",amount:\"N/A\"}):/*#__PURE__*/_jsx(StaticRow,{label:\"Pool share\",inputId:\"stake-share\",amount:newPoolShare.prettify(4),pendingAmount:poolShareChange===null||poolShareChange===void 0?void 0:poolShareChange.prettify(4).concat(\"%\"),pendingColor:(poolShareChange===null||poolShareChange===void 0?void 0:poolShareChange.positive)?\"success\":\"danger\",unit:\"%\"}),!originalStake.isEmpty&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(StaticRow,{label:\"Redemption gain\",inputId:\"stake-gain-eth\",amount:originalStake.collateralGain.prettify(4),color:originalStake.collateralGain.nonZero&&\"success\",unit:\"ETH\"}),/*#__PURE__*/_jsx(StaticRow,{label:\"Issuance gain\",inputId:\"stake-gain-lusd\",amount:originalStake.lusdGain.prettify(),color:originalStake.lusdGain.nonZero&&\"success\",unit:COIN})]}),children]}),changePending&&/*#__PURE__*/_jsx(LoadingOverlay,{})]});};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Staking/StakingEditor.tsx"],"names":["React","useState","Heading","Box","Card","Button","Difference","useLiquitySelector","COIN","GT","Icon","EditableRow","StaticRow","LoadingOverlay","useStakingView","select","lqtyBalance","totalStakedLQTY","StakingEditor","children","title","originalStake","editedLQTY","dispatch","changePending","editingState","edited","eq","stakedLQTY","maxAmount","add","maxedOut","totalStakedLQTYAfterChange","sub","originalPoolShare","mulDiv","newPoolShare","poolShareChange","nonZero","between","color","type","p","prettify","toString","newValue","infinite","concat","positive","isEmpty","collateralGain","lusdGain"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Heading, Box, Card, Button } from \"theme-ui\";\n\nimport { Decimal, Decimalish, Difference, LiquityStoreState, LQTYStake } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\n\nimport { COIN, GT } from \"../../strings\";\n\nimport { Icon } from \"../Icon\";\nimport { EditableRow, StaticRow } from \"../Trove/Editor\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\n\nimport { useStakingView } from \"./context/StakingViewContext\";\n\nconst select = ({ lqtyBalance, totalStakedLQTY }: LiquityStoreState) => ({\n  lqtyBalance,\n  totalStakedLQTY\n});\n\ntype StakingEditorProps = {\n  title: string;\n  originalStake: LQTYStake;\n  editedLQTY: Decimal;\n  dispatch: (action: { type: \"setStake\"; newValue: Decimalish } | { type: \"revert\" }) => void;\n};\n\nexport const StakingEditor: React.FC<StakingEditorProps> = ({\n  children,\n  title,\n  originalStake,\n  editedLQTY,\n  dispatch\n}) => {\n  const { lqtyBalance, totalStakedLQTY } = useLiquitySelector(select);\n  const { changePending } = useStakingView();\n  const editingState = useState<string>();\n\n  const edited = !editedLQTY.eq(originalStake.stakedLQTY);\n\n  const maxAmount = originalStake.stakedLQTY.add(lqtyBalance);\n  const maxedOut = editedLQTY.eq(maxAmount);\n\n  const totalStakedLQTYAfterChange = totalStakedLQTY.sub(originalStake.stakedLQTY).add(editedLQTY);\n\n  const originalPoolShare = originalStake.stakedLQTY.mulDiv(100, totalStakedLQTY);\n  const newPoolShare = editedLQTY.mulDiv(100, totalStakedLQTYAfterChange);\n  const poolShareChange =\n    originalStake.stakedLQTY.nonZero && Difference.between(newPoolShare, originalPoolShare).nonZero;\n\n  return (\n    <Card>\n      <Heading>\n        {title}\n        {edited && !changePending && (\n          <Button\n            variant=\"titleIcon\"\n            sx={{ \":enabled:hover\": { color: \"danger\" } }}\n            onClick={() => dispatch({ type: \"revert\" })}\n          >\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Stake\"\n          inputId=\"stake-lqty\"\n          amount={editedLQTY.prettify()}\n          maxAmount={maxAmount.toString()}\n          maxedOut={maxedOut}\n          unit={GT}\n          {...{ editingState }}\n          editedAmount={editedLQTY.toString(2)}\n          setEditedAmount={newValue => dispatch({ type: \"setStake\", newValue })}\n        />\n\n        {newPoolShare.infinite ? (\n          <StaticRow label=\"Pool share\" inputId=\"stake-share\" amount=\"N/A\" />\n        ) : (\n          <StaticRow\n            label=\"Pool share\"\n            inputId=\"stake-share\"\n            amount={newPoolShare.prettify(4)}\n            pendingAmount={poolShareChange?.prettify(4).concat(\"%\")}\n            pendingColor={poolShareChange?.positive ? \"success\" : \"danger\"}\n            unit=\"%\"\n          />\n        )}\n\n        {!originalStake.isEmpty && (\n          <>\n            <StaticRow\n              label=\"Redemption gain\"\n              inputId=\"stake-gain-eth\"\n              amount={originalStake.collateralGain.prettify(4)}\n              color={originalStake.collateralGain.nonZero && \"success\"}\n              unit=\"ETH\"\n            />\n\n            <StaticRow\n              label=\"Issuance gain\"\n              inputId=\"stake-gain-lusd\"\n              amount={originalStake.lusdGain.prettify()}\n              color={originalStake.lusdGain.nonZero && \"success\"}\n              unit={COIN}\n            />\n          </>\n        )}\n\n        {children}\n      </Box>\n\n      {changePending && <LoadingOverlay />}\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}