{"ast":null,"code":"import _objectSpread from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{LUSD_MINIMUM_DEBT,Percent,MINIMUM_COLLATERAL_RATIO,CRITICAL_COLLATERAL_RATIO}from\"@liquity/lib-base\";import{COIN}from\"../../../strings\";import{ActionDescription,Amount}from\"../../ActionDescription\";import{ErrorDescription}from\"../../ErrorDescription\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var mcrPercent=new Percent(MINIMUM_COLLATERAL_RATIO).toString(0);var ccrPercent=new Percent(CRITICAL_COLLATERAL_RATIO).toString(0);var TroveChangeDescription=function TroveChangeDescription(_ref){var params=_ref.params;return/*#__PURE__*/_jsxs(ActionDescription,{children:[params.depositCollateral&&params.borrowLUSD?/*#__PURE__*/_jsxs(_Fragment,{children:[\"You will deposit \",/*#__PURE__*/_jsxs(Amount,{children:[params.depositCollateral.prettify(),\" ETH\"]}),\" and receive\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[params.borrowLUSD.prettify(),\" \",COIN]})]}):params.repayLUSD&&params.withdrawCollateral?/*#__PURE__*/_jsxs(_Fragment,{children:[\"You will pay\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[params.repayLUSD.prettify(),\" \",COIN]}),\" \",\"and receive \",/*#__PURE__*/_jsxs(Amount,{children:[params.withdrawCollateral.prettify(),\" ETH\"]})]}):params.depositCollateral&&params.repayLUSD?/*#__PURE__*/_jsxs(_Fragment,{children:[\"You will deposit \",/*#__PURE__*/_jsxs(Amount,{children:[params.depositCollateral.prettify(),\" ETH\"]}),\" and pay\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[params.repayLUSD.prettify(),\" \",COIN]})]}):params.borrowLUSD&&params.withdrawCollateral?/*#__PURE__*/_jsxs(_Fragment,{children:[\"You will receive \",/*#__PURE__*/_jsxs(Amount,{children:[params.withdrawCollateral.prettify(),\" ETH\"]}),\" and\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[params.borrowLUSD.prettify(),\" \",COIN]})]}):params.depositCollateral?/*#__PURE__*/_jsxs(_Fragment,{children:[\"You will deposit \",/*#__PURE__*/_jsxs(Amount,{children:[params.depositCollateral.prettify(),\" ETH\"]})]}):params.withdrawCollateral?/*#__PURE__*/_jsxs(_Fragment,{children:[\"You will receive \",/*#__PURE__*/_jsxs(Amount,{children:[params.withdrawCollateral.prettify(),\" ETH\"]})]}):params.borrowLUSD?/*#__PURE__*/_jsxs(_Fragment,{children:[\"You will receive\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[params.borrowLUSD.prettify(),\" \",COIN]})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[\"You will pay\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[params.repayLUSD.prettify(),\" \",COIN]})]}),\".\"]});};export var selectForTroveChangeValidation=function selectForTroveChangeValidation(_ref2){var price=_ref2.price,total=_ref2.total,accountBalance=_ref2.accountBalance,lusdBalance=_ref2.lusdBalance,numberOfTroves=_ref2.numberOfTroves;return{price:price,total:total,accountBalance:accountBalance,lusdBalance:lusdBalance,numberOfTroves:numberOfTroves};};export var validateTroveChange=function validateTroveChange(originalTrove,adjustedTrove,borrowingRate,selectedState){var total=selectedState.total,price=selectedState.price;var change=originalTrove.whatChanged(adjustedTrove,borrowingRate);if(!change){return[undefined,undefined];}// Reapply change to get the exact state the Trove will end up in (which could be slightly\n// different from `edited` due to imprecision).\nvar resultingTrove=originalTrove.apply(change,borrowingRate);var recoveryMode=total.collateralRatioIsBelowCritical(price);var wouldTriggerRecoveryMode=total.subtract(originalTrove).add(resultingTrove).collateralRatioIsBelowCritical(price);var context=_objectSpread(_objectSpread({},selectedState),{},{originalTrove:originalTrove,resultingTrove:resultingTrove,recoveryMode:recoveryMode,wouldTriggerRecoveryMode:wouldTriggerRecoveryMode});if(change.type===\"invalidCreation\"){// Trying to create a Trove with negative net debt\nreturn[undefined,/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"Total debt must be at least\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[LUSD_MINIMUM_DEBT.toString(),\" \",COIN]}),\".\"]})];}var errorDescription=change.type===\"creation\"?validateTroveCreation(change.params,context):change.type===\"closure\"?validateTroveClosure(change.params,context):validateTroveAdjustment(change.params,context);if(errorDescription){return[undefined,errorDescription];}return[change,/*#__PURE__*/_jsx(TroveChangeDescription,{params:change.params})];};var validateTroveCreation=function validateTroveCreation(_ref3,_ref4){var depositCollateral=_ref3.depositCollateral;var resultingTrove=_ref4.resultingTrove,recoveryMode=_ref4.recoveryMode,wouldTriggerRecoveryMode=_ref4.wouldTriggerRecoveryMode,accountBalance=_ref4.accountBalance,price=_ref4.price;if(resultingTrove.debt.lt(LUSD_MINIMUM_DEBT)){return/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"Total debt must be at least\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[LUSD_MINIMUM_DEBT.toString(),\" \",COIN]}),\".\"]});}if(recoveryMode){if(!resultingTrove.isOpenableInRecoveryMode(price)){return/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"You're not allowed to open a Trove with less than \",/*#__PURE__*/_jsx(Amount,{children:ccrPercent}),\" Collateral Ratio during recovery mode. Please increase your Trove's Collateral Ratio.\"]});}}else{if(resultingTrove.collateralRatioIsBelowMinimum(price)){return/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"Collateral ratio must be at least \",/*#__PURE__*/_jsx(Amount,{children:mcrPercent}),\".\"]});}if(wouldTriggerRecoveryMode){return/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"You're not allowed to open a Trove that would cause the Total Collateral Ratio to fall below \",/*#__PURE__*/_jsx(Amount,{children:ccrPercent}),\". Please increase your Trove's Collateral Ratio.\"]});}}if(depositCollateral.gt(accountBalance)){return/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"The amount you're trying to deposit exceeds your balance by\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[depositCollateral.sub(accountBalance).prettify(),\" ETH\"]}),\".\"]});}return null;};var validateTroveAdjustment=function validateTroveAdjustment(_ref5,_ref6){var depositCollateral=_ref5.depositCollateral,withdrawCollateral=_ref5.withdrawCollateral,borrowLUSD=_ref5.borrowLUSD,repayLUSD=_ref5.repayLUSD;var originalTrove=_ref6.originalTrove,resultingTrove=_ref6.resultingTrove,recoveryMode=_ref6.recoveryMode,wouldTriggerRecoveryMode=_ref6.wouldTriggerRecoveryMode,price=_ref6.price,accountBalance=_ref6.accountBalance,lusdBalance=_ref6.lusdBalance;if(recoveryMode){if(withdrawCollateral){return/*#__PURE__*/_jsx(ErrorDescription,{children:\"You're not allowed to withdraw collateral during recovery mode.\"});}if(borrowLUSD){if(resultingTrove.collateralRatioIsBelowCritical(price)){return/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"Your collateral ratio must be at least \",/*#__PURE__*/_jsx(Amount,{children:ccrPercent}),\" to borrow during recovery mode. Please improve your collateral ratio.\"]});}if(resultingTrove.collateralRatio(price).lt(originalTrove.collateralRatio(price))){return/*#__PURE__*/_jsx(ErrorDescription,{children:\"You're not allowed to decrease your collateral ratio during recovery mode.\"});}}}else{if(resultingTrove.collateralRatioIsBelowMinimum(price)){return/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"Collateral ratio must be at least \",/*#__PURE__*/_jsx(Amount,{children:mcrPercent}),\".\"]});}if(wouldTriggerRecoveryMode){return/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"The adjustment you're trying to make would cause the Total Collateral Ratio to fall below\",\" \",/*#__PURE__*/_jsx(Amount,{children:ccrPercent}),\". Please increase your Trove's Collateral Ratio.\"]});}}if(repayLUSD){if(resultingTrove.debt.lt(LUSD_MINIMUM_DEBT)){return/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"Total debt must be at least\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[LUSD_MINIMUM_DEBT.toString(),\" \",COIN]}),\".\"]});}if(repayLUSD.gt(lusdBalance)){return/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"The amount you're trying to repay exceeds your balance by\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[repayLUSD.sub(lusdBalance).prettify(),\" \",COIN]}),\".\"]});}}if(depositCollateral===null||depositCollateral===void 0?void 0:depositCollateral.gt(accountBalance)){return/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"The amount you're trying to deposit exceeds your balance by\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[depositCollateral.sub(accountBalance).prettify(),\" ETH\"]}),\".\"]});}return null;};var validateTroveClosure=function validateTroveClosure(_ref7,_ref8){var repayLUSD=_ref7.repayLUSD;var recoveryMode=_ref8.recoveryMode,wouldTriggerRecoveryMode=_ref8.wouldTriggerRecoveryMode,numberOfTroves=_ref8.numberOfTroves,lusdBalance=_ref8.lusdBalance;if(numberOfTroves===1){return/*#__PURE__*/_jsx(ErrorDescription,{children:\"You're not allowed to close your Trove when there are no other Troves in the system.\"});}if(recoveryMode){return/*#__PURE__*/_jsx(ErrorDescription,{children:\"You're not allowed to close your Trove during recovery mode.\"});}if(repayLUSD===null||repayLUSD===void 0?void 0:repayLUSD.gt(lusdBalance)){return/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"You need\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[repayLUSD.sub(lusdBalance).prettify(),\" \",COIN]}),\" \",\"more to close your Trove.\"]});}if(wouldTriggerRecoveryMode){return/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"You're not allowed to close a Trove if it would cause the Total Collateralization Ratio to fall below \",/*#__PURE__*/_jsx(Amount,{children:ccrPercent}),\". Please wait until the Total Collateral Ratio increases.\"]});}return null;};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/validation/validateTroveChange.tsx"],"names":["LUSD_MINIMUM_DEBT","Percent","MINIMUM_COLLATERAL_RATIO","CRITICAL_COLLATERAL_RATIO","COIN","ActionDescription","Amount","ErrorDescription","mcrPercent","toString","ccrPercent","TroveChangeDescription","params","depositCollateral","borrowLUSD","prettify","repayLUSD","withdrawCollateral","selectForTroveChangeValidation","price","total","accountBalance","lusdBalance","numberOfTroves","validateTroveChange","originalTrove","adjustedTrove","borrowingRate","selectedState","change","whatChanged","undefined","resultingTrove","apply","recoveryMode","collateralRatioIsBelowCritical","wouldTriggerRecoveryMode","subtract","add","context","type","errorDescription","validateTroveCreation","validateTroveClosure","validateTroveAdjustment","debt","lt","isOpenableInRecoveryMode","collateralRatioIsBelowMinimum","gt","sub","collateralRatio"],"mappings":"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","sourcesContent":["import {\n  Decimal,\n  LUSD_MINIMUM_DEBT,\n  Trove,\n  TroveAdjustmentParams,\n  TroveChange,\n  Percent,\n  MINIMUM_COLLATERAL_RATIO,\n  CRITICAL_COLLATERAL_RATIO,\n  LiquityStoreState,\n  TroveClosureParams,\n  TroveCreationParams\n} from \"@liquity/lib-base\";\n\nimport { COIN } from \"../../../strings\";\n\nimport { ActionDescription, Amount } from \"../../ActionDescription\";\nimport { ErrorDescription } from \"../../ErrorDescription\";\n\nconst mcrPercent = new Percent(MINIMUM_COLLATERAL_RATIO).toString(0);\nconst ccrPercent = new Percent(CRITICAL_COLLATERAL_RATIO).toString(0);\n\ntype TroveAdjustmentDescriptionParams = {\n  params: TroveAdjustmentParams<Decimal>;\n};\n\nconst TroveChangeDescription: React.FC<TroveAdjustmentDescriptionParams> = ({ params }) => (\n  <ActionDescription>\n    {params.depositCollateral && params.borrowLUSD ? (\n      <>\n        You will deposit <Amount>{params.depositCollateral.prettify()} ETH</Amount> and receive{\" \"}\n        <Amount>\n          {params.borrowLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    ) : params.repayLUSD && params.withdrawCollateral ? (\n      <>\n        You will pay{\" \"}\n        <Amount>\n          {params.repayLUSD.prettify()} {COIN}\n        </Amount>{\" \"}\n        and receive <Amount>{params.withdrawCollateral.prettify()} ETH</Amount>\n      </>\n    ) : params.depositCollateral && params.repayLUSD ? (\n      <>\n        You will deposit <Amount>{params.depositCollateral.prettify()} ETH</Amount> and pay{\" \"}\n        <Amount>\n          {params.repayLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    ) : params.borrowLUSD && params.withdrawCollateral ? (\n      <>\n        You will receive <Amount>{params.withdrawCollateral.prettify()} ETH</Amount> and{\" \"}\n        <Amount>\n          {params.borrowLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    ) : params.depositCollateral ? (\n      <>\n        You will deposit <Amount>{params.depositCollateral.prettify()} ETH</Amount>\n      </>\n    ) : params.withdrawCollateral ? (\n      <>\n        You will receive <Amount>{params.withdrawCollateral.prettify()} ETH</Amount>\n      </>\n    ) : params.borrowLUSD ? (\n      <>\n        You will receive{\" \"}\n        <Amount>\n          {params.borrowLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    ) : (\n      <>\n        You will pay{\" \"}\n        <Amount>\n          {params.repayLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    )}\n    .\n  </ActionDescription>\n);\n\nexport const selectForTroveChangeValidation = ({\n  price,\n  total,\n  accountBalance,\n  lusdBalance,\n  numberOfTroves\n}: LiquityStoreState) => ({ price, total, accountBalance, lusdBalance, numberOfTroves });\n\ntype TroveChangeValidationSelectedState = ReturnType<typeof selectForTroveChangeValidation>;\n\ninterface TroveChangeValidationContext extends TroveChangeValidationSelectedState {\n  originalTrove: Trove;\n  resultingTrove: Trove;\n  recoveryMode: boolean;\n  wouldTriggerRecoveryMode: boolean;\n}\n\nexport const validateTroveChange = (\n  originalTrove: Trove,\n  adjustedTrove: Trove,\n  borrowingRate: Decimal,\n  selectedState: TroveChangeValidationSelectedState\n): [\n  validChange: Exclude<TroveChange<Decimal>, { type: \"invalidCreation\" }> | undefined,\n  description: JSX.Element | undefined\n] => {\n  const { total, price } = selectedState;\n  const change = originalTrove.whatChanged(adjustedTrove, borrowingRate);\n\n  if (!change) {\n    return [undefined, undefined];\n  }\n\n  // Reapply change to get the exact state the Trove will end up in (which could be slightly\n  // different from `edited` due to imprecision).\n  const resultingTrove = originalTrove.apply(change, borrowingRate);\n  const recoveryMode = total.collateralRatioIsBelowCritical(price);\n  const wouldTriggerRecoveryMode = total\n    .subtract(originalTrove)\n    .add(resultingTrove)\n    .collateralRatioIsBelowCritical(price);\n\n  const context: TroveChangeValidationContext = {\n    ...selectedState,\n    originalTrove,\n    resultingTrove,\n    recoveryMode,\n    wouldTriggerRecoveryMode\n  };\n\n  if (change.type === \"invalidCreation\") {\n    // Trying to create a Trove with negative net debt\n    return [\n      undefined,\n      <ErrorDescription>\n        Total debt must be at least{\" \"}\n        <Amount>\n          {LUSD_MINIMUM_DEBT.toString()} {COIN}\n        </Amount>\n        .\n      </ErrorDescription>\n    ];\n  }\n\n  const errorDescription =\n    change.type === \"creation\"\n      ? validateTroveCreation(change.params, context)\n      : change.type === \"closure\"\n      ? validateTroveClosure(change.params, context)\n      : validateTroveAdjustment(change.params, context);\n\n  if (errorDescription) {\n    return [undefined, errorDescription];\n  }\n\n  return [change, <TroveChangeDescription params={change.params} />];\n};\n\nconst validateTroveCreation = (\n  { depositCollateral }: TroveCreationParams<Decimal>,\n  {\n    resultingTrove,\n    recoveryMode,\n    wouldTriggerRecoveryMode,\n    accountBalance,\n    price\n  }: TroveChangeValidationContext\n): JSX.Element | null => {\n  if (resultingTrove.debt.lt(LUSD_MINIMUM_DEBT)) {\n    return (\n      <ErrorDescription>\n        Total debt must be at least{\" \"}\n        <Amount>\n          {LUSD_MINIMUM_DEBT.toString()} {COIN}\n        </Amount>\n        .\n      </ErrorDescription>\n    );\n  }\n\n  if (recoveryMode) {\n    if (!resultingTrove.isOpenableInRecoveryMode(price)) {\n      return (\n        <ErrorDescription>\n          You're not allowed to open a Trove with less than <Amount>{ccrPercent}</Amount> Collateral\n          Ratio during recovery mode. Please increase your Trove's Collateral Ratio.\n        </ErrorDescription>\n      );\n    }\n  } else {\n    if (resultingTrove.collateralRatioIsBelowMinimum(price)) {\n      return (\n        <ErrorDescription>\n          Collateral ratio must be at least <Amount>{mcrPercent}</Amount>.\n        </ErrorDescription>\n      );\n    }\n\n    if (wouldTriggerRecoveryMode) {\n      return (\n        <ErrorDescription>\n          You're not allowed to open a Trove that would cause the Total Collateral Ratio to fall\n          below <Amount>{ccrPercent}</Amount>. Please increase your Trove's Collateral Ratio.\n        </ErrorDescription>\n      );\n    }\n  }\n\n  if (depositCollateral.gt(accountBalance)) {\n    return (\n      <ErrorDescription>\n        The amount you're trying to deposit exceeds your balance by{\" \"}\n        <Amount>{depositCollateral.sub(accountBalance).prettify()} ETH</Amount>.\n      </ErrorDescription>\n    );\n  }\n\n  return null;\n};\n\nconst validateTroveAdjustment = (\n  { depositCollateral, withdrawCollateral, borrowLUSD, repayLUSD }: TroveAdjustmentParams<Decimal>,\n  {\n    originalTrove,\n    resultingTrove,\n    recoveryMode,\n    wouldTriggerRecoveryMode,\n    price,\n    accountBalance,\n    lusdBalance\n  }: TroveChangeValidationContext\n): JSX.Element | null => {\n  if (recoveryMode) {\n    if (withdrawCollateral) {\n      return (\n        <ErrorDescription>\n          You're not allowed to withdraw collateral during recovery mode.\n        </ErrorDescription>\n      );\n    }\n\n    if (borrowLUSD) {\n      if (resultingTrove.collateralRatioIsBelowCritical(price)) {\n        return (\n          <ErrorDescription>\n            Your collateral ratio must be at least <Amount>{ccrPercent}</Amount> to borrow during\n            recovery mode. Please improve your collateral ratio.\n          </ErrorDescription>\n        );\n      }\n\n      if (resultingTrove.collateralRatio(price).lt(originalTrove.collateralRatio(price))) {\n        return (\n          <ErrorDescription>\n            You're not allowed to decrease your collateral ratio during recovery mode.\n          </ErrorDescription>\n        );\n      }\n    }\n  } else {\n    if (resultingTrove.collateralRatioIsBelowMinimum(price)) {\n      return (\n        <ErrorDescription>\n          Collateral ratio must be at least <Amount>{mcrPercent}</Amount>.\n        </ErrorDescription>\n      );\n    }\n\n    if (wouldTriggerRecoveryMode) {\n      return (\n        <ErrorDescription>\n          The adjustment you're trying to make would cause the Total Collateral Ratio to fall below{\" \"}\n          <Amount>{ccrPercent}</Amount>. Please increase your Trove's Collateral Ratio.\n        </ErrorDescription>\n      );\n    }\n  }\n\n  if (repayLUSD) {\n    if (resultingTrove.debt.lt(LUSD_MINIMUM_DEBT)) {\n      return (\n        <ErrorDescription>\n          Total debt must be at least{\" \"}\n          <Amount>\n            {LUSD_MINIMUM_DEBT.toString()} {COIN}\n          </Amount>\n          .\n        </ErrorDescription>\n      );\n    }\n\n    if (repayLUSD.gt(lusdBalance)) {\n      return (\n        <ErrorDescription>\n          The amount you're trying to repay exceeds your balance by{\" \"}\n          <Amount>\n            {repayLUSD.sub(lusdBalance).prettify()} {COIN}\n          </Amount>\n          .\n        </ErrorDescription>\n      );\n    }\n  }\n\n  if (depositCollateral?.gt(accountBalance)) {\n    return (\n      <ErrorDescription>\n        The amount you're trying to deposit exceeds your balance by{\" \"}\n        <Amount>{depositCollateral.sub(accountBalance).prettify()} ETH</Amount>.\n      </ErrorDescription>\n    );\n  }\n\n  return null;\n};\n\nconst validateTroveClosure = (\n  { repayLUSD }: TroveClosureParams<Decimal>,\n  {\n    recoveryMode,\n    wouldTriggerRecoveryMode,\n    numberOfTroves,\n    lusdBalance\n  }: TroveChangeValidationContext\n): JSX.Element | null => {\n  if (numberOfTroves === 1) {\n    return (\n      <ErrorDescription>\n        You're not allowed to close your Trove when there are no other Troves in the system.\n      </ErrorDescription>\n    );\n  }\n\n  if (recoveryMode) {\n    return (\n      <ErrorDescription>\n        You're not allowed to close your Trove during recovery mode.\n      </ErrorDescription>\n    );\n  }\n\n  if (repayLUSD?.gt(lusdBalance)) {\n    return (\n      <ErrorDescription>\n        You need{\" \"}\n        <Amount>\n          {repayLUSD.sub(lusdBalance).prettify()} {COIN}\n        </Amount>{\" \"}\n        more to close your Trove.\n      </ErrorDescription>\n    );\n  }\n\n  if (wouldTriggerRecoveryMode) {\n    return (\n      <ErrorDescription>\n        You're not allowed to close a Trove if it would cause the Total Collateralization Ratio to\n        fall below <Amount>{ccrPercent}</Amount>. Please wait until the Total Collateral Ratio\n        increases.\n      </ErrorDescription>\n    );\n  }\n\n  return null;\n};\n"]},"metadata":{},"sourceType":"module"}