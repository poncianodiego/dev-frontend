{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LQTYStake = void 0;\n\nconst Decimal_1 = require(\"./Decimal\");\n/**\n * Represents a user's LQTY stake and accrued gains.\n *\n * @remarks\n * Returned by the {@link ReadableLiquity.getLQTYStake | getLQTYStake()} function.\n\n * @public\n */\n\n\nclass LQTYStake {\n  /** @internal */\n  constructor(stakedLQTY = Decimal_1.Decimal.ZERO, collateralGain = Decimal_1.Decimal.ZERO, lusdGain = Decimal_1.Decimal.ZERO) {\n    this.stakedLQTY = stakedLQTY;\n    this.collateralGain = collateralGain;\n    this.lusdGain = lusdGain;\n  }\n\n  get isEmpty() {\n    return this.stakedLQTY.isZero && this.collateralGain.isZero && this.lusdGain.isZero;\n  }\n  /** @internal */\n\n\n  toString() {\n    return `{ stakedLQTY: ${this.stakedLQTY}` + `, collateralGain: ${this.collateralGain}` + `, lusdGain: ${this.lusdGain} }`;\n  }\n  /**\n   * Compare to another instance of `LQTYStake`.\n   */\n\n\n  equals(that) {\n    return this.stakedLQTY.eq(that.stakedLQTY) && this.collateralGain.eq(that.collateralGain) && this.lusdGain.eq(that.lusdGain);\n  }\n  /**\n   * Calculate the difference between this `LQTYStake` and `thatStakedLQTY`.\n   *\n   * @returns An object representing the change, or `undefined` if the staked amounts are equal.\n   */\n\n\n  whatChanged(thatStakedLQTY) {\n    thatStakedLQTY = Decimal_1.Decimal.from(thatStakedLQTY);\n\n    if (thatStakedLQTY.lt(this.stakedLQTY)) {\n      return {\n        unstakeLQTY: this.stakedLQTY.sub(thatStakedLQTY),\n        unstakeAllLQTY: thatStakedLQTY.isZero\n      };\n    }\n\n    if (thatStakedLQTY.gt(this.stakedLQTY)) {\n      return {\n        stakeLQTY: thatStakedLQTY.sub(this.stakedLQTY)\n      };\n    }\n  }\n  /**\n   * Apply a {@link LQTYStakeChange} to this `LQTYStake`.\n   *\n   * @returns The new staked LQTY amount.\n   */\n\n\n  apply(change) {\n    if (!change) {\n      return this.stakedLQTY;\n    }\n\n    if (change.unstakeLQTY !== undefined) {\n      return change.unstakeAllLQTY || this.stakedLQTY.lte(change.unstakeLQTY) ? Decimal_1.Decimal.ZERO : this.stakedLQTY.sub(change.unstakeLQTY);\n    } else {\n      return this.stakedLQTY.add(change.stakeLQTY);\n    }\n  }\n\n}\n\nexports.LQTYStake = LQTYStake;","map":{"version":3,"sources":["../../src/LQTYStake.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAWA;;;;;;;AAOG;;;AACH,MAAa,SAAb,CAAsB;AAUpB;AACA,EAAA,WAAA,CAAY,UAAU,GAAG,SAAA,CAAA,OAAA,CAAQ,IAAjC,EAAuC,cAAc,GAAG,SAAA,CAAA,OAAA,CAAQ,IAAhE,EAAsE,QAAQ,GAAG,SAAA,CAAA,OAAA,CAAQ,IAAzF,EAA6F;AAC3F,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,cAAL,GAAsB,cAAtB;AACA,SAAK,QAAL,GAAgB,QAAhB;AACD;;AAEU,MAAP,OAAO,GAAA;AACT,WAAO,KAAK,UAAL,CAAgB,MAAhB,IAA0B,KAAK,cAAL,CAAoB,MAA9C,IAAwD,KAAK,QAAL,CAAc,MAA7E;AACD;AAED;;;AACA,EAAA,QAAQ,GAAA;AACN,WACE,iBAAiB,KAAK,UAAU,EAAhC,GACA,qBAAqB,KAAK,cAAc,EADxC,GAEA,eAAe,KAAK,QAAQ,IAH9B;AAKD;AAED;;AAEG;;;AACH,EAAA,MAAM,CAAC,IAAD,EAAgB;AACpB,WACE,KAAK,UAAL,CAAgB,EAAhB,CAAmB,IAAI,CAAC,UAAxB,KACA,KAAK,cAAL,CAAoB,EAApB,CAAuB,IAAI,CAAC,cAA5B,CADA,IAEA,KAAK,QAAL,CAAc,EAAd,CAAiB,IAAI,CAAC,QAAtB,CAHF;AAKD;AAED;;;;AAIG;;;AACH,EAAA,WAAW,CAAC,cAAD,EAA2B;AACpC,IAAA,cAAc,GAAG,SAAA,CAAA,OAAA,CAAQ,IAAR,CAAa,cAAb,CAAjB;;AAEA,QAAI,cAAc,CAAC,EAAf,CAAkB,KAAK,UAAvB,CAAJ,EAAwC;AACtC,aAAO;AACL,QAAA,WAAW,EAAE,KAAK,UAAL,CAAgB,GAAhB,CAAoB,cAApB,CADR;AAEL,QAAA,cAAc,EAAE,cAAc,CAAC;AAF1B,OAAP;AAID;;AAED,QAAI,cAAc,CAAC,EAAf,CAAkB,KAAK,UAAvB,CAAJ,EAAwC;AACtC,aAAO;AAAE,QAAA,SAAS,EAAE,cAAc,CAAC,GAAf,CAAmB,KAAK,UAAxB;AAAb,OAAP;AACD;AACF;AAED;;;;AAIG;;;AACH,EAAA,KAAK,CAAC,MAAD,EAAgD;AACnD,QAAI,CAAC,MAAL,EAAa;AACX,aAAO,KAAK,UAAZ;AACD;;AAED,QAAI,MAAM,CAAC,WAAP,KAAuB,SAA3B,EAAsC;AACpC,aAAO,MAAM,CAAC,cAAP,IAAyB,KAAK,UAAL,CAAgB,GAAhB,CAAoB,MAAM,CAAC,WAA3B,CAAzB,GACH,SAAA,CAAA,OAAA,CAAQ,IADL,GAEH,KAAK,UAAL,CAAgB,GAAhB,CAAoB,MAAM,CAAC,WAA3B,CAFJ;AAGD,KAJD,MAIO;AACL,aAAO,KAAK,UAAL,CAAgB,GAAhB,CAAoB,MAAM,CAAC,SAA3B,CAAP;AACD;AACF;;AA9EmB;;AAAtB,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LQTYStake = void 0;\nconst Decimal_1 = require(\"./Decimal\");\n/**\n * Represents a user's LQTY stake and accrued gains.\n *\n * @remarks\n * Returned by the {@link ReadableLiquity.getLQTYStake | getLQTYStake()} function.\n\n * @public\n */\nclass LQTYStake {\n    /** @internal */\n    constructor(stakedLQTY = Decimal_1.Decimal.ZERO, collateralGain = Decimal_1.Decimal.ZERO, lusdGain = Decimal_1.Decimal.ZERO) {\n        this.stakedLQTY = stakedLQTY;\n        this.collateralGain = collateralGain;\n        this.lusdGain = lusdGain;\n    }\n    get isEmpty() {\n        return this.stakedLQTY.isZero && this.collateralGain.isZero && this.lusdGain.isZero;\n    }\n    /** @internal */\n    toString() {\n        return (`{ stakedLQTY: ${this.stakedLQTY}` +\n            `, collateralGain: ${this.collateralGain}` +\n            `, lusdGain: ${this.lusdGain} }`);\n    }\n    /**\n     * Compare to another instance of `LQTYStake`.\n     */\n    equals(that) {\n        return (this.stakedLQTY.eq(that.stakedLQTY) &&\n            this.collateralGain.eq(that.collateralGain) &&\n            this.lusdGain.eq(that.lusdGain));\n    }\n    /**\n     * Calculate the difference between this `LQTYStake` and `thatStakedLQTY`.\n     *\n     * @returns An object representing the change, or `undefined` if the staked amounts are equal.\n     */\n    whatChanged(thatStakedLQTY) {\n        thatStakedLQTY = Decimal_1.Decimal.from(thatStakedLQTY);\n        if (thatStakedLQTY.lt(this.stakedLQTY)) {\n            return {\n                unstakeLQTY: this.stakedLQTY.sub(thatStakedLQTY),\n                unstakeAllLQTY: thatStakedLQTY.isZero\n            };\n        }\n        if (thatStakedLQTY.gt(this.stakedLQTY)) {\n            return { stakeLQTY: thatStakedLQTY.sub(this.stakedLQTY) };\n        }\n    }\n    /**\n     * Apply a {@link LQTYStakeChange} to this `LQTYStake`.\n     *\n     * @returns The new staked LQTY amount.\n     */\n    apply(change) {\n        if (!change) {\n            return this.stakedLQTY;\n        }\n        if (change.unstakeLQTY !== undefined) {\n            return change.unstakeAllLQTY || this.stakedLQTY.lte(change.unstakeLQTY)\n                ? Decimal_1.Decimal.ZERO\n                : this.stakedLQTY.sub(change.unstakeLQTY);\n        }\n        else {\n            return this.stakedLQTY.add(change.stakeLQTY);\n        }\n    }\n}\nexports.LQTYStake = LQTYStake;\n//# sourceMappingURL=LQTYStake.js.map"]},"metadata":{},"sourceType":"script"}