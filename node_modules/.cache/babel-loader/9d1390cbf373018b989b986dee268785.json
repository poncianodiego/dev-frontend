{"ast":null,"code":"import React,{useEffect}from\"react\";import{Button}from\"theme-ui\";import{useLiquity}from\"../../../hooks/LiquityContext\";import{Transaction,useMyTransactionState}from\"../../Transaction\";import{useValidationState}from\"../context/useValidationState\";import{useFarmView}from\"../context/FarmViewContext\";import{jsx as _jsx}from\"react/jsx-runtime\";var transactionId=\"farm-confirm\";export var Confirm=function Confirm(_ref){var amount=_ref.amount;var _useFarmView=useFarmView(),dispatchEvent=_useFarmView.dispatchEvent;var _useLiquity=useLiquity(),liquity=_useLiquity.liquity.send;var transactionState=useMyTransactionState(transactionId);var _useValidationState=useValidationState(amount),isValid=_useValidationState.isValid,isWithdrawing=_useValidationState.isWithdrawing,amountChanged=_useValidationState.amountChanged;var transactionAction=isWithdrawing?liquity.unstakeUniTokens.bind(liquity,amountChanged):liquity.stakeUniTokens.bind(liquity,amountChanged);var shouldDisable=amountChanged.isZero||!isValid;useEffect(function(){if(transactionState.type===\"confirmedOneShot\"){dispatchEvent(\"STAKE_CONFIRMED\");}},[transactionState.type,dispatchEvent]);return/*#__PURE__*/_jsx(Transaction,{id:transactionId,send:transactionAction,showFailure:\"asTooltip\",tooltipPlacement:\"bottom\",children:/*#__PURE__*/_jsx(Button,{disabled:shouldDisable,children:\"Confirm\"})});};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/views/Confirm.tsx"],"names":["React","useEffect","Button","useLiquity","Transaction","useMyTransactionState","useValidationState","useFarmView","transactionId","Confirm","amount","dispatchEvent","liquity","send","transactionState","isValid","isWithdrawing","amountChanged","transactionAction","unstakeUniTokens","bind","stakeUniTokens","shouldDisable","isZero","type"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,MAAT,KAAuB,UAAvB,CAEA,OAASC,UAAT,KAA2B,+BAA3B,CACA,OAASC,WAAT,CAAsBC,qBAAtB,KAAmD,mBAAnD,CACA,OAASC,kBAAT,KAAmC,+BAAnC,CACA,OAASC,WAAT,KAA4B,4BAA5B,C,2CAMA,GAAMC,CAAAA,aAAa,CAAG,cAAtB,CAEA,MAAO,IAAMC,CAAAA,OAA+B,CAAG,QAAlCA,CAAAA,OAAkC,MAAgB,IAAbC,CAAAA,MAAa,MAAbA,MAAa,kBACnCH,WAAW,EADwB,CACrDI,aADqD,cACrDA,aADqD,iBAIzDR,UAAU,EAJ+C,CAG1CS,OAH0C,aAG3DA,OAH2D,CAGhDC,IAHgD,CAM7D,GAAMC,CAAAA,gBAAgB,CAAGT,qBAAqB,CAACG,aAAD,CAA9C,CAN6D,wBAOXF,kBAAkB,CAACI,MAAD,CAPP,CAOrDK,OAPqD,qBAOrDA,OAPqD,CAO5CC,aAP4C,qBAO5CA,aAP4C,CAO7BC,aAP6B,qBAO7BA,aAP6B,CAS7D,GAAMC,CAAAA,iBAAiB,CAAGF,aAAa,CACnCJ,OAAO,CAACO,gBAAR,CAAyBC,IAAzB,CAA8BR,OAA9B,CAAuCK,aAAvC,CADmC,CAEnCL,OAAO,CAACS,cAAR,CAAuBD,IAAvB,CAA4BR,OAA5B,CAAqCK,aAArC,CAFJ,CAIA,GAAMK,CAAAA,aAAa,CAAGL,aAAa,CAACM,MAAd,EAAwB,CAACR,OAA/C,CAEAd,SAAS,CAAC,UAAM,CACd,GAAIa,gBAAgB,CAACU,IAAjB,GAA0B,kBAA9B,CAAkD,CAChDb,aAAa,CAAC,iBAAD,CAAb,CACD,CACF,CAJQ,CAIN,CAACG,gBAAgB,CAACU,IAAlB,CAAwBb,aAAxB,CAJM,CAAT,CAMA,mBACE,KAAC,WAAD,EACE,EAAE,CAAEH,aADN,CAEE,IAAI,CAAEU,iBAFR,CAGE,WAAW,CAAC,WAHd,CAIE,gBAAgB,CAAC,QAJnB,uBAME,KAAC,MAAD,EAAQ,QAAQ,CAAEI,aAAlB,qBANF,EADF,CAUD,CA/BM","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Button } from \"theme-ui\";\nimport { Decimal } from \"@liquity/lib-base\";\nimport { useLiquity } from \"../../../hooks/LiquityContext\";\nimport { Transaction, useMyTransactionState } from \"../../Transaction\";\nimport { useValidationState } from \"../context/useValidationState\";\nimport { useFarmView } from \"../context/FarmViewContext\";\n\ntype ConfirmProps = {\n  amount: Decimal;\n};\n\nconst transactionId = \"farm-confirm\";\n\nexport const Confirm: React.FC<ConfirmProps> = ({ amount }) => {\n  const { dispatchEvent } = useFarmView();\n  const {\n    liquity: { send: liquity }\n  } = useLiquity();\n\n  const transactionState = useMyTransactionState(transactionId);\n  const { isValid, isWithdrawing, amountChanged } = useValidationState(amount);\n\n  const transactionAction = isWithdrawing\n    ? liquity.unstakeUniTokens.bind(liquity, amountChanged)\n    : liquity.stakeUniTokens.bind(liquity, amountChanged);\n\n  const shouldDisable = amountChanged.isZero || !isValid;\n\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"STAKE_CONFIRMED\");\n    }\n  }, [transactionState.type, dispatchEvent]);\n\n  return (\n    <Transaction\n      id={transactionId}\n      send={transactionAction}\n      showFailure=\"asTooltip\"\n      tooltipPlacement=\"bottom\"\n    >\n      <Button disabled={shouldDisable}>Confirm</Button>\n    </Transaction>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}