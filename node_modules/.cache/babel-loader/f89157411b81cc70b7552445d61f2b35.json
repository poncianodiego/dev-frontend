{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _objectSpread = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _slicedToArray = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logsToString = void 0;\n\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\n\nvar constants_1 = require(\"@ethersproject/constants\");\n\nvar lib_base_1 = require(\"@liquity/lib-base\");\n\nvar interfaceLookupFrom = function interfaceLookupFrom(contractLookup) {\n  return Object.fromEntries(Object.entries(contractLookup).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        contract = _ref2[1];\n\n    return [contract.address, contract.interface];\n  }));\n};\n\nvar nameLookupFrom = function nameLookupFrom(contractLookup) {\n  return Object.fromEntries(Object.entries(contractLookup).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        name = _ref4[0],\n        contract = _ref4[1];\n\n    return [contract.address, name];\n  }));\n};\n\nvar tryToParseLog = function tryToParseLog(log, interfaceLookup) {\n  var address = log.address;\n\n  if (address in interfaceLookup) {\n    try {\n      return {\n        address: address,\n        logDescription: interfaceLookup[address].parseLog(log)\n      };\n    } catch (err) {\n      console.warn(\"Failed to parse log:\");\n      console.warn(log);\n      console.warn(\"Caught:\");\n      console.warn(err);\n    }\n  }\n};\n\nvar parseLogs = function parseLogs(logs, interfaceLookup) {\n  var parsedLogs = [];\n  var unparsedLogs = [];\n  logs.forEach(function (log) {\n    var parsedLog = tryToParseLog(log, interfaceLookup);\n\n    if (parsedLog) {\n      parsedLogs.push(parsedLog);\n    } else {\n      unparsedLogs.push(log);\n    }\n  });\n  return [parsedLogs, unparsedLogs];\n};\n\nvar VERY_BIG = bignumber_1.BigNumber.from(10).pow(9);\n\nvar prettify = function prettify(arg, nameLookup) {\n  if (bignumber_1.BigNumber.isBigNumber(arg)) {\n    if (arg.gte(VERY_BIG)) {\n      return \"\".concat(lib_base_1.Decimal.fromBigNumberString(arg.toHexString()), \"e18\");\n    } else {\n      return arg.toString();\n    }\n  } else if (typeof arg === \"string\") {\n    return arg === constants_1.AddressZero ? \"address(0)\" : nameLookup && arg in nameLookup ? nameLookup[arg] : arg;\n  } else {\n    return String(arg);\n  }\n};\n\nvar logDescriptionToString = function logDescriptionToString(logDescription, nameLookup) {\n  var prettyEntries = Object.entries(logDescription.args).filter(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 1),\n        key = _ref6[0];\n\n    return !key.match(/^[0-9]/);\n  }).map(function (_ref7) {\n    var _ref8 = _slicedToArray(_ref7, 2),\n        key = _ref8[0],\n        value = _ref8[1];\n\n    return \"\".concat(key, \": \").concat(prettify(value, nameLookup));\n  });\n  return \"\".concat(logDescription.name, \"({ \").concat(prettyEntries.join(\", \"), \" })\");\n};\n\nvar logsToString = function logsToString(receipt, contracts) {\n  var contractLookup = contracts;\n  var interfaceLookup = interfaceLookupFrom(contractLookup);\n  var contractNameLookup = nameLookupFrom(contractLookup);\n\n  var nameLookup = _objectSpread(_defineProperty({}, receipt.from, \"user\"), contractNameLookup);\n\n  var _parseLogs = parseLogs(receipt.logs, interfaceLookup),\n      _parseLogs2 = _slicedToArray(_parseLogs, 2),\n      parsedLogs = _parseLogs2[0],\n      unparsedLogs = _parseLogs2[1];\n\n  if (unparsedLogs.length > 0) {\n    console.warn(\"Warning: not all logs were parsed. Unparsed logs:\");\n    console.warn(unparsedLogs);\n  }\n\n  if (parsedLogs.length > 0) {\n    return \"Logs of tx \".concat(receipt.transactionHash, \":\\n\") + parsedLogs.map(function (_ref9) {\n      var address = _ref9.address,\n          logDescription = _ref9.logDescription;\n      return \"  \".concat(contractNameLookup[address], \".\").concat(logDescriptionToString(logDescription, nameLookup));\n    }).join(\"\\n\");\n  } else {\n    return \"No logs were parsed in tx \".concat(receipt.transactionHash);\n  }\n};\n\nexports.logsToString = logsToString;","map":{"version":3,"sources":["../../src/parseLogs.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logsToString = void 0;\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\nconst constants_1 = require(\"@ethersproject/constants\");\nconst lib_base_1 = require(\"@liquity/lib-base\");\nconst interfaceLookupFrom = (contractLookup) => {\n    return Object.fromEntries(Object.entries(contractLookup).map(([, contract]) => [contract.address, contract.interface]));\n};\nconst nameLookupFrom = (contractLookup) => {\n    return Object.fromEntries(Object.entries(contractLookup).map(([name, contract]) => [contract.address, name]));\n};\nconst tryToParseLog = (log, interfaceLookup) => {\n    const { address } = log;\n    if (address in interfaceLookup) {\n        try {\n            return { address, logDescription: interfaceLookup[address].parseLog(log) };\n        }\n        catch (err) {\n            console.warn(\"Failed to parse log:\");\n            console.warn(log);\n            console.warn(\"Caught:\");\n            console.warn(err);\n        }\n    }\n};\nconst parseLogs = (logs, interfaceLookup) => {\n    const parsedLogs = [];\n    const unparsedLogs = [];\n    logs.forEach(log => {\n        const parsedLog = tryToParseLog(log, interfaceLookup);\n        if (parsedLog) {\n            parsedLogs.push(parsedLog);\n        }\n        else {\n            unparsedLogs.push(log);\n        }\n    });\n    return [parsedLogs, unparsedLogs];\n};\nconst VERY_BIG = bignumber_1.BigNumber.from(10).pow(9);\nconst prettify = (arg, nameLookup) => {\n    if (bignumber_1.BigNumber.isBigNumber(arg)) {\n        if (arg.gte(VERY_BIG)) {\n            return `${lib_base_1.Decimal.fromBigNumberString(arg.toHexString())}e18`;\n        }\n        else {\n            return arg.toString();\n        }\n    }\n    else if (typeof arg === \"string\") {\n        return arg === constants_1.AddressZero\n            ? \"address(0)\"\n            : nameLookup && arg in nameLookup\n                ? nameLookup[arg]\n                : arg;\n    }\n    else {\n        return String(arg);\n    }\n};\nconst logDescriptionToString = (logDescription, nameLookup) => {\n    const prettyEntries = Object.entries(logDescription.args)\n        .filter(([key]) => !key.match(/^[0-9]/))\n        .map(([key, value]) => `${key}: ${prettify(value, nameLookup)}`);\n    return `${logDescription.name}({ ${prettyEntries.join(\", \")} })`;\n};\nconst logsToString = (receipt, contracts) => {\n    const contractLookup = contracts;\n    const interfaceLookup = interfaceLookupFrom(contractLookup);\n    const contractNameLookup = nameLookupFrom(contractLookup);\n    const nameLookup = {\n        [receipt.from]: \"user\",\n        ...contractNameLookup\n    };\n    const [parsedLogs, unparsedLogs] = parseLogs(receipt.logs, interfaceLookup);\n    if (unparsedLogs.length > 0) {\n        console.warn(\"Warning: not all logs were parsed. Unparsed logs:\");\n        console.warn(unparsedLogs);\n    }\n    if (parsedLogs.length > 0) {\n        return (`Logs of tx ${receipt.transactionHash}:\\n` +\n            parsedLogs\n                .map(({ address, logDescription }) => `  ${contractNameLookup[address]}.${logDescriptionToString(logDescription, nameLookup)}`)\n                .join(\"\\n\"));\n    }\n    else {\n        return `No logs were parsed in tx ${receipt.transactionHash}`;\n    }\n};\nexports.logsToString = logsToString;\n//# sourceMappingURL=parseLogs.js.map"]},"metadata":{},"sourceType":"script"}