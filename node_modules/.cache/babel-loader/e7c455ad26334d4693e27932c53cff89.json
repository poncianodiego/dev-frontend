{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/TroveManager.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect } from \"react\";\nimport { Flex, Button } from \"theme-ui\";\nimport { Decimal, Trove, LUSD_MINIMUM_DEBT } from \"@liquity/lib-base\";\nimport { useLiquityReducer, useLiquitySelector } from \"@liquity/lib-react\";\nimport { ActionDescription } from \"../ActionDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\nimport { TroveEditor } from \"./TroveEditor\";\nimport { TroveAction } from \"./TroveAction\";\nimport { useTroveView } from \"./context/TroveViewContext\";\nimport { selectForTroveChangeValidation, validateTroveChange } from \"./validation/validateTroveChange\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst init = ({\n  trove\n}) => ({\n  original: trove,\n  edited: new Trove(trove.collateral, trove.debt),\n  changePending: false,\n  debtDirty: false,\n  addedMinimumDebt: false\n});\n\nconst reduceWith = action => state => reduce(state, action);\n\nconst addMinimumDebt = reduceWith({\n  type: \"addMinimumDebt\"\n});\nconst removeMinimumDebt = reduceWith({\n  type: \"removeMinimumDebt\"\n});\nconst finishChange = reduceWith({\n  type: \"finishChange\"\n});\nconst revert = reduceWith({\n  type: \"revert\"\n});\n\nconst reduce = (state, action) => {\n  // console.log(state);\n  // console.log(action);\n  const {\n    original,\n    edited,\n    changePending,\n    debtDirty,\n    addedMinimumDebt\n  } = state;\n\n  switch (action.type) {\n    case \"startChange\":\n      {\n        console.log(\"starting change\");\n        return { ...state,\n          changePending: true\n        };\n      }\n\n    case \"finishChange\":\n      return { ...state,\n        changePending: false\n      };\n\n    case \"setCollateral\":\n      {\n        const newCollateral = Decimal.from(action.newValue);\n        const newState = { ...state,\n          edited: edited.setCollateral(newCollateral)\n        };\n\n        if (!debtDirty) {\n          if (edited.isEmpty && newCollateral.nonZero) {\n            return addMinimumDebt(newState);\n          }\n\n          if (addedMinimumDebt && newCollateral.isZero) {\n            return removeMinimumDebt(newState);\n          }\n        }\n\n        return newState;\n      }\n\n    case \"setDebt\":\n      return { ...state,\n        edited: edited.setDebt(action.newValue),\n        debtDirty: true\n      };\n\n    case \"addMinimumDebt\":\n      return { ...state,\n        edited: edited.setDebt(LUSD_MINIMUM_DEBT),\n        addedMinimumDebt: true\n      };\n\n    case \"removeMinimumDebt\":\n      return { ...state,\n        edited: edited.setDebt(0),\n        addedMinimumDebt: false\n      };\n\n    case \"revert\":\n      return { ...state,\n        edited: new Trove(original.collateral, original.debt),\n        debtDirty: false,\n        addedMinimumDebt: false\n      };\n\n    case \"updateStore\":\n      {\n        const {\n          newState: {\n            trove\n          },\n          stateChange: {\n            troveBeforeRedistribution: changeCommitted\n          }\n        } = action;\n        const newState = { ...state,\n          original: trove\n        };\n\n        if (changePending && changeCommitted) {\n          return finishChange(revert(newState));\n        }\n\n        const change = original.whatChanged(edited, 0);\n\n        if ((change === null || change === void 0 ? void 0 : change.type) === \"creation\" && !trove.isEmpty || (change === null || change === void 0 ? void 0 : change.type) === \"closure\" && trove.isEmpty) {\n          return revert(newState);\n        }\n\n        return { ...newState,\n          edited: trove.apply(change, 0)\n        };\n      }\n  }\n};\n\nconst feeFrom = (original, edited, borrowingRate) => {\n  const change = original.whatChanged(edited, borrowingRate);\n\n  if (change && change.type !== \"invalidCreation\" && change.params.borrowLUSD) {\n    return change.params.borrowLUSD.mul(borrowingRate);\n  } else {\n    return Decimal.ZERO;\n  }\n};\n\nconst select = state => ({\n  fees: state.fees,\n  validationContext: selectForTroveChangeValidation(state)\n});\n\nconst transactionIdPrefix = \"trove-\";\nconst transactionIdMatcher = new RegExp(`^${transactionIdPrefix}`);\nexport const TroveManager = ({\n  collateral,\n  debt\n}) => {\n  _s();\n\n  const [{\n    original,\n    edited,\n    changePending\n  }, dispatch] = useLiquityReducer(reduce, init);\n  const {\n    fees,\n    validationContext\n  } = useLiquitySelector(select);\n  useEffect(() => {\n    if (collateral !== undefined) {\n      dispatch({\n        type: \"setCollateral\",\n        newValue: collateral\n      });\n    }\n\n    if (debt !== undefined) {\n      dispatch({\n        type: \"setDebt\",\n        newValue: debt\n      });\n    }\n  }, [collateral, debt, dispatch]);\n  const borrowingRate = fees.borrowingRate();\n  const maxBorrowingRate = borrowingRate.add(0.005); // TODO slippage tolerance\n\n  const [validChange, description] = validateTroveChange(original, edited, borrowingRate, validationContext);\n  const {\n    dispatchEvent\n  } = useTroveView();\n  const handleCancel = useCallback(() => {\n    dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n  const openingNewTrove = original.isEmpty;\n  const myTransactionState = useMyTransactionState(transactionIdMatcher);\n  useEffect(() => {\n    if (myTransactionState.type === \"waitingForApproval\" || myTransactionState.type === \"waitingForConfirmation\") {\n      dispatch({\n        type: \"startChange\"\n      });\n    } else if (myTransactionState.type === \"failed\" || myTransactionState.type === \"cancelled\") {\n      dispatch({\n        type: \"finishChange\"\n      });\n    } else if (myTransactionState.type === \"confirmedOneShot\") {\n      if (myTransactionState.id === `${transactionIdPrefix}closure`) {\n        dispatchEvent(\"TROVE_CLOSED\");\n      } else {\n        dispatchEvent(\"TROVE_ADJUSTED\");\n      }\n    }\n  }, [myTransactionState, dispatch, dispatchEvent]);\n  return /*#__PURE__*/_jsxDEV(TroveEditor, {\n    original: original,\n    edited: edited,\n    fee: feeFrom(original, edited, borrowingRate),\n    borrowingRate: borrowingRate,\n    changePending: changePending,\n    dispatch: dispatch,\n    children: [description !== null && description !== void 0 ? description : openingNewTrove ? /*#__PURE__*/_jsxDEV(ActionDescription, {\n      children: \"Start by entering the amount of ETH you'd like to deposit as collateral.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(ActionDescription, {\n      children: \"Adjust your Trove by modifying its collateral, debt, or both.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      variant: \"layout.actions\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"cancel\",\n        onClick: handleCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), validChange ? /*#__PURE__*/_jsxDEV(TroveAction, {\n        transactionId: `${transactionIdPrefix}${validChange.type}`,\n        change: validChange,\n        maxBorrowingRate: maxBorrowingRate,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        disabled: true,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TroveManager, \"LiDpHtnVUBhn4pKdG5ywv0kUYjA=\", false, function () {\n  return [useLiquityReducer, useLiquitySelector, useTroveView, useMyTransactionState];\n});\n\n_c = TroveManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"TroveManager\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/TroveManager.tsx"],"names":["useCallback","useEffect","Flex","Button","Decimal","Trove","LUSD_MINIMUM_DEBT","useLiquityReducer","useLiquitySelector","ActionDescription","useMyTransactionState","TroveEditor","TroveAction","useTroveView","selectForTroveChangeValidation","validateTroveChange","init","trove","original","edited","collateral","debt","changePending","debtDirty","addedMinimumDebt","reduceWith","action","state","reduce","addMinimumDebt","type","removeMinimumDebt","finishChange","revert","console","log","newCollateral","from","newValue","newState","setCollateral","isEmpty","nonZero","isZero","setDebt","stateChange","troveBeforeRedistribution","changeCommitted","change","whatChanged","apply","feeFrom","borrowingRate","params","borrowLUSD","mul","ZERO","select","fees","validationContext","transactionIdPrefix","transactionIdMatcher","RegExp","TroveManager","dispatch","undefined","maxBorrowingRate","add","validChange","description","dispatchEvent","handleCancel","openingNewTrove","myTransactionState","id"],"mappings":"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","sourcesContent":["import { useCallback, useEffect } from \"react\";\nimport { Flex, Button } from \"theme-ui\";\n\nimport { LiquityStoreState, Decimal, Trove, Decimalish, LUSD_MINIMUM_DEBT } from \"@liquity/lib-base\";\n\nimport { LiquityStoreUpdate, useLiquityReducer, useLiquitySelector } from \"@liquity/lib-react\";\n\nimport { ActionDescription } from \"../ActionDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\n\nimport { TroveEditor } from \"./TroveEditor\";\nimport { TroveAction } from \"./TroveAction\";\nimport { useTroveView } from \"./context/TroveViewContext\";\n\nimport {\n  selectForTroveChangeValidation,\n  validateTroveChange\n} from \"./validation/validateTroveChange\";\n\nconst init = ({ trove }: LiquityStoreState) => ({\n  original: trove,\n  edited: new Trove(trove.collateral, trove.debt),\n  changePending: false,\n  debtDirty: false,\n  addedMinimumDebt: false\n});\n\ntype TroveManagerState = ReturnType<typeof init>;\ntype TroveManagerAction =\n  | LiquityStoreUpdate\n  | { type: \"startChange\" | \"finishChange\" | \"revert\" | \"addMinimumDebt\" | \"removeMinimumDebt\" }\n  | { type: \"setCollateral\" | \"setDebt\"; newValue: Decimalish };\n\nconst reduceWith = (action: TroveManagerAction) => (state: TroveManagerState): TroveManagerState =>\n  reduce(state, action);\n\nconst addMinimumDebt = reduceWith({ type: \"addMinimumDebt\" });\nconst removeMinimumDebt = reduceWith({ type: \"removeMinimumDebt\" });\nconst finishChange = reduceWith({ type: \"finishChange\" });\nconst revert = reduceWith({ type: \"revert\" });\n\nconst reduce = (state: TroveManagerState, action: TroveManagerAction): TroveManagerState => {\n  // console.log(state);\n  // console.log(action);\n\n  const { original, edited, changePending, debtDirty, addedMinimumDebt } = state;\n\n  switch (action.type) {\n    case \"startChange\": {\n      console.log(\"starting change\");\n      return { ...state, changePending: true };\n    }\n\n    case \"finishChange\":\n      return { ...state, changePending: false };\n\n    case \"setCollateral\": {\n      const newCollateral = Decimal.from(action.newValue);\n\n      const newState = {\n        ...state,\n        edited: edited.setCollateral(newCollateral)\n      };\n\n      if (!debtDirty) {\n        if (edited.isEmpty && newCollateral.nonZero) {\n          return addMinimumDebt(newState);\n        }\n        if (addedMinimumDebt && newCollateral.isZero) {\n          return removeMinimumDebt(newState);\n        }\n      }\n\n      return newState;\n    }\n\n    case \"setDebt\":\n      return {\n        ...state,\n        edited: edited.setDebt(action.newValue),\n        debtDirty: true\n      };\n\n    case \"addMinimumDebt\":\n      return {\n        ...state,\n        edited: edited.setDebt(LUSD_MINIMUM_DEBT),\n        addedMinimumDebt: true\n      };\n\n    case \"removeMinimumDebt\":\n      return {\n        ...state,\n        edited: edited.setDebt(0),\n        addedMinimumDebt: false\n      };\n\n    case \"revert\":\n      return {\n        ...state,\n        edited: new Trove(original.collateral, original.debt),\n        debtDirty: false,\n        addedMinimumDebt: false\n      };\n\n    case \"updateStore\": {\n      const {\n        newState: { trove },\n        stateChange: { troveBeforeRedistribution: changeCommitted }\n      } = action;\n\n      const newState = {\n        ...state,\n        original: trove\n      };\n\n      if (changePending && changeCommitted) {\n        return finishChange(revert(newState));\n      }\n\n      const change = original.whatChanged(edited, 0);\n\n      if (\n        (change?.type === \"creation\" && !trove.isEmpty) ||\n        (change?.type === \"closure\" && trove.isEmpty)\n      ) {\n        return revert(newState);\n      }\n\n      return { ...newState, edited: trove.apply(change, 0) };\n    }\n  }\n};\n\nconst feeFrom = (original: Trove, edited: Trove, borrowingRate: Decimal): Decimal => {\n  const change = original.whatChanged(edited, borrowingRate);\n\n  if (change && change.type !== \"invalidCreation\" && change.params.borrowLUSD) {\n    return change.params.borrowLUSD.mul(borrowingRate);\n  } else {\n    return Decimal.ZERO;\n  }\n};\n\nconst select = (state: LiquityStoreState) => ({\n  fees: state.fees,\n  validationContext: selectForTroveChangeValidation(state)\n});\n\nconst transactionIdPrefix = \"trove-\";\nconst transactionIdMatcher = new RegExp(`^${transactionIdPrefix}`);\n\ntype TroveManagerProps = {\n  collateral?: Decimalish;\n  debt?: Decimalish;\n};\n\nexport const TroveManager: React.FC<TroveManagerProps> = ({ collateral, debt }) => {\n  const [{ original, edited, changePending }, dispatch] = useLiquityReducer(reduce, init);\n  const { fees, validationContext } = useLiquitySelector(select);\n\n  useEffect(() => {\n    if (collateral !== undefined) {\n      dispatch({ type: \"setCollateral\", newValue: collateral });\n    }\n    if (debt !== undefined) {\n      dispatch({ type: \"setDebt\", newValue: debt });\n    }\n  }, [collateral, debt, dispatch]);\n\n  const borrowingRate = fees.borrowingRate();\n  const maxBorrowingRate = borrowingRate.add(0.005); // TODO slippage tolerance\n\n  const [validChange, description] = validateTroveChange(\n    original,\n    edited,\n    borrowingRate,\n    validationContext\n  );\n\n  const { dispatchEvent } = useTroveView();\n\n  const handleCancel = useCallback(() => {\n    dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n\n  const openingNewTrove = original.isEmpty;\n\n  const myTransactionState = useMyTransactionState(transactionIdMatcher);\n\n  useEffect(() => {\n    if (\n      myTransactionState.type === \"waitingForApproval\" ||\n      myTransactionState.type === \"waitingForConfirmation\"\n    ) {\n      dispatch({ type: \"startChange\" });\n    } else if (myTransactionState.type === \"failed\" || myTransactionState.type === \"cancelled\") {\n      dispatch({ type: \"finishChange\" });\n    } else if (myTransactionState.type === \"confirmedOneShot\") {\n      if (myTransactionState.id === `${transactionIdPrefix}closure`) {\n        dispatchEvent(\"TROVE_CLOSED\");\n      } else {\n        dispatchEvent(\"TROVE_ADJUSTED\");\n      }\n    }\n  }, [myTransactionState, dispatch, dispatchEvent]);\n\n  return (\n    <TroveEditor\n      original={original}\n      edited={edited}\n      fee={feeFrom(original, edited, borrowingRate)}\n      borrowingRate={borrowingRate}\n      changePending={changePending}\n      dispatch={dispatch}\n    >\n      {description ??\n        (openingNewTrove ? (\n          <ActionDescription>\n            Start by entering the amount of ETH you'd like to deposit as collateral.\n          </ActionDescription>\n        ) : (\n          <ActionDescription>\n            Adjust your Trove by modifying its collateral, debt, or both.\n          </ActionDescription>\n        ))}\n\n      <Flex variant=\"layout.actions\">\n        <Button variant=\"cancel\" onClick={handleCancel}>\n          Cancel\n        </Button>\n\n        {validChange ? (\n          <TroveAction\n            transactionId={`${transactionIdPrefix}${validChange.type}`}\n            change={validChange}\n            maxBorrowingRate={maxBorrowingRate}\n          >\n            Confirm\n          </TroveAction>\n        ) : (\n          <Button disabled>Confirm</Button>\n        )}\n      </Flex>\n    </TroveEditor>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}