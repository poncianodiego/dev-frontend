{"ast":null,"code":"import _toConsumableArray from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{createContext,useContext,useEffect,useMemo,useState}from\"react\";import{getNetwork}from\"@ethersproject/networks\";import{useWeb3React}from\"@web3-react/core\";import{isBatchedProvider,isWebSocketAugmentedProvider}from\"@liquity/providers\";import{EthersLiquity,_connectByChainId}from\"@liquity/lib-ethers\";import{getConfig}from\"../config\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var LiquityContext=/*#__PURE__*/createContext(undefined);var wsParams=function wsParams(network,infuraApiKey){return[\"wss://\".concat(network===\"homestead\"?\"mainnet\":network,\".infura.io/ws/v3/\").concat(infuraApiKey),network];};var supportedNetworks=[\"homestead\",\"kovan\",\"rinkeby\",\"ropsten\",\"goerli\"];export var LiquityProvider=function LiquityProvider(_ref){var children=_ref.children,loader=_ref.loader,unsupportedNetworkFallback=_ref.unsupportedNetworkFallback,unsupportedMainnetFallback=_ref.unsupportedMainnetFallback;var _useWeb3React=useWeb3React(),provider=_useWeb3React.library,account=_useWeb3React.account,chainId=_useWeb3React.chainId;var _useState=useState(),_useState2=_slicedToArray(_useState,2),config=_useState2[0],setConfig=_useState2[1];var connection=useMemo(function(){if(config&&provider&&account&&chainId){try{return _connectByChainId(provider,provider.getSigner(account),chainId,{userAddress:account,frontendTag:config.frontendTag,useStore:\"blockPolled\"});}catch(_unused){}}},[config,provider,account,chainId]);useEffect(function(){getConfig().then(setConfig);},[]);useEffect(function(){if(config&&connection){var _provider=connection.provider,_chainId=connection.chainId;if(isBatchedProvider(_provider)&&_provider.chainId!==_chainId){_provider.chainId=_chainId;}if(isWebSocketAugmentedProvider(_provider)){var network=getNetwork(_chainId);if(network.name&&supportedNetworks.includes(network.name)&&config.infuraApiKey){_provider.openWebSocket.apply(_provider,_toConsumableArray(wsParams(network.name,config.infuraApiKey)));}else if(connection._isDev){_provider.openWebSocket(\"ws://\".concat(window.location.hostname,\":8546\"),_chainId);}return function(){_provider.closeWebSocket();};}}},[config,connection]);if(!config||!provider||!account||!chainId){return/*#__PURE__*/_jsx(_Fragment,{children:loader});}if(config.testnetOnly&&chainId===1){return/*#__PURE__*/_jsx(_Fragment,{children:unsupportedMainnetFallback});}if(!connection){return unsupportedNetworkFallback?/*#__PURE__*/_jsx(_Fragment,{children:unsupportedNetworkFallback(chainId)}):null;}var liquity=EthersLiquity._from(connection);liquity.store.logging=true;return/*#__PURE__*/_jsx(LiquityContext.Provider,{value:{config:config,account:account,provider:provider,liquity:liquity},children:children});};export var useLiquity=function useLiquity(){var liquityContext=useContext(LiquityContext);if(!liquityContext){throw new Error(\"You must provide a LiquityContext via LiquityProvider\");}return liquityContext;};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/hooks/LiquityContext.tsx"],"names":["React","createContext","useContext","useEffect","useMemo","useState","getNetwork","useWeb3React","isBatchedProvider","isWebSocketAugmentedProvider","EthersLiquity","_connectByChainId","getConfig","LiquityContext","undefined","wsParams","network","infuraApiKey","supportedNetworks","LiquityProvider","children","loader","unsupportedNetworkFallback","unsupportedMainnetFallback","provider","library","account","chainId","config","setConfig","connection","getSigner","userAddress","frontendTag","useStore","then","name","includes","openWebSocket","_isDev","window","location","hostname","closeWebSocket","testnetOnly","liquity","_from","store","logging","useLiquity","liquityContext","Error"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useEffect, useMemo, useState } from \"react\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { isBatchedProvider, isWebSocketAugmentedProvider } from \"@liquity/providers\";\nimport {\n  BlockPolledLiquityStore,\n  EthersLiquity,\n  EthersLiquityWithStore,\n  _connectByChainId\n} from \"@liquity/lib-ethers\";\n\nimport { LiquityFrontendConfig, getConfig } from \"../config\";\n\ntype LiquityContextValue = {\n  config: LiquityFrontendConfig;\n  account: string;\n  provider: Provider;\n  liquity: EthersLiquityWithStore<BlockPolledLiquityStore>;\n};\n\nconst LiquityContext = createContext<LiquityContextValue | undefined>(undefined);\n\ntype LiquityProviderProps = {\n  loader?: React.ReactNode;\n  unsupportedNetworkFallback?: (chainId: number) => React.ReactNode;\n  unsupportedMainnetFallback?: React.ReactNode;\n};\n\nconst wsParams = (network: string, infuraApiKey: string): [string, string] => [\n  `wss://${network === \"homestead\" ? \"mainnet\" : network}.infura.io/ws/v3/${infuraApiKey}`,\n  network\n];\n\nconst supportedNetworks = [\"homestead\", \"kovan\", \"rinkeby\", \"ropsten\", \"goerli\"];\n\nexport const LiquityProvider: React.FC<LiquityProviderProps> = ({\n  children,\n  loader,\n  unsupportedNetworkFallback,\n  unsupportedMainnetFallback\n}) => {\n  const { library: provider, account, chainId } = useWeb3React<Web3Provider>();\n  const [config, setConfig] = useState<LiquityFrontendConfig>();\n\n  const connection = useMemo(() => {\n    if (config && provider && account && chainId) {\n      try {\n        return _connectByChainId(provider, provider.getSigner(account), chainId, {\n          userAddress: account,\n          frontendTag: config.frontendTag,\n          useStore: \"blockPolled\"\n        });\n      } catch {}\n    }\n  }, [config, provider, account, chainId]);\n\n  useEffect(() => {\n    getConfig().then(setConfig);\n  }, []);\n\n  useEffect(() => {\n    if (config && connection) {\n      const { provider, chainId } = connection;\n\n      if (isBatchedProvider(provider) && provider.chainId !== chainId) {\n        provider.chainId = chainId;\n      }\n\n      if (isWebSocketAugmentedProvider(provider)) {\n        const network = getNetwork(chainId);\n\n        if (network.name && supportedNetworks.includes(network.name) && config.infuraApiKey) {\n          provider.openWebSocket(...wsParams(network.name, config.infuraApiKey));\n        } else if (connection._isDev) {\n          provider.openWebSocket(`ws://${window.location.hostname}:8546`, chainId);\n        }\n\n        return () => {\n          provider.closeWebSocket();\n        };\n      }\n    }\n  }, [config, connection]);\n\n  if (!config || !provider || !account || !chainId) {\n    return <>{loader}</>;\n  }\n\n  if (config.testnetOnly && chainId === 1) {\n    return <>{unsupportedMainnetFallback}</>;\n  }\n\n  if (!connection) {\n    return unsupportedNetworkFallback ? <>{unsupportedNetworkFallback(chainId)}</> : null;\n  }\n\n  const liquity = EthersLiquity._from(connection);\n  liquity.store.logging = true;\n\n  return (\n    <LiquityContext.Provider value={{ config, account, provider, liquity }}>\n      {children}\n    </LiquityContext.Provider>\n  );\n};\n\nexport const useLiquity = () => {\n  const liquityContext = useContext(LiquityContext);\n\n  if (!liquityContext) {\n    throw new Error(\"You must provide a LiquityContext via LiquityProvider\");\n  }\n\n  return liquityContext;\n};\n"]},"metadata":{},"sourceType":"module"}