{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Redemption/Redemption.tsx\",\n    _s = $RefreshSig$();\n\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { useLiquity } from \"../../hooks/LiquityContext\";\nimport { DisabledRedemption } from \"./DisabledRedemption\";\nimport { RedemptionManager } from \"./RedemptionManager\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SECONDS_IN_ONE_DAY = 24 * 60 * 60;\n\nconst selectBlockTimestamp = ({\n  blockTimestamp\n}) => blockTimestamp;\n\nexport const Redemption = () => {\n  _s();\n\n  const {\n    liquity: {\n      connection: {\n        deploymentDate,\n        bootstrapPeriod\n      }\n    }\n  } = useLiquity();\n  const blockTimestamp = useLiquitySelector(selectBlockTimestamp);\n  const bootstrapPeriodDays = Math.round(bootstrapPeriod / SECONDS_IN_ONE_DAY);\n  const deploymentTime = deploymentDate.getTime() / 1000;\n  const bootstrapEndTime = deploymentTime + bootstrapPeriod;\n  const bootstrapEndDate = new Date(bootstrapEndTime * 1000);\n  const redemptionDisabled = blockTimestamp < bootstrapEndTime;\n\n  if (redemptionDisabled) {\n    return /*#__PURE__*/_jsxDEV(DisabledRedemption, {\n      disabledDays: bootstrapPeriodDays,\n      unlockDate: bootstrapEndDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(RedemptionManager, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Redemption, \"GSZTYeh/VRBt0Tc0sx1Rafdkurc=\", false, function () {\n  return [useLiquity, useLiquitySelector];\n});\n\n_c = Redemption;\n\nvar _c;\n\n$RefreshReg$(_c, \"Redemption\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Redemption/Redemption.tsx"],"names":["useLiquitySelector","useLiquity","DisabledRedemption","RedemptionManager","SECONDS_IN_ONE_DAY","selectBlockTimestamp","blockTimestamp","Redemption","liquity","connection","deploymentDate","bootstrapPeriod","bootstrapPeriodDays","Math","round","deploymentTime","getTime","bootstrapEndTime","bootstrapEndDate","Date","redemptionDisabled"],"mappings":";;;AACA,SAASA,kBAAT,QAAmC,oBAAnC;AAEA,SAASC,UAAT,QAA2B,4BAA3B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;AAEA,MAAMC,kBAAkB,GAAG,KAAK,EAAL,GAAU,EAArC;;AAEA,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAsDA,cAAnF;;AAEA,OAAO,MAAMC,UAAoB,GAAG,MAAM;AAAA;;AACxC,QAAM;AACJC,IAAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,cAAF;AAAkBC,QAAAA;AAAlB;AADL;AADL,MAIFV,UAAU,EAJd;AAMA,QAAMK,cAAc,GAAGN,kBAAkB,CAACK,oBAAD,CAAzC;AAEA,QAAMO,mBAAmB,GAAGC,IAAI,CAACC,KAAL,CAAWH,eAAe,GAAGP,kBAA7B,CAA5B;AACA,QAAMW,cAAc,GAAGL,cAAc,CAACM,OAAf,KAA2B,IAAlD;AACA,QAAMC,gBAAgB,GAAGF,cAAc,GAAGJ,eAA1C;AACA,QAAMO,gBAAgB,GAAG,IAAIC,IAAJ,CAASF,gBAAgB,GAAG,IAA5B,CAAzB;AACA,QAAMG,kBAAkB,GAAGd,cAAc,GAAGW,gBAA5C;;AAEA,MAAIG,kBAAJ,EAAwB;AACtB,wBAAO,QAAC,kBAAD;AAAoB,MAAA,YAAY,EAAER,mBAAlC;AAAuD,MAAA,UAAU,EAAEM;AAAnE;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBAAO,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CApBM;;GAAMX,U;UAKPN,U,EAEmBD,kB;;;KAPZO,U","sourcesContent":["import { BlockPolledLiquityStoreState } from \"@liquity/lib-ethers\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\n\nimport { useLiquity } from \"../../hooks/LiquityContext\";\nimport { DisabledRedemption } from \"./DisabledRedemption\";\nimport { RedemptionManager } from \"./RedemptionManager\";\n\nconst SECONDS_IN_ONE_DAY = 24 * 60 * 60;\n\nconst selectBlockTimestamp = ({ blockTimestamp }: BlockPolledLiquityStoreState) => blockTimestamp;\n\nexport const Redemption: React.FC = () => {\n  const {\n    liquity: {\n      connection: { deploymentDate, bootstrapPeriod }\n    }\n  } = useLiquity();\n\n  const blockTimestamp = useLiquitySelector(selectBlockTimestamp);\n\n  const bootstrapPeriodDays = Math.round(bootstrapPeriod / SECONDS_IN_ONE_DAY);\n  const deploymentTime = deploymentDate.getTime() / 1000;\n  const bootstrapEndTime = deploymentTime + bootstrapPeriod;\n  const bootstrapEndDate = new Date(bootstrapEndTime * 1000);\n  const redemptionDisabled = blockTimestamp < bootstrapEndTime;\n\n  if (redemptionDisabled) {\n    return <DisabledRedemption disabledDays={bootstrapPeriodDays} unlockDate={bootstrapEndDate} />;\n  }\n\n  return <RedemptionManager />;\n};\n"]},"metadata":{},"sourceType":"module"}