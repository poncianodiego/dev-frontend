{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/validation/validateTroveChange.tsx\";\nimport { LUSD_MINIMUM_DEBT, Percent, MINIMUM_COLLATERAL_RATIO, CRITICAL_COLLATERAL_RATIO } from \"@liquity/lib-base\";\nimport { COIN } from \"../../../strings\";\nimport { ActionDescription, Amount } from \"../../ActionDescription\";\nimport { ErrorDescription } from \"../../ErrorDescription\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst mcrPercent = new Percent(MINIMUM_COLLATERAL_RATIO).toString(0);\nconst ccrPercent = new Percent(CRITICAL_COLLATERAL_RATIO).toString(0);\n\nconst TroveChangeDescription = ({\n  params\n}) => /*#__PURE__*/_jsxDEV(ActionDescription, {\n  children: [params.depositCollateral && params.borrowLUSD ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"You will deposit \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [params.depositCollateral.prettify(), \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 26\n    }, this), \" and receive\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [params.borrowLUSD.prettify(), \" \", COIN]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true) : params.repayLUSD && params.withdrawCollateral ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"You will pay\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [params.repayLUSD.prettify(), \" \", COIN]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), \" \", \"and receive \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [params.withdrawCollateral.prettify(), \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true) : params.depositCollateral && params.repayLUSD ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"You will deposit \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [params.depositCollateral.prettify(), \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 26\n    }, this), \" and pay\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [params.repayLUSD.prettify(), \" \", COIN]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true) : params.borrowLUSD && params.withdrawCollateral ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"You will receive \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [params.withdrawCollateral.prettify(), \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 26\n    }, this), \" and\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [params.borrowLUSD.prettify(), \" \", COIN]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true) : params.depositCollateral ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"You will deposit \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [params.depositCollateral.prettify(), \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true) : params.withdrawCollateral ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"You will receive \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [params.withdrawCollateral.prettify(), \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true) : params.borrowLUSD ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"You will receive\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [params.borrowLUSD.prettify(), \" \", COIN]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"You will pay\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [params.repayLUSD.prettify(), \" \", COIN]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true), \".\"]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 28,\n  columnNumber: 3\n}, this);\n\n_c = TroveChangeDescription;\nexport const selectForTroveChangeValidation = ({\n  price,\n  total,\n  accountBalance,\n  lusdBalance,\n  numberOfTroves\n}) => ({\n  price,\n  total,\n  accountBalance,\n  lusdBalance,\n  numberOfTroves\n});\nexport const validateTroveChange = (originalTrove, adjustedTrove, borrowingRate, selectedState) => {\n  const {\n    total,\n    price\n  } = selectedState;\n  const change = originalTrove.whatChanged(adjustedTrove, borrowingRate);\n\n  if (!change) {\n    return [undefined, undefined];\n  } // Reapply change to get the exact state the Trove will end up in (which could be slightly\n  // different from `edited` due to imprecision).\n\n\n  const resultingTrove = originalTrove.apply(change, borrowingRate);\n  const recoveryMode = total.collateralRatioIsBelowCritical(price);\n  const wouldTriggerRecoveryMode = total.subtract(originalTrove).add(resultingTrove).collateralRatioIsBelowCritical(price);\n  const context = { ...selectedState,\n    originalTrove,\n    resultingTrove,\n    recoveryMode,\n    wouldTriggerRecoveryMode\n  };\n\n  if (change.type === \"invalidCreation\") {\n    // Trying to create a Trove with negative net debt\n    return [undefined, /*#__PURE__*/_jsxDEV(ErrorDescription, {\n      children: [\"Total debt must be at least\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n        children: [LUSD_MINIMUM_DEBT.toString(), \" \", COIN]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)];\n  }\n\n  const errorDescription = change.type === \"creation\" ? validateTroveCreation(change.params, context) : change.type === \"closure\" ? validateTroveClosure(change.params, context) : validateTroveAdjustment(change.params, context);\n\n  if (errorDescription) {\n    return [undefined, errorDescription];\n  }\n\n  return [change, /*#__PURE__*/_jsxDEV(TroveChangeDescription, {\n    params: change.params\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 19\n  }, this)];\n};\n\nconst validateTroveCreation = ({\n  depositCollateral\n}, {\n  resultingTrove,\n  recoveryMode,\n  wouldTriggerRecoveryMode,\n  accountBalance,\n  price\n}) => {\n  if (resultingTrove.debt.lt(LUSD_MINIMUM_DEBT)) {\n    return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n      children: [\"Total debt must be at least\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n        children: [LUSD_MINIMUM_DEBT.toString(), \" \", COIN]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (recoveryMode) {\n    if (!resultingTrove.isOpenableInRecoveryMode(price)) {\n      return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n        children: [\"You're not allowed to open a Trove with less than \", /*#__PURE__*/_jsxDEV(Amount, {\n          children: ccrPercent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 61\n        }, this), \" Collateral Ratio during recovery mode. Please increase your Trove's Collateral Ratio.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this);\n    }\n  } else {\n    if (resultingTrove.collateralRatioIsBelowMinimum(price)) {\n      return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n        children: [\"Collateral ratio must be at least \", /*#__PURE__*/_jsxDEV(Amount, {\n          children: mcrPercent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 45\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (wouldTriggerRecoveryMode) {\n      return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n        children: [\"You're not allowed to open a Trove that would cause the Total Collateral Ratio to fall below \", /*#__PURE__*/_jsxDEV(Amount, {\n          children: ccrPercent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 17\n        }, this), \". Please increase your Trove's Collateral Ratio.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  if (depositCollateral.gt(accountBalance)) {\n    return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n      children: [\"The amount you're trying to deposit exceeds your balance by\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n        children: [depositCollateral.sub(accountBalance).prettify(), \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this);\n  }\n\n  return null;\n};\n\nconst validateTroveAdjustment = ({\n  depositCollateral,\n  withdrawCollateral,\n  borrowLUSD,\n  repayLUSD\n}, {\n  originalTrove,\n  resultingTrove,\n  recoveryMode,\n  wouldTriggerRecoveryMode,\n  price,\n  accountBalance,\n  lusdBalance\n}) => {\n  if (recoveryMode) {\n    if (withdrawCollateral) {\n      return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n        children: \"You're not allowed to withdraw collateral during recovery mode.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (borrowLUSD) {\n      if (resultingTrove.collateralRatioIsBelowCritical(price)) {\n        return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n          children: [\"Your collateral ratio must be at least \", /*#__PURE__*/_jsxDEV(Amount, {\n            children: ccrPercent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 52\n          }, this), \" to borrow during recovery mode. Please improve your collateral ratio.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this);\n      }\n\n      if (resultingTrove.collateralRatio(price).lt(originalTrove.collateralRatio(price))) {\n        return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n          children: \"You're not allowed to decrease your collateral ratio during recovery mode.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this);\n      }\n    }\n  } else {\n    if (resultingTrove.collateralRatioIsBelowMinimum(price)) {\n      return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n        children: [\"Collateral ratio must be at least \", /*#__PURE__*/_jsxDEV(Amount, {\n          children: mcrPercent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 45\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (wouldTriggerRecoveryMode) {\n      return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n        children: [\"The adjustment you're trying to make would cause the Total Collateral Ratio to fall below\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n          children: ccrPercent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), \". Please increase your Trove's Collateral Ratio.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  if (repayLUSD) {\n    if (resultingTrove.debt.lt(LUSD_MINIMUM_DEBT)) {\n      return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n        children: [\"Total debt must be at least\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n          children: [LUSD_MINIMUM_DEBT.toString(), \" \", COIN]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (repayLUSD.gt(lusdBalance)) {\n      return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n        children: [\"The amount you're trying to repay exceeds your balance by\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n          children: [repayLUSD.sub(lusdBalance).prettify(), \" \", COIN]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  if (depositCollateral === null || depositCollateral === void 0 ? void 0 : depositCollateral.gt(accountBalance)) {\n    return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n      children: [\"The amount you're trying to deposit exceeds your balance by\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n        children: [depositCollateral.sub(accountBalance).prettify(), \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this);\n  }\n\n  return null;\n};\n\nconst validateTroveClosure = ({\n  repayLUSD\n}, {\n  recoveryMode,\n  wouldTriggerRecoveryMode,\n  numberOfTroves,\n  lusdBalance\n}) => {\n  if (numberOfTroves === 1) {\n    return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n      children: \"You're not allowed to close your Trove when there are no other Troves in the system.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (recoveryMode) {\n    return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n      children: \"You're not allowed to close your Trove during recovery mode.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (repayLUSD === null || repayLUSD === void 0 ? void 0 : repayLUSD.gt(lusdBalance)) {\n    return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n      children: [\"You need\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n        children: [repayLUSD.sub(lusdBalance).prettify(), \" \", COIN]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), \" \", \"more to close your Trove.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (wouldTriggerRecoveryMode) {\n    return /*#__PURE__*/_jsxDEV(ErrorDescription, {\n      children: [\"You're not allowed to close a Trove if it would cause the Total Collateralization Ratio to fall below \", /*#__PURE__*/_jsxDEV(Amount, {\n        children: ccrPercent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 20\n      }, this), \". Please wait until the Total Collateral Ratio increases.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this);\n  }\n\n  return null;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"TroveChangeDescription\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/validation/validateTroveChange.tsx"],"names":["LUSD_MINIMUM_DEBT","Percent","MINIMUM_COLLATERAL_RATIO","CRITICAL_COLLATERAL_RATIO","COIN","ActionDescription","Amount","ErrorDescription","mcrPercent","toString","ccrPercent","TroveChangeDescription","params","depositCollateral","borrowLUSD","prettify","repayLUSD","withdrawCollateral","selectForTroveChangeValidation","price","total","accountBalance","lusdBalance","numberOfTroves","validateTroveChange","originalTrove","adjustedTrove","borrowingRate","selectedState","change","whatChanged","undefined","resultingTrove","apply","recoveryMode","collateralRatioIsBelowCritical","wouldTriggerRecoveryMode","subtract","add","context","type","errorDescription","validateTroveCreation","validateTroveClosure","validateTroveAdjustment","debt","lt","isOpenableInRecoveryMode","collateralRatioIsBelowMinimum","gt","sub","collateralRatio"],"mappings":"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","sourcesContent":["import {\n  Decimal,\n  LUSD_MINIMUM_DEBT,\n  Trove,\n  TroveAdjustmentParams,\n  TroveChange,\n  Percent,\n  MINIMUM_COLLATERAL_RATIO,\n  CRITICAL_COLLATERAL_RATIO,\n  LiquityStoreState,\n  TroveClosureParams,\n  TroveCreationParams\n} from \"@liquity/lib-base\";\n\nimport { COIN } from \"../../../strings\";\n\nimport { ActionDescription, Amount } from \"../../ActionDescription\";\nimport { ErrorDescription } from \"../../ErrorDescription\";\n\nconst mcrPercent = new Percent(MINIMUM_COLLATERAL_RATIO).toString(0);\nconst ccrPercent = new Percent(CRITICAL_COLLATERAL_RATIO).toString(0);\n\ntype TroveAdjustmentDescriptionParams = {\n  params: TroveAdjustmentParams<Decimal>;\n};\n\nconst TroveChangeDescription: React.FC<TroveAdjustmentDescriptionParams> = ({ params }) => (\n  <ActionDescription>\n    {params.depositCollateral && params.borrowLUSD ? (\n      <>\n        You will deposit <Amount>{params.depositCollateral.prettify()} ETH</Amount> and receive{\" \"}\n        <Amount>\n          {params.borrowLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    ) : params.repayLUSD && params.withdrawCollateral ? (\n      <>\n        You will pay{\" \"}\n        <Amount>\n          {params.repayLUSD.prettify()} {COIN}\n        </Amount>{\" \"}\n        and receive <Amount>{params.withdrawCollateral.prettify()} ETH</Amount>\n      </>\n    ) : params.depositCollateral && params.repayLUSD ? (\n      <>\n        You will deposit <Amount>{params.depositCollateral.prettify()} ETH</Amount> and pay{\" \"}\n        <Amount>\n          {params.repayLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    ) : params.borrowLUSD && params.withdrawCollateral ? (\n      <>\n        You will receive <Amount>{params.withdrawCollateral.prettify()} ETH</Amount> and{\" \"}\n        <Amount>\n          {params.borrowLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    ) : params.depositCollateral ? (\n      <>\n        You will deposit <Amount>{params.depositCollateral.prettify()} ETH</Amount>\n      </>\n    ) : params.withdrawCollateral ? (\n      <>\n        You will receive <Amount>{params.withdrawCollateral.prettify()} ETH</Amount>\n      </>\n    ) : params.borrowLUSD ? (\n      <>\n        You will receive{\" \"}\n        <Amount>\n          {params.borrowLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    ) : (\n      <>\n        You will pay{\" \"}\n        <Amount>\n          {params.repayLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    )}\n    .\n  </ActionDescription>\n);\n\nexport const selectForTroveChangeValidation = ({\n  price,\n  total,\n  accountBalance,\n  lusdBalance,\n  numberOfTroves\n}: LiquityStoreState) => ({ price, total, accountBalance, lusdBalance, numberOfTroves });\n\ntype TroveChangeValidationSelectedState = ReturnType<typeof selectForTroveChangeValidation>;\n\ninterface TroveChangeValidationContext extends TroveChangeValidationSelectedState {\n  originalTrove: Trove;\n  resultingTrove: Trove;\n  recoveryMode: boolean;\n  wouldTriggerRecoveryMode: boolean;\n}\n\nexport const validateTroveChange = (\n  originalTrove: Trove,\n  adjustedTrove: Trove,\n  borrowingRate: Decimal,\n  selectedState: TroveChangeValidationSelectedState\n): [\n  validChange: Exclude<TroveChange<Decimal>, { type: \"invalidCreation\" }> | undefined,\n  description: JSX.Element | undefined\n] => {\n  const { total, price } = selectedState;\n  const change = originalTrove.whatChanged(adjustedTrove, borrowingRate);\n\n  if (!change) {\n    return [undefined, undefined];\n  }\n\n  // Reapply change to get the exact state the Trove will end up in (which could be slightly\n  // different from `edited` due to imprecision).\n  const resultingTrove = originalTrove.apply(change, borrowingRate);\n  const recoveryMode = total.collateralRatioIsBelowCritical(price);\n  const wouldTriggerRecoveryMode = total\n    .subtract(originalTrove)\n    .add(resultingTrove)\n    .collateralRatioIsBelowCritical(price);\n\n  const context: TroveChangeValidationContext = {\n    ...selectedState,\n    originalTrove,\n    resultingTrove,\n    recoveryMode,\n    wouldTriggerRecoveryMode\n  };\n\n  if (change.type === \"invalidCreation\") {\n    // Trying to create a Trove with negative net debt\n    return [\n      undefined,\n      <ErrorDescription>\n        Total debt must be at least{\" \"}\n        <Amount>\n          {LUSD_MINIMUM_DEBT.toString()} {COIN}\n        </Amount>\n        .\n      </ErrorDescription>\n    ];\n  }\n\n  const errorDescription =\n    change.type === \"creation\"\n      ? validateTroveCreation(change.params, context)\n      : change.type === \"closure\"\n      ? validateTroveClosure(change.params, context)\n      : validateTroveAdjustment(change.params, context);\n\n  if (errorDescription) {\n    return [undefined, errorDescription];\n  }\n\n  return [change, <TroveChangeDescription params={change.params} />];\n};\n\nconst validateTroveCreation = (\n  { depositCollateral }: TroveCreationParams<Decimal>,\n  {\n    resultingTrove,\n    recoveryMode,\n    wouldTriggerRecoveryMode,\n    accountBalance,\n    price\n  }: TroveChangeValidationContext\n): JSX.Element | null => {\n  if (resultingTrove.debt.lt(LUSD_MINIMUM_DEBT)) {\n    return (\n      <ErrorDescription>\n        Total debt must be at least{\" \"}\n        <Amount>\n          {LUSD_MINIMUM_DEBT.toString()} {COIN}\n        </Amount>\n        .\n      </ErrorDescription>\n    );\n  }\n\n  if (recoveryMode) {\n    if (!resultingTrove.isOpenableInRecoveryMode(price)) {\n      return (\n        <ErrorDescription>\n          You're not allowed to open a Trove with less than <Amount>{ccrPercent}</Amount> Collateral\n          Ratio during recovery mode. Please increase your Trove's Collateral Ratio.\n        </ErrorDescription>\n      );\n    }\n  } else {\n    if (resultingTrove.collateralRatioIsBelowMinimum(price)) {\n      return (\n        <ErrorDescription>\n          Collateral ratio must be at least <Amount>{mcrPercent}</Amount>.\n        </ErrorDescription>\n      );\n    }\n\n    if (wouldTriggerRecoveryMode) {\n      return (\n        <ErrorDescription>\n          You're not allowed to open a Trove that would cause the Total Collateral Ratio to fall\n          below <Amount>{ccrPercent}</Amount>. Please increase your Trove's Collateral Ratio.\n        </ErrorDescription>\n      );\n    }\n  }\n\n  if (depositCollateral.gt(accountBalance)) {\n    return (\n      <ErrorDescription>\n        The amount you're trying to deposit exceeds your balance by{\" \"}\n        <Amount>{depositCollateral.sub(accountBalance).prettify()} ETH</Amount>.\n      </ErrorDescription>\n    );\n  }\n\n  return null;\n};\n\nconst validateTroveAdjustment = (\n  { depositCollateral, withdrawCollateral, borrowLUSD, repayLUSD }: TroveAdjustmentParams<Decimal>,\n  {\n    originalTrove,\n    resultingTrove,\n    recoveryMode,\n    wouldTriggerRecoveryMode,\n    price,\n    accountBalance,\n    lusdBalance\n  }: TroveChangeValidationContext\n): JSX.Element | null => {\n  if (recoveryMode) {\n    if (withdrawCollateral) {\n      return (\n        <ErrorDescription>\n          You're not allowed to withdraw collateral during recovery mode.\n        </ErrorDescription>\n      );\n    }\n\n    if (borrowLUSD) {\n      if (resultingTrove.collateralRatioIsBelowCritical(price)) {\n        return (\n          <ErrorDescription>\n            Your collateral ratio must be at least <Amount>{ccrPercent}</Amount> to borrow during\n            recovery mode. Please improve your collateral ratio.\n          </ErrorDescription>\n        );\n      }\n\n      if (resultingTrove.collateralRatio(price).lt(originalTrove.collateralRatio(price))) {\n        return (\n          <ErrorDescription>\n            You're not allowed to decrease your collateral ratio during recovery mode.\n          </ErrorDescription>\n        );\n      }\n    }\n  } else {\n    if (resultingTrove.collateralRatioIsBelowMinimum(price)) {\n      return (\n        <ErrorDescription>\n          Collateral ratio must be at least <Amount>{mcrPercent}</Amount>.\n        </ErrorDescription>\n      );\n    }\n\n    if (wouldTriggerRecoveryMode) {\n      return (\n        <ErrorDescription>\n          The adjustment you're trying to make would cause the Total Collateral Ratio to fall below{\" \"}\n          <Amount>{ccrPercent}</Amount>. Please increase your Trove's Collateral Ratio.\n        </ErrorDescription>\n      );\n    }\n  }\n\n  if (repayLUSD) {\n    if (resultingTrove.debt.lt(LUSD_MINIMUM_DEBT)) {\n      return (\n        <ErrorDescription>\n          Total debt must be at least{\" \"}\n          <Amount>\n            {LUSD_MINIMUM_DEBT.toString()} {COIN}\n          </Amount>\n          .\n        </ErrorDescription>\n      );\n    }\n\n    if (repayLUSD.gt(lusdBalance)) {\n      return (\n        <ErrorDescription>\n          The amount you're trying to repay exceeds your balance by{\" \"}\n          <Amount>\n            {repayLUSD.sub(lusdBalance).prettify()} {COIN}\n          </Amount>\n          .\n        </ErrorDescription>\n      );\n    }\n  }\n\n  if (depositCollateral?.gt(accountBalance)) {\n    return (\n      <ErrorDescription>\n        The amount you're trying to deposit exceeds your balance by{\" \"}\n        <Amount>{depositCollateral.sub(accountBalance).prettify()} ETH</Amount>.\n      </ErrorDescription>\n    );\n  }\n\n  return null;\n};\n\nconst validateTroveClosure = (\n  { repayLUSD }: TroveClosureParams<Decimal>,\n  {\n    recoveryMode,\n    wouldTriggerRecoveryMode,\n    numberOfTroves,\n    lusdBalance\n  }: TroveChangeValidationContext\n): JSX.Element | null => {\n  if (numberOfTroves === 1) {\n    return (\n      <ErrorDescription>\n        You're not allowed to close your Trove when there are no other Troves in the system.\n      </ErrorDescription>\n    );\n  }\n\n  if (recoveryMode) {\n    return (\n      <ErrorDescription>\n        You're not allowed to close your Trove during recovery mode.\n      </ErrorDescription>\n    );\n  }\n\n  if (repayLUSD?.gt(lusdBalance)) {\n    return (\n      <ErrorDescription>\n        You need{\" \"}\n        <Amount>\n          {repayLUSD.sub(lusdBalance).prettify()} {COIN}\n        </Amount>{\" \"}\n        more to close your Trove.\n      </ErrorDescription>\n    );\n  }\n\n  if (wouldTriggerRecoveryMode) {\n    return (\n      <ErrorDescription>\n        You're not allowed to close a Trove if it would cause the Total Collateralization Ratio to\n        fall below <Amount>{ccrPercent}</Amount>. Please wait until the Total Collateral Ratio\n        increases.\n      </ErrorDescription>\n    );\n  }\n\n  return null;\n};\n"]},"metadata":{},"sourceType":"module"}