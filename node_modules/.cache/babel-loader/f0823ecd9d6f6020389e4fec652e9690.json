{"ast":null,"code":"import { AddressZero } from \"@ethersproject/constants\";\nimport { isAddress, getAddress } from \"@ethersproject/address\";\nconst defaultConfig = {\n  frontendTag: AddressZero\n};\n\nfunction hasKey(o, k) {\n  return k in o;\n}\n\nconst parseConfig = json => {\n  const config = { ...defaultConfig\n  };\n\n  if (typeof json === \"object\" && json !== null) {\n    if (hasKey(json, \"frontendTag\") && json.frontendTag !== \"\") {\n      const {\n        frontendTag\n      } = json;\n\n      if (typeof frontendTag === \"string\" && isAddress(frontendTag)) {\n        config.frontendTag = getAddress(frontendTag);\n      } else {\n        console.error(\"Malformed frontendTag:\");\n        console.log(frontendTag);\n      }\n    }\n\n    if (hasKey(json, \"infuraApiKey\") && json.infuraApiKey !== \"\") {\n      const {\n        infuraApiKey\n      } = json;\n\n      if (typeof infuraApiKey === \"string\") {\n        config.infuraApiKey = infuraApiKey;\n      } else {\n        console.error(\"Malformed infuraApiKey:\");\n        console.log(infuraApiKey);\n      }\n    }\n\n    if (hasKey(json, \"testnetOnly\")) {\n      const {\n        testnetOnly\n      } = json;\n\n      if (typeof testnetOnly === \"boolean\") {\n        config.testnetOnly = testnetOnly;\n      } else {\n        console.error(\"Malformed testnetOnly:\");\n        console.log(testnetOnly);\n      }\n    }\n  } else {\n    console.error(\"Malformed config:\");\n    console.log(json);\n  }\n\n  return config;\n};\n\nlet configPromise = undefined;\n\nconst fetchConfig = async () => {\n  try {\n    const response = await fetch(\"config.json\");\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch config.json (status ${response.status})`);\n    }\n\n    return parseConfig(await response.json());\n  } catch (err) {\n    console.error(err);\n    return { ...defaultConfig\n    };\n  }\n};\n\nexport const getConfig = () => {\n  if (!configPromise) {\n    configPromise = fetchConfig();\n  }\n\n  return configPromise;\n};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/config/index.ts"],"names":["AddressZero","isAddress","getAddress","defaultConfig","frontendTag","hasKey","o","k","parseConfig","json","config","console","error","log","infuraApiKey","testnetOnly","configPromise","undefined","fetchConfig","response","fetch","ok","Error","status","err","getConfig"],"mappings":"AAAA,SAASA,WAAT,QAA4B,0BAA5B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AAQA,MAAMC,aAAoC,GAAG;AAC3CC,EAAAA,WAAW,EAAEJ;AAD8B,CAA7C;;AAIA,SAASK,MAAT,CAAkCC,CAAlC,EAA6CC,CAA7C,EAA4E;AAC1E,SAAOA,CAAC,IAAID,CAAZ;AACD;;AAED,MAAME,WAAW,GAAIC,IAAD,IAA0C;AAC5D,QAAMC,MAAM,GAAG,EAAE,GAAGP;AAAL,GAAf;;AAEA,MAAI,OAAOM,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAAzC,EAA+C;AAC7C,QAAIJ,MAAM,CAACI,IAAD,EAAO,aAAP,CAAN,IAA+BA,IAAI,CAACL,WAAL,KAAqB,EAAxD,EAA4D;AAC1D,YAAM;AAAEA,QAAAA;AAAF,UAAkBK,IAAxB;;AAEA,UAAI,OAAOL,WAAP,KAAuB,QAAvB,IAAmCH,SAAS,CAACG,WAAD,CAAhD,EAA+D;AAC7DM,QAAAA,MAAM,CAACN,WAAP,GAAqBF,UAAU,CAACE,WAAD,CAA/B;AACD,OAFD,MAEO;AACLO,QAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd;AACAD,QAAAA,OAAO,CAACE,GAAR,CAAYT,WAAZ;AACD;AACF;;AAED,QAAIC,MAAM,CAACI,IAAD,EAAO,cAAP,CAAN,IAAgCA,IAAI,CAACK,YAAL,KAAsB,EAA1D,EAA8D;AAC5D,YAAM;AAAEA,QAAAA;AAAF,UAAmBL,IAAzB;;AAEA,UAAI,OAAOK,YAAP,KAAwB,QAA5B,EAAsC;AACpCJ,QAAAA,MAAM,CAACI,YAAP,GAAsBA,YAAtB;AACD,OAFD,MAEO;AACLH,QAAAA,OAAO,CAACC,KAAR,CAAc,yBAAd;AACAD,QAAAA,OAAO,CAACE,GAAR,CAAYC,YAAZ;AACD;AACF;;AAED,QAAIT,MAAM,CAACI,IAAD,EAAO,aAAP,CAAV,EAAiC;AAC/B,YAAM;AAAEM,QAAAA;AAAF,UAAkBN,IAAxB;;AAEA,UAAI,OAAOM,WAAP,KAAuB,SAA3B,EAAsC;AACpCL,QAAAA,MAAM,CAACK,WAAP,GAAqBA,WAArB;AACD,OAFD,MAEO;AACLJ,QAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd;AACAD,QAAAA,OAAO,CAACE,GAAR,CAAYE,WAAZ;AACD;AACF;AACF,GAjCD,MAiCO;AACLJ,IAAAA,OAAO,CAACC,KAAR,CAAc,mBAAd;AACAD,IAAAA,OAAO,CAACE,GAAR,CAAYJ,IAAZ;AACD;;AAED,SAAOC,MAAP;AACD,CA1CD;;AA4CA,IAAIM,aAAyD,GAAGC,SAAhE;;AAEA,MAAMC,WAAW,GAAG,YAAY;AAC9B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAD,CAA5B;;AAEA,QAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,YAAM,IAAIC,KAAJ,CAAW,uCAAsCH,QAAQ,CAACI,MAAO,GAAjE,CAAN;AACD;;AAED,WAAOf,WAAW,CAAC,MAAMW,QAAQ,CAACV,IAAT,EAAP,CAAlB;AACD,GARD,CAQE,OAAOe,GAAP,EAAY;AACZb,IAAAA,OAAO,CAACC,KAAR,CAAcY,GAAd;AACA,WAAO,EAAE,GAAGrB;AAAL,KAAP;AACD;AACF,CAbD;;AAeA,OAAO,MAAMsB,SAAS,GAAG,MAAsC;AAC7D,MAAI,CAACT,aAAL,EAAoB;AAClBA,IAAAA,aAAa,GAAGE,WAAW,EAA3B;AACD;;AAED,SAAOF,aAAP;AACD,CANM","sourcesContent":["import { AddressZero } from \"@ethersproject/constants\";\nimport { isAddress, getAddress } from \"@ethersproject/address\";\n\nexport type LiquityFrontendConfig = {\n  frontendTag: string;\n  infuraApiKey?: string;\n  testnetOnly?: boolean;\n};\n\nconst defaultConfig: LiquityFrontendConfig = {\n  frontendTag: AddressZero\n};\n\nfunction hasKey<K extends string>(o: object, k: K): o is Record<K, unknown> {\n  return k in o;\n}\n\nconst parseConfig = (json: unknown): LiquityFrontendConfig => {\n  const config = { ...defaultConfig };\n\n  if (typeof json === \"object\" && json !== null) {\n    if (hasKey(json, \"frontendTag\") && json.frontendTag !== \"\") {\n      const { frontendTag } = json;\n\n      if (typeof frontendTag === \"string\" && isAddress(frontendTag)) {\n        config.frontendTag = getAddress(frontendTag);\n      } else {\n        console.error(\"Malformed frontendTag:\");\n        console.log(frontendTag);\n      }\n    }\n\n    if (hasKey(json, \"infuraApiKey\") && json.infuraApiKey !== \"\") {\n      const { infuraApiKey } = json;\n\n      if (typeof infuraApiKey === \"string\") {\n        config.infuraApiKey = infuraApiKey;\n      } else {\n        console.error(\"Malformed infuraApiKey:\");\n        console.log(infuraApiKey);\n      }\n    }\n\n    if (hasKey(json, \"testnetOnly\")) {\n      const { testnetOnly } = json;\n\n      if (typeof testnetOnly === \"boolean\") {\n        config.testnetOnly = testnetOnly;\n      } else {\n        console.error(\"Malformed testnetOnly:\");\n        console.log(testnetOnly);\n      }\n    }\n  } else {\n    console.error(\"Malformed config:\");\n    console.log(json);\n  }\n\n  return config;\n};\n\nlet configPromise: Promise<LiquityFrontendConfig> | undefined = undefined;\n\nconst fetchConfig = async () => {\n  try {\n    const response = await fetch(\"config.json\");\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch config.json (status ${response.status})`);\n    }\n\n    return parseConfig(await response.json());\n  } catch (err) {\n    console.error(err);\n    return { ...defaultConfig };\n  }\n};\n\nexport const getConfig = (): Promise<LiquityFrontendConfig> => {\n  if (!configPromise) {\n    configPromise = fetchConfig();\n  }\n\n  return configPromise;\n};\n"]},"metadata":{},"sourceType":"module"}