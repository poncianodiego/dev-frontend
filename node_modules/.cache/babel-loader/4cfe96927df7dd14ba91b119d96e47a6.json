{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._connectToContracts = exports._uniTokenIsMock = exports._priceFeedIsTestnet = exports._LiquityContract = void 0;\n\nconst contracts_1 = require(\"@ethersproject/contracts\");\n\nconst ActivePool_json_1 = __importDefault(require(\"../abi/ActivePool.json\"));\n\nconst BorrowerOperations_json_1 = __importDefault(require(\"../abi/BorrowerOperations.json\"));\n\nconst TroveManager_json_1 = __importDefault(require(\"../abi/TroveManager.json\"));\n\nconst LUSDToken_json_1 = __importDefault(require(\"../abi/LUSDToken.json\"));\n\nconst CollSurplusPool_json_1 = __importDefault(require(\"../abi/CollSurplusPool.json\"));\n\nconst CommunityIssuance_json_1 = __importDefault(require(\"../abi/CommunityIssuance.json\"));\n\nconst DefaultPool_json_1 = __importDefault(require(\"../abi/DefaultPool.json\"));\n\nconst LQTYToken_json_1 = __importDefault(require(\"../abi/LQTYToken.json\"));\n\nconst HintHelpers_json_1 = __importDefault(require(\"../abi/HintHelpers.json\"));\n\nconst LockupContractFactory_json_1 = __importDefault(require(\"../abi/LockupContractFactory.json\"));\n\nconst LQTYStaking_json_1 = __importDefault(require(\"../abi/LQTYStaking.json\"));\n\nconst MultiTroveGetter_json_1 = __importDefault(require(\"../abi/MultiTroveGetter.json\"));\n\nconst PriceFeed_json_1 = __importDefault(require(\"../abi/PriceFeed.json\"));\n\nconst PriceFeedTestnet_json_1 = __importDefault(require(\"../abi/PriceFeedTestnet.json\"));\n\nconst SortedTroves_json_1 = __importDefault(require(\"../abi/SortedTroves.json\"));\n\nconst StabilityPool_json_1 = __importDefault(require(\"../abi/StabilityPool.json\"));\n\nconst GasPool_json_1 = __importDefault(require(\"../abi/GasPool.json\"));\n\nconst Unipool_json_1 = __importDefault(require(\"../abi/Unipool.json\"));\n\nconst IERC20_json_1 = __importDefault(require(\"../abi/IERC20.json\"));\n\nconst ERC20Mock_json_1 = __importDefault(require(\"../abi/ERC20Mock.json\"));\n\nconst buildEstimatedFunctions = (estimateFunctions, functions) => Object.fromEntries(Object.keys(estimateFunctions).map(functionName => [functionName, async (overrides, adjustEstimate, ...args) => {\n  if (overrides.gasLimit === undefined) {\n    const estimatedGas = await estimateFunctions[functionName](...args, overrides);\n    overrides = { ...overrides,\n      gasLimit: adjustEstimate(estimatedGas)\n    };\n  }\n\n  return functions[functionName](...args, overrides);\n}]));\n\nclass _LiquityContract extends contracts_1.Contract {\n  constructor(addressOrName, contractInterface, signerOrProvider) {\n    super(addressOrName, contractInterface, signerOrProvider); // this.estimateAndCall = buildEstimatedFunctions(this.estimateGas, this);\n\n    this.estimateAndPopulate = buildEstimatedFunctions(this.estimateGas, this.populateTransaction);\n  }\n\n  extractEvents(logs, name) {\n    return logs.filter(log => log.address === this.address).map(log => this.interface.parseLog(log)).filter(e => e.name === name);\n  }\n\n}\n\nexports._LiquityContract = _LiquityContract;\n/** @internal */\n\nconst _priceFeedIsTestnet = priceFeed => \"setPrice\" in priceFeed;\n\nexports._priceFeedIsTestnet = _priceFeedIsTestnet;\n/** @internal */\n\nconst _uniTokenIsMock = uniToken => \"mint\" in uniToken;\n\nexports._uniTokenIsMock = _uniTokenIsMock;\n\nconst getAbi = (priceFeedIsTestnet, uniTokenIsMock) => ({\n  activePool: ActivePool_json_1.default,\n  borrowerOperations: BorrowerOperations_json_1.default,\n  troveManager: TroveManager_json_1.default,\n  lusdToken: LUSDToken_json_1.default,\n  communityIssuance: CommunityIssuance_json_1.default,\n  defaultPool: DefaultPool_json_1.default,\n  lqtyToken: LQTYToken_json_1.default,\n  hintHelpers: HintHelpers_json_1.default,\n  lockupContractFactory: LockupContractFactory_json_1.default,\n  lqtyStaking: LQTYStaking_json_1.default,\n  multiTroveGetter: MultiTroveGetter_json_1.default,\n  priceFeed: priceFeedIsTestnet ? PriceFeedTestnet_json_1.default : PriceFeed_json_1.default,\n  sortedTroves: SortedTroves_json_1.default,\n  stabilityPool: StabilityPool_json_1.default,\n  gasPool: GasPool_json_1.default,\n  collSurplusPool: CollSurplusPool_json_1.default,\n  unipool: Unipool_json_1.default,\n  uniToken: uniTokenIsMock ? ERC20Mock_json_1.default : IERC20_json_1.default\n});\n\nconst mapLiquityContracts = (contracts, f) => Object.fromEntries(Object.entries(contracts).map(([key, t]) => [key, f(t, key)]));\n/** @internal */\n\n\nconst _connectToContracts = (signerOrProvider, {\n  addresses,\n  _priceFeedIsTestnet,\n  _uniTokenIsMock\n}) => {\n  const abi = getAbi(_priceFeedIsTestnet, _uniTokenIsMock);\n  return mapLiquityContracts(addresses, (address, key) => new _LiquityContract(address, abi[key], signerOrProvider));\n};\n\nexports._connectToContracts = _connectToContracts;","map":{"version":3,"sources":["../../src/contracts.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._connectToContracts = exports._uniTokenIsMock = exports._priceFeedIsTestnet = exports._LiquityContract = void 0;\nconst contracts_1 = require(\"@ethersproject/contracts\");\nconst ActivePool_json_1 = __importDefault(require(\"../abi/ActivePool.json\"));\nconst BorrowerOperations_json_1 = __importDefault(require(\"../abi/BorrowerOperations.json\"));\nconst TroveManager_json_1 = __importDefault(require(\"../abi/TroveManager.json\"));\nconst LUSDToken_json_1 = __importDefault(require(\"../abi/LUSDToken.json\"));\nconst CollSurplusPool_json_1 = __importDefault(require(\"../abi/CollSurplusPool.json\"));\nconst CommunityIssuance_json_1 = __importDefault(require(\"../abi/CommunityIssuance.json\"));\nconst DefaultPool_json_1 = __importDefault(require(\"../abi/DefaultPool.json\"));\nconst LQTYToken_json_1 = __importDefault(require(\"../abi/LQTYToken.json\"));\nconst HintHelpers_json_1 = __importDefault(require(\"../abi/HintHelpers.json\"));\nconst LockupContractFactory_json_1 = __importDefault(require(\"../abi/LockupContractFactory.json\"));\nconst LQTYStaking_json_1 = __importDefault(require(\"../abi/LQTYStaking.json\"));\nconst MultiTroveGetter_json_1 = __importDefault(require(\"../abi/MultiTroveGetter.json\"));\nconst PriceFeed_json_1 = __importDefault(require(\"../abi/PriceFeed.json\"));\nconst PriceFeedTestnet_json_1 = __importDefault(require(\"../abi/PriceFeedTestnet.json\"));\nconst SortedTroves_json_1 = __importDefault(require(\"../abi/SortedTroves.json\"));\nconst StabilityPool_json_1 = __importDefault(require(\"../abi/StabilityPool.json\"));\nconst GasPool_json_1 = __importDefault(require(\"../abi/GasPool.json\"));\nconst Unipool_json_1 = __importDefault(require(\"../abi/Unipool.json\"));\nconst IERC20_json_1 = __importDefault(require(\"../abi/IERC20.json\"));\nconst ERC20Mock_json_1 = __importDefault(require(\"../abi/ERC20Mock.json\"));\nconst buildEstimatedFunctions = (estimateFunctions, functions) => Object.fromEntries(Object.keys(estimateFunctions).map(functionName => [\n    functionName,\n    async (overrides, adjustEstimate, ...args) => {\n        if (overrides.gasLimit === undefined) {\n            const estimatedGas = await estimateFunctions[functionName](...args, overrides);\n            overrides = {\n                ...overrides,\n                gasLimit: adjustEstimate(estimatedGas)\n            };\n        }\n        return functions[functionName](...args, overrides);\n    }\n]));\nclass _LiquityContract extends contracts_1.Contract {\n    constructor(addressOrName, contractInterface, signerOrProvider) {\n        super(addressOrName, contractInterface, signerOrProvider);\n        // this.estimateAndCall = buildEstimatedFunctions(this.estimateGas, this);\n        this.estimateAndPopulate = buildEstimatedFunctions(this.estimateGas, this.populateTransaction);\n    }\n    extractEvents(logs, name) {\n        return logs\n            .filter(log => log.address === this.address)\n            .map(log => this.interface.parseLog(log))\n            .filter(e => e.name === name);\n    }\n}\nexports._LiquityContract = _LiquityContract;\n/** @internal */\nconst _priceFeedIsTestnet = (priceFeed) => \"setPrice\" in priceFeed;\nexports._priceFeedIsTestnet = _priceFeedIsTestnet;\n/** @internal */\nconst _uniTokenIsMock = (uniToken) => \"mint\" in uniToken;\nexports._uniTokenIsMock = _uniTokenIsMock;\nconst getAbi = (priceFeedIsTestnet, uniTokenIsMock) => ({\n    activePool: ActivePool_json_1.default,\n    borrowerOperations: BorrowerOperations_json_1.default,\n    troveManager: TroveManager_json_1.default,\n    lusdToken: LUSDToken_json_1.default,\n    communityIssuance: CommunityIssuance_json_1.default,\n    defaultPool: DefaultPool_json_1.default,\n    lqtyToken: LQTYToken_json_1.default,\n    hintHelpers: HintHelpers_json_1.default,\n    lockupContractFactory: LockupContractFactory_json_1.default,\n    lqtyStaking: LQTYStaking_json_1.default,\n    multiTroveGetter: MultiTroveGetter_json_1.default,\n    priceFeed: priceFeedIsTestnet ? PriceFeedTestnet_json_1.default : PriceFeed_json_1.default,\n    sortedTroves: SortedTroves_json_1.default,\n    stabilityPool: StabilityPool_json_1.default,\n    gasPool: GasPool_json_1.default,\n    collSurplusPool: CollSurplusPool_json_1.default,\n    unipool: Unipool_json_1.default,\n    uniToken: uniTokenIsMock ? ERC20Mock_json_1.default : IERC20_json_1.default\n});\nconst mapLiquityContracts = (contracts, f) => Object.fromEntries(Object.entries(contracts).map(([key, t]) => [key, f(t, key)]));\n/** @internal */\nconst _connectToContracts = (signerOrProvider, { addresses, _priceFeedIsTestnet, _uniTokenIsMock }) => {\n    const abi = getAbi(_priceFeedIsTestnet, _uniTokenIsMock);\n    return mapLiquityContracts(addresses, (address, key) => new _LiquityContract(address, abi[key], signerOrProvider));\n};\nexports._connectToContracts = _connectToContracts;\n//# sourceMappingURL=contracts.js.map"]},"metadata":{},"sourceType":"script"}