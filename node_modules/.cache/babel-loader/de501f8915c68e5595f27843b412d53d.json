{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { Decimal } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\n\nconst selector = ({\n  uniTokenBalance,\n  uniTokenAllowance,\n  liquidityMiningStake\n}) => ({\n  uniTokenBalance,\n  uniTokenAllowance,\n  liquidityMiningStake\n});\n\nexport const useValidationState = amount => {\n  _s();\n\n  const {\n    uniTokenBalance,\n    uniTokenAllowance,\n    liquidityMiningStake\n  } = useLiquitySelector(selector);\n  const isWithdrawing = liquidityMiningStake.gt(amount);\n  const amountChanged = isWithdrawing ? liquidityMiningStake.sub(amount) : Decimal.from(amount).sub(liquidityMiningStake);\n  const maximumStake = liquidityMiningStake.add(uniTokenBalance);\n  const hasSetMaximumStake = amount.eq(maximumStake);\n\n  if (isWithdrawing) {\n    return {\n      isValid: true,\n      hasApproved: true,\n      hasEnoughUniToken: true,\n      isWithdrawing,\n      amountChanged,\n      maximumStake,\n      hasSetMaximumStake\n    };\n  }\n\n  const hasApproved = !uniTokenAllowance.isZero && uniTokenAllowance.gte(amountChanged);\n  const hasEnoughUniToken = !uniTokenBalance.isZero && uniTokenBalance.gte(amountChanged);\n  return {\n    isValid: hasApproved && hasEnoughUniToken,\n    hasApproved,\n    hasEnoughUniToken,\n    isWithdrawing,\n    amountChanged,\n    maximumStake,\n    hasSetMaximumStake\n  };\n};\n\n_s(useValidationState, \"x1eYqhRqHneFCqYh5UTWpuVeY5E=\", false, function () {\n  return [useLiquitySelector];\n});","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/context/useValidationState.ts"],"names":["Decimal","useLiquitySelector","selector","uniTokenBalance","uniTokenAllowance","liquidityMiningStake","useValidationState","amount","isWithdrawing","gt","amountChanged","sub","from","maximumStake","add","hasSetMaximumStake","eq","isValid","hasApproved","hasEnoughUniToken","isZero","gte"],"mappings":";;AAAA,SAASA,OAAT,QAA2C,mBAA3C;AACA,SAASC,kBAAT,QAAmC,oBAAnC;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,eADgB;AAEhBC,EAAAA,iBAFgB;AAGhBC,EAAAA;AAHgB,CAAD,MAIS;AACxBF,EAAAA,eADwB;AAExBC,EAAAA,iBAFwB;AAGxBC,EAAAA;AAHwB,CAJT,CAAjB;;AAoBA,OAAO,MAAMC,kBAAkB,GAAIC,MAAD,IAA0C;AAAA;;AAC1E,QAAM;AAAEJ,IAAAA,eAAF;AAAmBC,IAAAA,iBAAnB;AAAsCC,IAAAA;AAAtC,MAA+DJ,kBAAkB,CAACC,QAAD,CAAvF;AACA,QAAMM,aAAa,GAAGH,oBAAoB,CAACI,EAArB,CAAwBF,MAAxB,CAAtB;AACA,QAAMG,aAAa,GAAGF,aAAa,GAC/BH,oBAAoB,CAACM,GAArB,CAAyBJ,MAAzB,CAD+B,GAE/BP,OAAO,CAACY,IAAR,CAAaL,MAAb,EAAqBI,GAArB,CAAyBN,oBAAzB,CAFJ;AAGA,QAAMQ,YAAY,GAAGR,oBAAoB,CAACS,GAArB,CAAyBX,eAAzB,CAArB;AACA,QAAMY,kBAAkB,GAAGR,MAAM,CAACS,EAAP,CAAUH,YAAV,CAA3B;;AAEA,MAAIL,aAAJ,EAAmB;AACjB,WAAO;AACLS,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,WAAW,EAAE,IAFR;AAGLC,MAAAA,iBAAiB,EAAE,IAHd;AAILX,MAAAA,aAJK;AAKLE,MAAAA,aALK;AAMLG,MAAAA,YANK;AAOLE,MAAAA;AAPK,KAAP;AASD;;AAED,QAAMG,WAAW,GAAG,CAACd,iBAAiB,CAACgB,MAAnB,IAA6BhB,iBAAiB,CAACiB,GAAlB,CAAsBX,aAAtB,CAAjD;AACA,QAAMS,iBAAiB,GAAG,CAAChB,eAAe,CAACiB,MAAjB,IAA2BjB,eAAe,CAACkB,GAAhB,CAAoBX,aAApB,CAArD;AAEA,SAAO;AACLO,IAAAA,OAAO,EAAEC,WAAW,IAAIC,iBADnB;AAELD,IAAAA,WAFK;AAGLC,IAAAA,iBAHK;AAILX,IAAAA,aAJK;AAKLE,IAAAA,aALK;AAMLG,IAAAA,YANK;AAOLE,IAAAA;AAPK,GAAP;AASD,CAjCM;;GAAMT,kB;UAC0DL,kB","sourcesContent":["import { Decimal, LiquityStoreState } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\n\nconst selector = ({\n  uniTokenBalance,\n  uniTokenAllowance,\n  liquidityMiningStake\n}: LiquityStoreState) => ({\n  uniTokenBalance,\n  uniTokenAllowance,\n  liquidityMiningStake\n});\n\ntype FarmStakeValidation = {\n  isValid: boolean;\n  hasApproved: boolean;\n  hasEnoughUniToken: boolean;\n  isWithdrawing: boolean;\n  amountChanged: Decimal;\n  maximumStake: Decimal;\n  hasSetMaximumStake: boolean;\n};\n\nexport const useValidationState = (amount: Decimal): FarmStakeValidation => {\n  const { uniTokenBalance, uniTokenAllowance, liquidityMiningStake } = useLiquitySelector(selector);\n  const isWithdrawing = liquidityMiningStake.gt(amount);\n  const amountChanged = isWithdrawing\n    ? liquidityMiningStake.sub(amount)\n    : Decimal.from(amount).sub(liquidityMiningStake);\n  const maximumStake = liquidityMiningStake.add(uniTokenBalance);\n  const hasSetMaximumStake = amount.eq(maximumStake);\n\n  if (isWithdrawing) {\n    return {\n      isValid: true,\n      hasApproved: true,\n      hasEnoughUniToken: true,\n      isWithdrawing,\n      amountChanged,\n      maximumStake,\n      hasSetMaximumStake\n    };\n  }\n\n  const hasApproved = !uniTokenAllowance.isZero && uniTokenAllowance.gte(amountChanged);\n  const hasEnoughUniToken = !uniTokenBalance.isZero && uniTokenBalance.gte(amountChanged);\n\n  return {\n    isValid: hasApproved && hasEnoughUniToken,\n    hasApproved,\n    hasEnoughUniToken,\n    isWithdrawing,\n    amountChanged,\n    maximumStake,\n    hasSetMaximumStake\n  };\n};\n"]},"metadata":{},"sourceType":"module"}