{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LQTYStake = void 0;\n\nvar Decimal_1 = require(\"./Decimal\");\n/**\n * Represents a user's LQTY stake and accrued gains.\n *\n * @remarks\n * Returned by the {@link ReadableLiquity.getLQTYStake | getLQTYStake()} function.\n\n * @public\n */\n\n\nvar LQTYStake = /*#__PURE__*/function () {\n  /** @internal */\n  function LQTYStake() {\n    var stakedLQTY = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Decimal_1.Decimal.ZERO;\n    var collateralGain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Decimal_1.Decimal.ZERO;\n    var lusdGain = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Decimal_1.Decimal.ZERO;\n\n    _classCallCheck(this, LQTYStake);\n\n    this.stakedLQTY = stakedLQTY;\n    this.collateralGain = collateralGain;\n    this.lusdGain = lusdGain;\n  }\n\n  _createClass(LQTYStake, [{\n    key: \"isEmpty\",\n    get: function get() {\n      return this.stakedLQTY.isZero && this.collateralGain.isZero && this.lusdGain.isZero;\n    }\n    /** @internal */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"{ stakedLQTY: \".concat(this.stakedLQTY) + \", collateralGain: \".concat(this.collateralGain) + \", lusdGain: \".concat(this.lusdGain, \" }\");\n    }\n    /**\n     * Compare to another instance of `LQTYStake`.\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(that) {\n      return this.stakedLQTY.eq(that.stakedLQTY) && this.collateralGain.eq(that.collateralGain) && this.lusdGain.eq(that.lusdGain);\n    }\n    /**\n     * Calculate the difference between this `LQTYStake` and `thatStakedLQTY`.\n     *\n     * @returns An object representing the change, or `undefined` if the staked amounts are equal.\n     */\n\n  }, {\n    key: \"whatChanged\",\n    value: function whatChanged(thatStakedLQTY) {\n      thatStakedLQTY = Decimal_1.Decimal.from(thatStakedLQTY);\n\n      if (thatStakedLQTY.lt(this.stakedLQTY)) {\n        return {\n          unstakeLQTY: this.stakedLQTY.sub(thatStakedLQTY),\n          unstakeAllLQTY: thatStakedLQTY.isZero\n        };\n      }\n\n      if (thatStakedLQTY.gt(this.stakedLQTY)) {\n        return {\n          stakeLQTY: thatStakedLQTY.sub(this.stakedLQTY)\n        };\n      }\n    }\n    /**\n     * Apply a {@link LQTYStakeChange} to this `LQTYStake`.\n     *\n     * @returns The new staked LQTY amount.\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply(change) {\n      if (!change) {\n        return this.stakedLQTY;\n      }\n\n      if (change.unstakeLQTY !== undefined) {\n        return change.unstakeAllLQTY || this.stakedLQTY.lte(change.unstakeLQTY) ? Decimal_1.Decimal.ZERO : this.stakedLQTY.sub(change.unstakeLQTY);\n      } else {\n        return this.stakedLQTY.add(change.stakeLQTY);\n      }\n    }\n  }]);\n\n  return LQTYStake;\n}();\n\nexports.LQTYStake = LQTYStake;","map":{"version":3,"sources":["../../src/LQTYStake.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAWA;;;;;;;AAOG;;;IACU,S;AAUX;AACA,uBAA6F;AAAA,QAAjF,UAAiF,uEAApE,SAAA,CAAA,OAAA,CAAQ,IAA4D;AAAA,QAAtD,cAAsD,uEAArC,SAAA,CAAA,OAAA,CAAQ,IAA6B;AAAA,QAAvB,QAAuB,uEAAZ,SAAA,CAAA,OAAA,CAAQ,IAAI;;AAAA;;AAC3F,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,cAAL,GAAsB,cAAtB;AACA,SAAK,QAAL,GAAgB,QAAhB;AACD;;;;SAED,eAAW;AACT,aAAO,KAAK,UAAL,CAAgB,MAAhB,IAA0B,KAAK,cAAL,CAAoB,MAA9C,IAAwD,KAAK,QAAL,CAAc,MAA7E;AACD;AAED;;;;WACA,oBAAQ;AACN,aACE,wBAAiB,KAAK,UAAtB,gCACqB,KAAK,cAD1B,0BAEe,KAAK,QAFpB,OADF;AAKD;AAED;;AAEG;;;;WACH,gBAAO,IAAP,EAAsB;AACpB,aACE,KAAK,UAAL,CAAgB,EAAhB,CAAmB,IAAI,CAAC,UAAxB,KACA,KAAK,cAAL,CAAoB,EAApB,CAAuB,IAAI,CAAC,cAA5B,CADA,IAEA,KAAK,QAAL,CAAc,EAAd,CAAiB,IAAI,CAAC,QAAtB,CAHF;AAKD;AAED;;;;AAIG;;;;WACH,qBAAY,cAAZ,EAAsC;AACpC,MAAA,cAAc,GAAG,SAAA,CAAA,OAAA,CAAQ,IAAR,CAAa,cAAb,CAAjB;;AAEA,UAAI,cAAc,CAAC,EAAf,CAAkB,KAAK,UAAvB,CAAJ,EAAwC;AACtC,eAAO;AACL,UAAA,WAAW,EAAE,KAAK,UAAL,CAAgB,GAAhB,CAAoB,cAApB,CADR;AAEL,UAAA,cAAc,EAAE,cAAc,CAAC;AAF1B,SAAP;AAID;;AAED,UAAI,cAAc,CAAC,EAAf,CAAkB,KAAK,UAAvB,CAAJ,EAAwC;AACtC,eAAO;AAAE,UAAA,SAAS,EAAE,cAAc,CAAC,GAAf,CAAmB,KAAK,UAAxB;AAAb,SAAP;AACD;AACF;AAED;;;;AAIG;;;;WACH,eAAM,MAAN,EAAqD;AACnD,UAAI,CAAC,MAAL,EAAa;AACX,eAAO,KAAK,UAAZ;AACD;;AAED,UAAI,MAAM,CAAC,WAAP,KAAuB,SAA3B,EAAsC;AACpC,eAAO,MAAM,CAAC,cAAP,IAAyB,KAAK,UAAL,CAAgB,GAAhB,CAAoB,MAAM,CAAC,WAA3B,CAAzB,GACH,SAAA,CAAA,OAAA,CAAQ,IADL,GAEH,KAAK,UAAL,CAAgB,GAAhB,CAAoB,MAAM,CAAC,WAA3B,CAFJ;AAGD,OAJD,MAIO;AACL,eAAO,KAAK,UAAL,CAAgB,GAAhB,CAAoB,MAAM,CAAC,SAA3B,CAAP;AACD;AACF;;;;;;AA9EH,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LQTYStake = void 0;\nconst Decimal_1 = require(\"./Decimal\");\n/**\n * Represents a user's LQTY stake and accrued gains.\n *\n * @remarks\n * Returned by the {@link ReadableLiquity.getLQTYStake | getLQTYStake()} function.\n\n * @public\n */\nclass LQTYStake {\n    /** @internal */\n    constructor(stakedLQTY = Decimal_1.Decimal.ZERO, collateralGain = Decimal_1.Decimal.ZERO, lusdGain = Decimal_1.Decimal.ZERO) {\n        this.stakedLQTY = stakedLQTY;\n        this.collateralGain = collateralGain;\n        this.lusdGain = lusdGain;\n    }\n    get isEmpty() {\n        return this.stakedLQTY.isZero && this.collateralGain.isZero && this.lusdGain.isZero;\n    }\n    /** @internal */\n    toString() {\n        return (`{ stakedLQTY: ${this.stakedLQTY}` +\n            `, collateralGain: ${this.collateralGain}` +\n            `, lusdGain: ${this.lusdGain} }`);\n    }\n    /**\n     * Compare to another instance of `LQTYStake`.\n     */\n    equals(that) {\n        return (this.stakedLQTY.eq(that.stakedLQTY) &&\n            this.collateralGain.eq(that.collateralGain) &&\n            this.lusdGain.eq(that.lusdGain));\n    }\n    /**\n     * Calculate the difference between this `LQTYStake` and `thatStakedLQTY`.\n     *\n     * @returns An object representing the change, or `undefined` if the staked amounts are equal.\n     */\n    whatChanged(thatStakedLQTY) {\n        thatStakedLQTY = Decimal_1.Decimal.from(thatStakedLQTY);\n        if (thatStakedLQTY.lt(this.stakedLQTY)) {\n            return {\n                unstakeLQTY: this.stakedLQTY.sub(thatStakedLQTY),\n                unstakeAllLQTY: thatStakedLQTY.isZero\n            };\n        }\n        if (thatStakedLQTY.gt(this.stakedLQTY)) {\n            return { stakeLQTY: thatStakedLQTY.sub(this.stakedLQTY) };\n        }\n    }\n    /**\n     * Apply a {@link LQTYStakeChange} to this `LQTYStake`.\n     *\n     * @returns The new staked LQTY amount.\n     */\n    apply(change) {\n        if (!change) {\n            return this.stakedLQTY;\n        }\n        if (change.unstakeLQTY !== undefined) {\n            return change.unstakeAllLQTY || this.stakedLQTY.lte(change.unstakeLQTY)\n                ? Decimal_1.Decimal.ZERO\n                : this.stakedLQTY.sub(change.unstakeLQTY);\n        }\n        else {\n            return this.stakedLQTY.add(change.stakeLQTY);\n        }\n    }\n}\nexports.LQTYStake = LQTYStake;\n//# sourceMappingURL=LQTYStake.js.map"]},"metadata":{},"sourceType":"script"}