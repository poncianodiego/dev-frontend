{"ast":null,"code":"import React,{useCallback,useEffect}from\"react\";import{Card,Heading,Box,Flex,Button}from\"theme-ui\";import{useLiquitySelector}from\"@liquity/lib-react\";import{COIN,GT}from\"../../strings\";import{Icon}from\"../Icon\";import{LoadingOverlay}from\"../LoadingOverlay\";import{useMyTransactionState}from\"../Transaction\";import{DisabledEditableRow,StaticRow}from\"../Trove/Editor\";import{ClaimAndMove}from\"./actions/ClaimAndMove\";import{ClaimRewards}from\"./actions/ClaimRewards\";import{useStabilityView}from\"./context/StabilityViewContext\";import{RemainingLQTY}from\"./RemainingLQTY\";import{Yield}from\"./Yield\";import{InfoIcon}from\"../InfoIcon\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var selector=function selector(_ref){var stabilityDeposit=_ref.stabilityDeposit,trove=_ref.trove,lusdInStabilityPool=_ref.lusdInStabilityPool;return{stabilityDeposit:stabilityDeposit,trove:trove,lusdInStabilityPool:lusdInStabilityPool};};export var ActiveDeposit=function ActiveDeposit(){var _useStabilityView=useStabilityView(),dispatchEvent=_useStabilityView.dispatchEvent;var _useLiquitySelector=useLiquitySelector(selector),stabilityDeposit=_useLiquitySelector.stabilityDeposit,trove=_useLiquitySelector.trove,lusdInStabilityPool=_useLiquitySelector.lusdInStabilityPool;var poolShare=stabilityDeposit.currentLUSD.mulDiv(100,lusdInStabilityPool);var handleAdjustDeposit=useCallback(function(){dispatchEvent(\"ADJUST_DEPOSIT_PRESSED\");},[dispatchEvent]);var hasReward=!stabilityDeposit.lqtyReward.isZero;var hasGain=!stabilityDeposit.collateralGain.isZero;var hasTrove=!trove.isEmpty;var transactionId=\"stability-deposit\";var transactionState=useMyTransactionState(transactionId);var isWaitingForTransaction=transactionState.type===\"waitingForApproval\"||transactionState.type===\"waitingForConfirmation\";useEffect(function(){if(transactionState.type===\"confirmedOneShot\"){dispatchEvent(\"REWARDS_CLAIMED\");}},[transactionState.type,dispatchEvent]);return/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsxs(Heading,{children:[\"Stability Pool\",!isWaitingForTransaction&&/*#__PURE__*/_jsx(Flex,{sx:{justifyContent:\"flex-end\"},children:/*#__PURE__*/_jsx(RemainingLQTY,{})})]}),/*#__PURE__*/_jsxs(Box,{sx:{p:[2,3]},children:[/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(DisabledEditableRow,{label:\"Deposit\",inputId:\"deposit-lusd\",amount:stabilityDeposit.currentLUSD.prettify(),unit:COIN}),/*#__PURE__*/_jsx(StaticRow,{label:\"Pool share\",inputId:\"deposit-share\",amount:poolShare.prettify(4),unit:\"%\"}),/*#__PURE__*/_jsx(StaticRow,{label:\"Liquidation gain\",inputId:\"deposit-gain\",amount:stabilityDeposit.collateralGain.prettify(4),color:stabilityDeposit.collateralGain.nonZero&&\"success\",unit:\"ETH\"}),/*#__PURE__*/_jsxs(Flex,{sx:{alignItems:\"center\"},children:[/*#__PURE__*/_jsx(StaticRow,{label:\"Reward\",inputId:\"deposit-reward\",amount:stabilityDeposit.lqtyReward.prettify(),color:stabilityDeposit.lqtyReward.nonZero&&\"success\",unit:GT,infoIcon:/*#__PURE__*/_jsx(InfoIcon,{tooltip:/*#__PURE__*/_jsx(Card,{variant:\"tooltip\",sx:{width:\"240px\"},children:\"Although the LQTY rewards accrue every minute, the value on the UI only updates when a user transacts with the Stability Pool. Therefore you may receive more rewards than is displayed when you claim or adjust your deposit.\"})})}),/*#__PURE__*/_jsx(Flex,{sx:{justifyContent:\"flex-end\",flex:1},children:/*#__PURE__*/_jsx(Yield,{})})]})]}),/*#__PURE__*/_jsxs(Flex,{variant:\"layout.actions\",children:[/*#__PURE__*/_jsxs(Button,{variant:\"outline\",onClick:handleAdjustDeposit,children:[/*#__PURE__*/_jsx(Icon,{name:\"pen\",size:\"sm\"}),\"\\xA0Adjust\"]}),/*#__PURE__*/_jsx(ClaimRewards,{disabled:!hasGain&&!hasReward,children:\"Claim ETH and LQTY\"})]}),hasTrove&&/*#__PURE__*/_jsx(ClaimAndMove,{disabled:!hasGain,children:\"Claim LQTY and move ETH to Trove\"})]}),isWaitingForTransaction&&/*#__PURE__*/_jsx(LoadingOverlay,{})]});};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Stability/ActiveDeposit.tsx"],"names":["React","useCallback","useEffect","Card","Heading","Box","Flex","Button","useLiquitySelector","COIN","GT","Icon","LoadingOverlay","useMyTransactionState","DisabledEditableRow","StaticRow","ClaimAndMove","ClaimRewards","useStabilityView","RemainingLQTY","Yield","InfoIcon","selector","stabilityDeposit","trove","lusdInStabilityPool","ActiveDeposit","dispatchEvent","poolShare","currentLUSD","mulDiv","handleAdjustDeposit","hasReward","lqtyReward","isZero","hasGain","collateralGain","hasTrove","isEmpty","transactionId","transactionState","isWaitingForTransaction","type","justifyContent","p","prettify","nonZero","alignItems","width","flex"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,CAA6BC,SAA7B,KAA8C,OAA9C,CACA,OAASC,IAAT,CAAeC,OAAf,CAAwBC,GAAxB,CAA6BC,IAA7B,CAAmCC,MAAnC,KAAiD,UAAjD,CAGA,OAASC,kBAAT,KAAmC,oBAAnC,CAEA,OAASC,IAAT,CAAeC,EAAf,KAAyB,eAAzB,CACA,OAASC,IAAT,KAAqB,SAArB,CACA,OAASC,cAAT,KAA+B,mBAA/B,CACA,OAASC,qBAAT,KAAsC,gBAAtC,CACA,OAASC,mBAAT,CAA8BC,SAA9B,KAA+C,iBAA/C,CACA,OAASC,YAAT,KAA6B,wBAA7B,CACA,OAASC,YAAT,KAA6B,wBAA7B,CACA,OAASC,gBAAT,KAAiC,gCAAjC,CACA,OAASC,aAAT,KAA8B,iBAA9B,CACA,OAASC,KAAT,KAAsB,SAAtB,CACA,OAASC,QAAT,KAAyB,aAAzB,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,UAAGC,CAAAA,gBAAH,MAAGA,gBAAH,CAAqBC,KAArB,MAAqBA,KAArB,CAA4BC,mBAA5B,MAA4BA,mBAA5B,OAA0E,CACzFF,gBAAgB,CAAhBA,gBADyF,CAEzFC,KAAK,CAALA,KAFyF,CAGzFC,mBAAmB,CAAnBA,mBAHyF,CAA1E,EAAjB,CAMA,MAAO,IAAMC,CAAAA,aAAuB,CAAG,QAA1BA,CAAAA,aAA0B,EAAM,uBACjBR,gBAAgB,EADC,CACnCS,aADmC,mBACnCA,aADmC,yBAEcnB,kBAAkB,CAACc,QAAD,CAFhC,CAEnCC,gBAFmC,qBAEnCA,gBAFmC,CAEjBC,KAFiB,qBAEjBA,KAFiB,CAEVC,mBAFU,qBAEVA,mBAFU,CAI3C,GAAMG,CAAAA,SAAS,CAAGL,gBAAgB,CAACM,WAAjB,CAA6BC,MAA7B,CAAoC,GAApC,CAAyCL,mBAAzC,CAAlB,CAEA,GAAMM,CAAAA,mBAAmB,CAAG9B,WAAW,CAAC,UAAM,CAC5C0B,aAAa,CAAC,wBAAD,CAAb,CACD,CAFsC,CAEpC,CAACA,aAAD,CAFoC,CAAvC,CAIA,GAAMK,CAAAA,SAAS,CAAG,CAACT,gBAAgB,CAACU,UAAjB,CAA4BC,MAA/C,CACA,GAAMC,CAAAA,OAAO,CAAG,CAACZ,gBAAgB,CAACa,cAAjB,CAAgCF,MAAjD,CACA,GAAMG,CAAAA,QAAQ,CAAG,CAACb,KAAK,CAACc,OAAxB,CAEA,GAAMC,CAAAA,aAAa,CAAG,mBAAtB,CACA,GAAMC,CAAAA,gBAAgB,CAAG3B,qBAAqB,CAAC0B,aAAD,CAA9C,CACA,GAAME,CAAAA,uBAAuB,CAC3BD,gBAAgB,CAACE,IAAjB,GAA0B,oBAA1B,EACAF,gBAAgB,CAACE,IAAjB,GAA0B,wBAF5B,CAIAxC,SAAS,CAAC,UAAM,CACd,GAAIsC,gBAAgB,CAACE,IAAjB,GAA0B,kBAA9B,CAAkD,CAChDf,aAAa,CAAC,iBAAD,CAAb,CACD,CACF,CAJQ,CAIN,CAACa,gBAAgB,CAACE,IAAlB,CAAwBf,aAAxB,CAJM,CAAT,CAMA,mBACE,MAAC,IAAD,yBACE,MAAC,OAAD,6BAEG,CAACc,uBAAD,eACC,KAAC,IAAD,EAAM,EAAE,CAAE,CAAEE,cAAc,CAAE,UAAlB,CAAV,uBACE,KAAC,aAAD,IADF,EAHJ,GADF,cASE,MAAC,GAAD,EAAK,EAAE,CAAE,CAAEC,CAAC,CAAE,CAAC,CAAD,CAAI,CAAJ,CAAL,CAAT,wBACE,MAAC,GAAD,yBACE,KAAC,mBAAD,EACE,KAAK,CAAC,SADR,CAEE,OAAO,CAAC,cAFV,CAGE,MAAM,CAAErB,gBAAgB,CAACM,WAAjB,CAA6BgB,QAA7B,EAHV,CAIE,IAAI,CAAEpC,IAJR,EADF,cAQE,KAAC,SAAD,EACE,KAAK,CAAC,YADR,CAEE,OAAO,CAAC,eAFV,CAGE,MAAM,CAAEmB,SAAS,CAACiB,QAAV,CAAmB,CAAnB,CAHV,CAIE,IAAI,CAAC,GAJP,EARF,cAeE,KAAC,SAAD,EACE,KAAK,CAAC,kBADR,CAEE,OAAO,CAAC,cAFV,CAGE,MAAM,CAAEtB,gBAAgB,CAACa,cAAjB,CAAgCS,QAAhC,CAAyC,CAAzC,CAHV,CAIE,KAAK,CAAEtB,gBAAgB,CAACa,cAAjB,CAAgCU,OAAhC,EAA2C,SAJpD,CAKE,IAAI,CAAC,KALP,EAfF,cAuBE,MAAC,IAAD,EAAM,EAAE,CAAE,CAAEC,UAAU,CAAE,QAAd,CAAV,wBACE,KAAC,SAAD,EACE,KAAK,CAAC,QADR,CAEE,OAAO,CAAC,gBAFV,CAGE,MAAM,CAAExB,gBAAgB,CAACU,UAAjB,CAA4BY,QAA5B,EAHV,CAIE,KAAK,CAAEtB,gBAAgB,CAACU,UAAjB,CAA4Ba,OAA5B,EAAuC,SAJhD,CAKE,IAAI,CAAEpC,EALR,CAME,QAAQ,cACN,KAAC,QAAD,EACE,OAAO,cACL,KAAC,IAAD,EAAM,OAAO,CAAC,SAAd,CAAwB,EAAE,CAAE,CAAEsC,KAAK,CAAE,OAAT,CAA5B,4OAFJ,EAPJ,EADF,cAmBE,KAAC,IAAD,EAAM,EAAE,CAAE,CAAEL,cAAc,CAAE,UAAlB,CAA8BM,IAAI,CAAE,CAApC,CAAV,uBACE,KAAC,KAAD,IADF,EAnBF,GAvBF,GADF,cAiDE,MAAC,IAAD,EAAM,OAAO,CAAC,gBAAd,wBACE,MAAC,MAAD,EAAQ,OAAO,CAAC,SAAhB,CAA0B,OAAO,CAAElB,mBAAnC,wBACE,KAAC,IAAD,EAAM,IAAI,CAAC,KAAX,CAAiB,IAAI,CAAC,IAAtB,EADF,gBADF,cAME,KAAC,YAAD,EAAc,QAAQ,CAAE,CAACI,OAAD,EAAY,CAACH,SAArC,gCANF,GAjDF,CA0DGK,QAAQ,eACP,KAAC,YAAD,EAAc,QAAQ,CAAE,CAACF,OAAzB,8CA3DJ,GATF,CAwEGM,uBAAuB,eAAI,KAAC,cAAD,IAxE9B,GADF,CA4ED,CAtGM","sourcesContent":["import React, { useCallback, useEffect } from \"react\";\nimport { Card, Heading, Box, Flex, Button } from \"theme-ui\";\n\nimport { LiquityStoreState } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\n\nimport { COIN, GT } from \"../../strings\";\nimport { Icon } from \"../Icon\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { useMyTransactionState } from \"../Transaction\";\nimport { DisabledEditableRow, StaticRow } from \"../Trove/Editor\";\nimport { ClaimAndMove } from \"./actions/ClaimAndMove\";\nimport { ClaimRewards } from \"./actions/ClaimRewards\";\nimport { useStabilityView } from \"./context/StabilityViewContext\";\nimport { RemainingLQTY } from \"./RemainingLQTY\";\nimport { Yield } from \"./Yield\";\nimport { InfoIcon } from \"../InfoIcon\";\n\nconst selector = ({ stabilityDeposit, trove, lusdInStabilityPool }: LiquityStoreState) => ({\n  stabilityDeposit,\n  trove,\n  lusdInStabilityPool\n});\n\nexport const ActiveDeposit: React.FC = () => {\n  const { dispatchEvent } = useStabilityView();\n  const { stabilityDeposit, trove, lusdInStabilityPool } = useLiquitySelector(selector);\n\n  const poolShare = stabilityDeposit.currentLUSD.mulDiv(100, lusdInStabilityPool);\n\n  const handleAdjustDeposit = useCallback(() => {\n    dispatchEvent(\"ADJUST_DEPOSIT_PRESSED\");\n  }, [dispatchEvent]);\n\n  const hasReward = !stabilityDeposit.lqtyReward.isZero;\n  const hasGain = !stabilityDeposit.collateralGain.isZero;\n  const hasTrove = !trove.isEmpty;\n\n  const transactionId = \"stability-deposit\";\n  const transactionState = useMyTransactionState(transactionId);\n  const isWaitingForTransaction =\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\";\n\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"REWARDS_CLAIMED\");\n    }\n  }, [transactionState.type, dispatchEvent]);\n\n  return (\n    <Card>\n      <Heading>\n        Stability Pool\n        {!isWaitingForTransaction && (\n          <Flex sx={{ justifyContent: \"flex-end\" }}>\n            <RemainingLQTY />\n          </Flex>\n        )}\n      </Heading>\n      <Box sx={{ p: [2, 3] }}>\n        <Box>\n          <DisabledEditableRow\n            label=\"Deposit\"\n            inputId=\"deposit-lusd\"\n            amount={stabilityDeposit.currentLUSD.prettify()}\n            unit={COIN}\n          />\n\n          <StaticRow\n            label=\"Pool share\"\n            inputId=\"deposit-share\"\n            amount={poolShare.prettify(4)}\n            unit=\"%\"\n          />\n\n          <StaticRow\n            label=\"Liquidation gain\"\n            inputId=\"deposit-gain\"\n            amount={stabilityDeposit.collateralGain.prettify(4)}\n            color={stabilityDeposit.collateralGain.nonZero && \"success\"}\n            unit=\"ETH\"\n          />\n\n          <Flex sx={{ alignItems: \"center\" }}>\n            <StaticRow\n              label=\"Reward\"\n              inputId=\"deposit-reward\"\n              amount={stabilityDeposit.lqtyReward.prettify()}\n              color={stabilityDeposit.lqtyReward.nonZero && \"success\"}\n              unit={GT}\n              infoIcon={\n                <InfoIcon\n                  tooltip={\n                    <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                      Although the LQTY rewards accrue every minute, the value on the UI only updates\n                      when a user transacts with the Stability Pool. Therefore you may receive more\n                      rewards than is displayed when you claim or adjust your deposit.\n                    </Card>\n                  }\n                />\n              }\n            />\n            <Flex sx={{ justifyContent: \"flex-end\", flex: 1 }}>\n              <Yield />\n            </Flex>\n          </Flex>\n        </Box>\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"outline\" onClick={handleAdjustDeposit}>\n            <Icon name=\"pen\" size=\"sm\" />\n            &nbsp;Adjust\n          </Button>\n\n          <ClaimRewards disabled={!hasGain && !hasReward}>Claim ETH and LQTY</ClaimRewards>\n        </Flex>\n\n        {hasTrove && (\n          <ClaimAndMove disabled={!hasGain}>Claim LQTY and move ETH to Trove</ClaimAndMove>\n        )}\n      </Box>\n\n      {isWaitingForTransaction && <LoadingOverlay />}\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}