{"ast":null,"code":"import _slicedToArray from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from\"react\";import{Button,Flex}from\"theme-ui\";import{Decimal}from\"@liquity/lib-base\";import{useLiquityReducer,useLiquitySelector}from\"@liquity/lib-react\";import{GT,COIN}from\"../../strings\";import{useStakingView}from\"./context/StakingViewContext\";import{StakingEditor}from\"./StakingEditor\";import{StakingManagerAction}from\"./StakingManagerAction\";import{ActionDescription,Amount}from\"../ActionDescription\";import{ErrorDescription}from\"../ErrorDescription\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var init=function init(_ref){var lqtyStake=_ref.lqtyStake;return{originalStake:lqtyStake,editedLQTY:lqtyStake.stakedLQTY};};var reduce=function reduce(state,action){// console.log(state);\n// console.log(action);\nvar originalStake=state.originalStake,editedLQTY=state.editedLQTY;switch(action.type){case\"setStake\":return _objectSpread(_objectSpread({},state),{},{editedLQTY:Decimal.from(action.newValue)});case\"revert\":return _objectSpread(_objectSpread({},state),{},{editedLQTY:originalStake.stakedLQTY});case\"updateStore\":{var updatedStake=action.stateChange.lqtyStake;if(updatedStake){return{originalStake:updatedStake,editedLQTY:updatedStake.apply(originalStake.whatChanged(editedLQTY))};}}}return state;};var selectLQTYBalance=function selectLQTYBalance(_ref2){var lqtyBalance=_ref2.lqtyBalance;return lqtyBalance;};var StakingManagerActionDescription=function StakingManagerActionDescription(_ref3){var _change$stakeLQTY,_change$unstakeLQTY,_originalStake$collat,_originalStake$lusdGa;var originalStake=_ref3.originalStake,change=_ref3.change;var stakeLQTY=(_change$stakeLQTY=change.stakeLQTY)===null||_change$stakeLQTY===void 0?void 0:_change$stakeLQTY.prettify().concat(\" \",GT);var unstakeLQTY=(_change$unstakeLQTY=change.unstakeLQTY)===null||_change$unstakeLQTY===void 0?void 0:_change$unstakeLQTY.prettify().concat(\" \",GT);var collateralGain=(_originalStake$collat=originalStake.collateralGain.nonZero)===null||_originalStake$collat===void 0?void 0:_originalStake$collat.prettify(4).concat(\" ETH\");var lusdGain=(_originalStake$lusdGa=originalStake.lusdGain.nonZero)===null||_originalStake$lusdGa===void 0?void 0:_originalStake$lusdGa.prettify().concat(\" \",COIN);if(originalStake.isEmpty&&stakeLQTY){return/*#__PURE__*/_jsxs(ActionDescription,{children:[\"You are staking \",/*#__PURE__*/_jsx(Amount,{children:stakeLQTY}),\".\"]});}return/*#__PURE__*/_jsxs(ActionDescription,{children:[stakeLQTY&&/*#__PURE__*/_jsxs(_Fragment,{children:[\"You are adding \",/*#__PURE__*/_jsx(Amount,{children:stakeLQTY}),\" to your stake\"]}),unstakeLQTY&&/*#__PURE__*/_jsxs(_Fragment,{children:[\"You are withdrawing \",/*#__PURE__*/_jsx(Amount,{children:unstakeLQTY}),\" to your wallet\"]}),(collateralGain||lusdGain)&&/*#__PURE__*/_jsxs(_Fragment,{children:[\" \",\"and claiming\",\" \",collateralGain&&lusdGain?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Amount,{children:collateralGain}),\" and \",/*#__PURE__*/_jsx(Amount,{children:lusdGain})]}):/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(Amount,{children:collateralGain!==null&&collateralGain!==void 0?collateralGain:lusdGain})})]}),\".\"]});};export var StakingManager=function StakingManager(){var _change$stakeLQTY2;var _useStakingView=useStakingView(),dispatchStakingViewAction=_useStakingView.dispatch;var _useLiquityReducer=useLiquityReducer(reduce,init),_useLiquityReducer2=_slicedToArray(_useLiquityReducer,2),_useLiquityReducer2$=_useLiquityReducer2[0],originalStake=_useLiquityReducer2$.originalStake,editedLQTY=_useLiquityReducer2$.editedLQTY,dispatch=_useLiquityReducer2[1];var lqtyBalance=useLiquitySelector(selectLQTYBalance);var change=originalStake.whatChanged(editedLQTY);var _ref4=!change?[undefined,undefined]:((_change$stakeLQTY2=change.stakeLQTY)===null||_change$stakeLQTY2===void 0?void 0:_change$stakeLQTY2.gt(lqtyBalance))?[undefined,/*#__PURE__*/_jsxs(ErrorDescription,{children:[\"The amount you're trying to stake exceeds your balance by\",\" \",/*#__PURE__*/_jsxs(Amount,{children:[change.stakeLQTY.sub(lqtyBalance).prettify(),\" \",GT]}),\".\"]})]:[change,/*#__PURE__*/_jsx(StakingManagerActionDescription,{originalStake:originalStake,change:change})],_ref5=_slicedToArray(_ref4,2),validChange=_ref5[0],description=_ref5[1];var makingNewStake=originalStake.isEmpty;return/*#__PURE__*/_jsxs(StakingEditor,{title:\"Staking\",originalStake:originalStake,editedLQTY:editedLQTY,dispatch:dispatch,children:[description!==null&&description!==void 0?description:makingNewStake?/*#__PURE__*/_jsxs(ActionDescription,{children:[\"Enter the amount of \",GT,\" you'd like to stake.\"]}):/*#__PURE__*/_jsxs(ActionDescription,{children:[\"Adjust the \",GT,\" amount to stake or withdraw.\"]}),/*#__PURE__*/_jsxs(Flex,{variant:\"layout.actions\",children:[/*#__PURE__*/_jsx(Button,{variant:\"cancel\",onClick:function onClick(){return dispatchStakingViewAction({type:\"cancelAdjusting\"});},children:\"Cancel\"}),validChange?/*#__PURE__*/_jsx(StakingManagerAction,{change:validChange,children:\"Confirm\"}):/*#__PURE__*/_jsx(Button,{disabled:true,children:\"Confirm\"})]})]});};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Staking/StakingManager.tsx"],"names":["React","Button","Flex","Decimal","useLiquityReducer","useLiquitySelector","GT","COIN","useStakingView","StakingEditor","StakingManagerAction","ActionDescription","Amount","ErrorDescription","init","lqtyStake","originalStake","editedLQTY","stakedLQTY","reduce","state","action","type","from","newValue","updatedStake","stateChange","apply","whatChanged","selectLQTYBalance","lqtyBalance","StakingManagerActionDescription","change","stakeLQTY","prettify","concat","unstakeLQTY","collateralGain","nonZero","lusdGain","isEmpty","StakingManager","dispatchStakingViewAction","dispatch","undefined","gt","sub","validChange","description","makingNewStake"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Flex } from \"theme-ui\";\n\nimport {\n  Decimal,\n  Decimalish,\n  LiquityStoreState,\n  LQTYStake,\n  LQTYStakeChange\n} from \"@liquity/lib-base\";\n\nimport { LiquityStoreUpdate, useLiquityReducer, useLiquitySelector } from \"@liquity/lib-react\";\n\nimport { GT, COIN } from \"../../strings\";\n\nimport { useStakingView } from \"./context/StakingViewContext\";\nimport { StakingEditor } from \"./StakingEditor\";\nimport { StakingManagerAction } from \"./StakingManagerAction\";\nimport { ActionDescription, Amount } from \"../ActionDescription\";\nimport { ErrorDescription } from \"../ErrorDescription\";\n\nconst init = ({ lqtyStake }: LiquityStoreState) => ({\n  originalStake: lqtyStake,\n  editedLQTY: lqtyStake.stakedLQTY\n});\n\ntype StakeManagerState = ReturnType<typeof init>;\ntype StakeManagerAction =\n  | LiquityStoreUpdate\n  | { type: \"revert\" }\n  | { type: \"setStake\"; newValue: Decimalish };\n\nconst reduce = (state: StakeManagerState, action: StakeManagerAction): StakeManagerState => {\n  // console.log(state);\n  // console.log(action);\n\n  const { originalStake, editedLQTY } = state;\n\n  switch (action.type) {\n    case \"setStake\":\n      return { ...state, editedLQTY: Decimal.from(action.newValue) };\n\n    case \"revert\":\n      return { ...state, editedLQTY: originalStake.stakedLQTY };\n\n    case \"updateStore\": {\n      const {\n        stateChange: { lqtyStake: updatedStake }\n      } = action;\n\n      if (updatedStake) {\n        return {\n          originalStake: updatedStake,\n          editedLQTY: updatedStake.apply(originalStake.whatChanged(editedLQTY))\n        };\n      }\n    }\n  }\n\n  return state;\n};\n\nconst selectLQTYBalance = ({ lqtyBalance }: LiquityStoreState) => lqtyBalance;\n\ntype StakingManagerActionDescriptionProps = {\n  originalStake: LQTYStake;\n  change: LQTYStakeChange<Decimal>;\n};\n\nconst StakingManagerActionDescription: React.FC<StakingManagerActionDescriptionProps> = ({\n  originalStake,\n  change\n}) => {\n  const stakeLQTY = change.stakeLQTY?.prettify().concat(\" \", GT);\n  const unstakeLQTY = change.unstakeLQTY?.prettify().concat(\" \", GT);\n  const collateralGain = originalStake.collateralGain.nonZero?.prettify(4).concat(\" ETH\");\n  const lusdGain = originalStake.lusdGain.nonZero?.prettify().concat(\" \", COIN);\n\n  if (originalStake.isEmpty && stakeLQTY) {\n    return (\n      <ActionDescription>\n        You are staking <Amount>{stakeLQTY}</Amount>.\n      </ActionDescription>\n    );\n  }\n\n  return (\n    <ActionDescription>\n      {stakeLQTY && (\n        <>\n          You are adding <Amount>{stakeLQTY}</Amount> to your stake\n        </>\n      )}\n      {unstakeLQTY && (\n        <>\n          You are withdrawing <Amount>{unstakeLQTY}</Amount> to your wallet\n        </>\n      )}\n      {(collateralGain || lusdGain) && (\n        <>\n          {\" \"}\n          and claiming{\" \"}\n          {collateralGain && lusdGain ? (\n            <>\n              <Amount>{collateralGain}</Amount> and <Amount>{lusdGain}</Amount>\n            </>\n          ) : (\n            <>\n              <Amount>{collateralGain ?? lusdGain}</Amount>\n            </>\n          )}\n        </>\n      )}\n      .\n    </ActionDescription>\n  );\n};\n\nexport const StakingManager: React.FC = () => {\n  const { dispatch: dispatchStakingViewAction } = useStakingView();\n  const [{ originalStake, editedLQTY }, dispatch] = useLiquityReducer(reduce, init);\n  const lqtyBalance = useLiquitySelector(selectLQTYBalance);\n\n  const change = originalStake.whatChanged(editedLQTY);\n  const [validChange, description] = !change\n    ? [undefined, undefined]\n    : change.stakeLQTY?.gt(lqtyBalance)\n    ? [\n        undefined,\n        <ErrorDescription>\n          The amount you're trying to stake exceeds your balance by{\" \"}\n          <Amount>\n            {change.stakeLQTY.sub(lqtyBalance).prettify()} {GT}\n          </Amount>\n          .\n        </ErrorDescription>\n      ]\n    : [change, <StakingManagerActionDescription originalStake={originalStake} change={change} />];\n\n  const makingNewStake = originalStake.isEmpty;\n\n  return (\n    <StakingEditor title={\"Staking\"} {...{ originalStake, editedLQTY, dispatch }}>\n      {description ??\n        (makingNewStake ? (\n          <ActionDescription>Enter the amount of {GT} you'd like to stake.</ActionDescription>\n        ) : (\n          <ActionDescription>Adjust the {GT} amount to stake or withdraw.</ActionDescription>\n        ))}\n\n      <Flex variant=\"layout.actions\">\n        <Button\n          variant=\"cancel\"\n          onClick={() => dispatchStakingViewAction({ type: \"cancelAdjusting\" })}\n        >\n          Cancel\n        </Button>\n\n        {validChange ? (\n          <StakingManagerAction change={validChange}>Confirm</StakingManagerAction>\n        ) : (\n          <Button disabled>Confirm</Button>\n        )}\n      </Flex>\n    </StakingEditor>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}