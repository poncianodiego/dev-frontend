{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/views/Confirm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { Button } from \"theme-ui\";\nimport { useLiquity } from \"../../../hooks/LiquityContext\";\nimport { Transaction, useMyTransactionState } from \"../../Transaction\";\nimport { useValidationState } from \"../context/useValidationState\";\nimport { useFarmView } from \"../context/FarmViewContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst transactionId = \"farm-confirm\";\nexport const Confirm = ({\n  amount\n}) => {\n  _s();\n\n  const {\n    dispatchEvent\n  } = useFarmView();\n  const {\n    liquity: {\n      send: liquity\n    }\n  } = useLiquity();\n  const transactionState = useMyTransactionState(transactionId);\n  const {\n    isValid,\n    isWithdrawing,\n    amountChanged\n  } = useValidationState(amount);\n  const transactionAction = isWithdrawing ? liquity.unstakeUniTokens.bind(liquity, amountChanged) : liquity.stakeUniTokens.bind(liquity, amountChanged);\n  const shouldDisable = amountChanged.isZero || !isValid;\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"STAKE_CONFIRMED\");\n    }\n  }, [transactionState.type, dispatchEvent]);\n  return /*#__PURE__*/_jsxDEV(Transaction, {\n    id: transactionId,\n    send: transactionAction,\n    showFailure: \"asTooltip\",\n    tooltipPlacement: \"bottom\",\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      disabled: shouldDisable,\n      children: \"Confirm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Confirm, \"QZzALN/FE8g3kiwCB3QyLFKtaFo=\", false, function () {\n  return [useFarmView, useLiquity, useMyTransactionState, useValidationState];\n});\n\n_c = Confirm;\n\nvar _c;\n\n$RefreshReg$(_c, \"Confirm\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/views/Confirm.tsx"],"names":["React","useEffect","Button","useLiquity","Transaction","useMyTransactionState","useValidationState","useFarmView","transactionId","Confirm","amount","dispatchEvent","liquity","send","transactionState","isValid","isWithdrawing","amountChanged","transactionAction","unstakeUniTokens","bind","stakeUniTokens","shouldDisable","isZero","type"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,SAASC,UAAT,QAA2B,+BAA3B;AACA,SAASC,WAAT,EAAsBC,qBAAtB,QAAmD,mBAAnD;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,WAAT,QAA4B,4BAA5B;;AAMA,MAAMC,aAAa,GAAG,cAAtB;AAEA,OAAO,MAAMC,OAA+B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAAA;;AAC7D,QAAM;AAAEC,IAAAA;AAAF,MAAoBJ,WAAW,EAArC;AACA,QAAM;AACJK,IAAAA,OAAO,EAAE;AAAEC,MAAAA,IAAI,EAAED;AAAR;AADL,MAEFT,UAAU,EAFd;AAIA,QAAMW,gBAAgB,GAAGT,qBAAqB,CAACG,aAAD,CAA9C;AACA,QAAM;AAAEO,IAAAA,OAAF;AAAWC,IAAAA,aAAX;AAA0BC,IAAAA;AAA1B,MAA4CX,kBAAkB,CAACI,MAAD,CAApE;AAEA,QAAMQ,iBAAiB,GAAGF,aAAa,GACnCJ,OAAO,CAACO,gBAAR,CAAyBC,IAAzB,CAA8BR,OAA9B,EAAuCK,aAAvC,CADmC,GAEnCL,OAAO,CAACS,cAAR,CAAuBD,IAAvB,CAA4BR,OAA5B,EAAqCK,aAArC,CAFJ;AAIA,QAAMK,aAAa,GAAGL,aAAa,CAACM,MAAd,IAAwB,CAACR,OAA/C;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,gBAAgB,CAACU,IAAjB,KAA0B,kBAA9B,EAAkD;AAChDb,MAAAA,aAAa,CAAC,iBAAD,CAAb;AACD;AACF,GAJQ,EAIN,CAACG,gBAAgB,CAACU,IAAlB,EAAwBb,aAAxB,CAJM,CAAT;AAMA,sBACE,QAAC,WAAD;AACE,IAAA,EAAE,EAAEH,aADN;AAEE,IAAA,IAAI,EAAEU,iBAFR;AAGE,IAAA,WAAW,EAAC,WAHd;AAIE,IAAA,gBAAgB,EAAC,QAJnB;AAAA,2BAME,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEI,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA/BM;;GAAMb,O;UACeF,W,EAGtBJ,U,EAEqBE,qB,EACyBC,kB;;;KAPvCG,O","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Button } from \"theme-ui\";\nimport { Decimal } from \"@liquity/lib-base\";\nimport { useLiquity } from \"../../../hooks/LiquityContext\";\nimport { Transaction, useMyTransactionState } from \"../../Transaction\";\nimport { useValidationState } from \"../context/useValidationState\";\nimport { useFarmView } from \"../context/FarmViewContext\";\n\ntype ConfirmProps = {\n  amount: Decimal;\n};\n\nconst transactionId = \"farm-confirm\";\n\nexport const Confirm: React.FC<ConfirmProps> = ({ amount }) => {\n  const { dispatchEvent } = useFarmView();\n  const {\n    liquity: { send: liquity }\n  } = useLiquity();\n\n  const transactionState = useMyTransactionState(transactionId);\n  const { isValid, isWithdrawing, amountChanged } = useValidationState(amount);\n\n  const transactionAction = isWithdrawing\n    ? liquity.unstakeUniTokens.bind(liquity, amountChanged)\n    : liquity.stakeUniTokens.bind(liquity, amountChanged);\n\n  const shouldDisable = amountChanged.isZero || !isValid;\n\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"STAKE_CONFIRMED\");\n    }\n  }, [transactionState.type, dispatchEvent]);\n\n  return (\n    <Transaction\n      id={transactionId}\n      send={transactionAction}\n      showFailure=\"asTooltip\"\n      tooltipPlacement=\"bottom\"\n    >\n      <Button disabled={shouldDisable}>Confirm</Button>\n    </Transaction>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}