{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/TroveAction.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button } from \"theme-ui\";\nimport { useLiquity } from \"../../hooks/LiquityContext\";\nimport { useTransactionFunction } from \"../Transaction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TroveAction = ({\n  children,\n  transactionId,\n  change,\n  maxBorrowingRate\n}) => {\n  _s();\n\n  const {\n    liquity\n  } = useLiquity();\n  const [sendTransaction] = useTransactionFunction(transactionId, change.type === \"creation\" ? liquity.send.openTrove.bind(liquity.send, change.params, maxBorrowingRate) : change.type === \"closure\" ? liquity.send.closeTrove.bind(liquity.send) : liquity.send.adjustTrove.bind(liquity.send, change.params, maxBorrowingRate));\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: sendTransaction,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TroveAction, \"dXDsucp+w7W9412vaCGNuo9SVJc=\", false, function () {\n  return [useLiquity, useTransactionFunction];\n});\n\n_c = TroveAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"TroveAction\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/TroveAction.tsx"],"names":["Button","useLiquity","useTransactionFunction","TroveAction","children","transactionId","change","maxBorrowingRate","liquity","sendTransaction","type","send","openTrove","bind","params","closeTrove","adjustTrove"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,UAAvB;AAIA,SAASC,UAAT,QAA2B,4BAA3B;AACA,SAASC,sBAAT,QAAuC,gBAAvC;;AAQA,OAAO,MAAMC,WAAuC,GAAG,CAAC;AACtDC,EAAAA,QADsD;AAEtDC,EAAAA,aAFsD;AAGtDC,EAAAA,MAHsD;AAItDC,EAAAA;AAJsD,CAAD,KAKjD;AAAA;;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAcP,UAAU,EAA9B;AAEA,QAAM,CAACQ,eAAD,IAAoBP,sBAAsB,CAC9CG,aAD8C,EAE9CC,MAAM,CAACI,IAAP,KAAgB,UAAhB,GACIF,OAAO,CAACG,IAAR,CAAaC,SAAb,CAAuBC,IAAvB,CAA4BL,OAAO,CAACG,IAApC,EAA0CL,MAAM,CAACQ,MAAjD,EAAyDP,gBAAzD,CADJ,GAEID,MAAM,CAACI,IAAP,KAAgB,SAAhB,GACAF,OAAO,CAACG,IAAR,CAAaI,UAAb,CAAwBF,IAAxB,CAA6BL,OAAO,CAACG,IAArC,CADA,GAEAH,OAAO,CAACG,IAAR,CAAaK,WAAb,CAAyBH,IAAzB,CAA8BL,OAAO,CAACG,IAAtC,EAA4CL,MAAM,CAACQ,MAAnD,EAA2DP,gBAA3D,CAN0C,CAAhD;AASA,sBAAO,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAEE,eAAjB;AAAA,cAAmCL;AAAnC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlBM;;GAAMD,W;UAMSF,U,EAEMC,sB;;;KARfC,W","sourcesContent":["import { Button } from \"theme-ui\";\n\nimport { Decimal, TroveChange } from \"@liquity/lib-base\";\n\nimport { useLiquity } from \"../../hooks/LiquityContext\";\nimport { useTransactionFunction } from \"../Transaction\";\n\ntype TroveActionProps = {\n  transactionId: string;\n  change: Exclude<TroveChange<Decimal>, { type: \"invalidCreation\" }>;\n  maxBorrowingRate: Decimal;\n};\n\nexport const TroveAction: React.FC<TroveActionProps> = ({\n  children,\n  transactionId,\n  change,\n  maxBorrowingRate\n}) => {\n  const { liquity } = useLiquity();\n\n  const [sendTransaction] = useTransactionFunction(\n    transactionId,\n    change.type === \"creation\"\n      ? liquity.send.openTrove.bind(liquity.send, change.params, maxBorrowingRate)\n      : change.type === \"closure\"\n      ? liquity.send.closeTrove.bind(liquity.send)\n      : liquity.send.adjustTrove.bind(liquity.send, change.params, maxBorrowingRate)\n  );\n\n  return <Button onClick={sendTransaction}>{children}</Button>;\n};\n"]},"metadata":{},"sourceType":"module"}