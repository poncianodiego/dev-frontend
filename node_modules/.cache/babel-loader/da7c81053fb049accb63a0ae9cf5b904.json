{"ast":null,"code":"import { Decimal } from \"@liquity/lib-base\";\n\nconst uniswapQuery = (lqtyTokenAddress, uniTokenAddress) => `{\n  token(id: \"${lqtyTokenAddress.toLowerCase()}\") {\n    derivedETH\n  },\n  bundle(id: 1) {\n    ethPrice\n  },\n  pair(id: \"${uniTokenAddress.toLowerCase()}\") {\n    totalSupply\n    reserveUSD\n  }\n}`;\n\nexport async function fetchPrices(lqtyTokenAddress, uniTokenAddress) {\n  var _data$token, _data$pair, _data$pair2, _data$bundle;\n\n  const response = await window.fetch(\"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\", {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: uniswapQuery(lqtyTokenAddress, uniTokenAddress),\n      variables: null\n    })\n  });\n\n  if (!response.ok) {\n    return Promise.reject(\"Network error connecting to Uniswap subgraph\");\n  }\n\n  const {\n    data,\n    errors\n  } = await response.json();\n\n  if (errors) {\n    return Promise.reject(errors);\n  }\n\n  if (typeof (data === null || data === void 0 ? void 0 : (_data$token = data.token) === null || _data$token === void 0 ? void 0 : _data$token.derivedETH) === \"string\" && typeof (data === null || data === void 0 ? void 0 : (_data$pair = data.pair) === null || _data$pair === void 0 ? void 0 : _data$pair.reserveUSD) === \"string\" && typeof (data === null || data === void 0 ? void 0 : (_data$pair2 = data.pair) === null || _data$pair2 === void 0 ? void 0 : _data$pair2.totalSupply) === \"string\" && typeof (data === null || data === void 0 ? void 0 : (_data$bundle = data.bundle) === null || _data$bundle === void 0 ? void 0 : _data$bundle.ethPrice) === \"string\") {\n    const ethPriceUSD = Decimal.from(data.bundle.ethPrice);\n    const lqtyPriceUSD = Decimal.from(data.token.derivedETH).mul(ethPriceUSD);\n    const uniLpPriceUSD = Decimal.from(data.pair.reserveUSD).div(Decimal.from(data.pair.totalSupply));\n    return {\n      lqtyPriceUSD,\n      uniLpPriceUSD\n    };\n  }\n\n  return Promise.reject(\"Uniswap doesn't have the required data to calculate yield\");\n}","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/context/fetchPrices.ts"],"names":["Decimal","uniswapQuery","lqtyTokenAddress","uniTokenAddress","toLowerCase","fetchPrices","response","window","fetch","method","headers","body","JSON","stringify","query","variables","ok","Promise","reject","data","errors","json","token","derivedETH","pair","reserveUSD","totalSupply","bundle","ethPrice","ethPriceUSD","from","lqtyPriceUSD","mul","uniLpPriceUSD","div"],"mappings":"AAAA,SAASA,OAAT,QAAwB,mBAAxB;;AAkBA,MAAMC,YAAY,GAAG,CAACC,gBAAD,EAA2BC,eAA3B,KAAwD;AAC7E,eAAeD,gBAAgB,CAACE,WAAjB,EAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA,cAAcD,eAAe,CAACC,WAAhB,EAA8B;AAC5C;AACA;AACA;AACA,EAXA;;AAaA,OAAO,eAAeC,WAAf,CAA2BH,gBAA3B,EAAqDC,eAArD,EAA8E;AAAA;;AACnF,QAAMG,QAAQ,GAAG,MAAMC,MAAM,CAACC,KAAP,CAAa,4DAAb,EAA2E;AAChGC,IAAAA,MAAM,EAAE,MADwF;AAEhGC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFuF;AAKhGC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,KAAK,EAAEb,YAAY,CAACC,gBAAD,EAAmBC,eAAnB,CADA;AAEnBY,MAAAA,SAAS,EAAE;AAFQ,KAAf;AAL0F,GAA3E,CAAvB;;AAWA,MAAI,CAACT,QAAQ,CAACU,EAAd,EAAkB;AAChB,WAAOC,OAAO,CAACC,MAAR,CAAe,8CAAf,CAAP;AACD;;AAED,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoC,MAAMd,QAAQ,CAACe,IAAT,EAAhD;;AAEA,MAAID,MAAJ,EAAY;AACV,WAAOH,OAAO,CAACC,MAAR,CAAeE,MAAf,CAAP;AACD;;AAED,MACE,QAAOD,IAAP,aAAOA,IAAP,sCAAOA,IAAI,CAAEG,KAAb,gDAAO,YAAaC,UAApB,MAAmC,QAAnC,IACA,QAAOJ,IAAP,aAAOA,IAAP,qCAAOA,IAAI,CAAEK,IAAb,+CAAO,WAAYC,UAAnB,MAAkC,QADlC,IAEA,QAAON,IAAP,aAAOA,IAAP,sCAAOA,IAAI,CAAEK,IAAb,gDAAO,YAAYE,WAAnB,MAAmC,QAFnC,IAGA,QAAOP,IAAP,aAAOA,IAAP,uCAAOA,IAAI,CAAEQ,MAAb,iDAAO,aAAcC,QAArB,MAAkC,QAJpC,EAKE;AACA,UAAMC,WAAW,GAAG7B,OAAO,CAAC8B,IAAR,CAAaX,IAAI,CAACQ,MAAL,CAAYC,QAAzB,CAApB;AACA,UAAMG,YAAY,GAAG/B,OAAO,CAAC8B,IAAR,CAAaX,IAAI,CAACG,KAAL,CAAWC,UAAxB,EAAoCS,GAApC,CAAwCH,WAAxC,CAArB;AACA,UAAMI,aAAa,GAAGjC,OAAO,CAAC8B,IAAR,CAAaX,IAAI,CAACK,IAAL,CAAUC,UAAvB,EAAmCS,GAAnC,CACpBlC,OAAO,CAAC8B,IAAR,CAAaX,IAAI,CAACK,IAAL,CAAUE,WAAvB,CADoB,CAAtB;AAIA,WAAO;AAAEK,MAAAA,YAAF;AAAgBE,MAAAA;AAAhB,KAAP;AACD;;AAED,SAAOhB,OAAO,CAACC,MAAR,CAAe,2DAAf,CAAP;AACD","sourcesContent":["import { Decimal } from \"@liquity/lib-base\";\n\ntype UniswapResponse = {\n  data?: {\n    bundle: {\n      ethPrice: string;\n    } | null;\n    token: {\n      derivedETH: string;\n    } | null;\n    pair: {\n      reserveUSD: string;\n      totalSupply: string;\n    } | null;\n  };\n  errors?: Array<{ message: string }>;\n};\n\nconst uniswapQuery = (lqtyTokenAddress: string, uniTokenAddress: string) => `{\n  token(id: \"${lqtyTokenAddress.toLowerCase()}\") {\n    derivedETH\n  },\n  bundle(id: 1) {\n    ethPrice\n  },\n  pair(id: \"${uniTokenAddress.toLowerCase()}\") {\n    totalSupply\n    reserveUSD\n  }\n}`;\n\nexport async function fetchPrices(lqtyTokenAddress: string, uniTokenAddress: string) {\n  const response = await window.fetch(\"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\", {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: uniswapQuery(lqtyTokenAddress, uniTokenAddress),\n      variables: null\n    })\n  });\n\n  if (!response.ok) {\n    return Promise.reject(\"Network error connecting to Uniswap subgraph\");\n  }\n\n  const { data, errors }: UniswapResponse = await response.json();\n\n  if (errors) {\n    return Promise.reject(errors);\n  }\n\n  if (\n    typeof data?.token?.derivedETH === \"string\" &&\n    typeof data?.pair?.reserveUSD === \"string\" &&\n    typeof data?.pair?.totalSupply === \"string\" &&\n    typeof data?.bundle?.ethPrice === \"string\"\n  ) {\n    const ethPriceUSD = Decimal.from(data.bundle.ethPrice);\n    const lqtyPriceUSD = Decimal.from(data.token.derivedETH).mul(ethPriceUSD);\n    const uniLpPriceUSD = Decimal.from(data.pair.reserveUSD).div(\n      Decimal.from(data.pair.totalSupply)\n    );\n\n    return { lqtyPriceUSD, uniLpPriceUSD };\n  }\n\n  return Promise.reject(\"Uniswap doesn't have the required data to calculate yield\");\n}\n"]},"metadata":{},"sourceType":"module"}