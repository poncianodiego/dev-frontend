{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/context/FarmViewProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { FarmViewContext } from \"./FarmViewContext\";\nimport { transitions } from \"./transitions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst transition = (view, event) => {\n  var _transitions$view$eve;\n\n  const nextView = (_transitions$view$eve = transitions[view][event]) !== null && _transitions$view$eve !== void 0 ? _transitions$view$eve : view;\n  return nextView;\n};\n\nconst getInitialView = (liquidityMiningStake, remainingLiquidityMiningLQTYReward, liquidityMiningLQTYReward) => {\n  if (remainingLiquidityMiningLQTYReward.isZero) return \"DISABLED\";\n  if (liquidityMiningStake.isZero && liquidityMiningLQTYReward.isZero) return \"INACTIVE\";\n  return \"ACTIVE\";\n};\n\nconst selector = ({\n  liquidityMiningStake,\n  remainingLiquidityMiningLQTYReward,\n  liquidityMiningLQTYReward\n}) => ({\n  liquidityMiningStake,\n  remainingLiquidityMiningLQTYReward,\n  liquidityMiningLQTYReward\n});\n\nexport const FarmViewProvider = props => {\n  _s();\n\n  const {\n    children\n  } = props;\n  const {\n    liquidityMiningStake,\n    remainingLiquidityMiningLQTYReward,\n    liquidityMiningLQTYReward\n  } = useLiquitySelector(selector);\n  const [view, setView] = useState(getInitialView(liquidityMiningStake, remainingLiquidityMiningLQTYReward, liquidityMiningLQTYReward));\n  const viewRef = useRef(view);\n  const dispatchEvent = useCallback(event => {\n    const nextView = transition(viewRef.current, event);\n    console.log(\"dispatchEvent() [current-view, event, next-view]\", viewRef.current, event, nextView);\n    setView(nextView);\n  }, []);\n  useEffect(() => {\n    viewRef.current = view;\n  }, [view]);\n  useEffect(() => {\n    if (liquidityMiningStake.isZero && liquidityMiningLQTYReward.isZero) {\n      dispatchEvent(\"UNSTAKE_AND_CLAIM_CONFIRMED\");\n    } else if (liquidityMiningStake.isZero && !liquidityMiningLQTYReward.isZero) {\n      dispatchEvent(\"UNSTAKE_CONFIRMED\");\n    }\n  }, [liquidityMiningStake.isZero, liquidityMiningLQTYReward.isZero, dispatchEvent]);\n  const provider = {\n    view,\n    dispatchEvent\n  };\n  return /*#__PURE__*/_jsxDEV(FarmViewContext.Provider, {\n    value: provider,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 10\n  }, this);\n};\n\n_s(FarmViewProvider, \"ZntTHybkF2vo9ryQVTgBjQNryTg=\", false, function () {\n  return [useLiquitySelector];\n});\n\n_c = FarmViewProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"FarmViewProvider\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/context/FarmViewProvider.tsx"],"names":["React","useState","useCallback","useEffect","useRef","useLiquitySelector","FarmViewContext","transitions","transition","view","event","nextView","getInitialView","liquidityMiningStake","remainingLiquidityMiningLQTYReward","liquidityMiningLQTYReward","isZero","selector","FarmViewProvider","props","children","setView","viewRef","dispatchEvent","current","console","log","provider"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,EAAkDC,MAAlD,QAAgE,OAAhE;AAEA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,WAAT,QAA4B,eAA5B;;;AAGA,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAiBC,KAAjB,KAAgD;AAAA;;AACjE,QAAMC,QAAQ,4BAAGJ,WAAW,CAACE,IAAD,CAAX,CAAkBC,KAAlB,CAAH,yEAA+BD,IAA7C;AACA,SAAOE,QAAP;AACD,CAHD;;AAKA,MAAMC,cAAc,GAAG,CACrBC,oBADqB,EAErBC,kCAFqB,EAGrBC,yBAHqB,KAIR;AACb,MAAID,kCAAkC,CAACE,MAAvC,EAA+C,OAAO,UAAP;AAC/C,MAAIH,oBAAoB,CAACG,MAArB,IAA+BD,yBAAyB,CAACC,MAA7D,EAAqE,OAAO,UAAP;AACrE,SAAO,QAAP;AACD,CARD;;AAUA,MAAMC,QAAQ,GAAG,CAAC;AAChBJ,EAAAA,oBADgB;AAEhBC,EAAAA,kCAFgB;AAGhBC,EAAAA;AAHgB,CAAD,MAIS;AACxBF,EAAAA,oBADwB;AAExBC,EAAAA,kCAFwB;AAGxBC,EAAAA;AAHwB,CAJT,CAAjB;;AAUA,OAAO,MAAMG,gBAA0B,GAAGC,KAAK,IAAI;AAAA;;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAM;AACJN,IAAAA,oBADI;AAEJC,IAAAA,kCAFI;AAGJC,IAAAA;AAHI,MAIFV,kBAAkB,CAACY,QAAD,CAJtB;AAMA,QAAM,CAACR,IAAD,EAAOY,OAAP,IAAkBpB,QAAQ,CAC9BW,cAAc,CACZC,oBADY,EAEZC,kCAFY,EAGZC,yBAHY,CADgB,CAAhC;AAOA,QAAMO,OAAO,GAAGlB,MAAM,CAAWK,IAAX,CAAtB;AAEA,QAAMc,aAAa,GAAGrB,WAAW,CAAEQ,KAAD,IAAsB;AACtD,UAAMC,QAAQ,GAAGH,UAAU,CAACc,OAAO,CAACE,OAAT,EAAkBd,KAAlB,CAA3B;AAEAe,IAAAA,OAAO,CAACC,GAAR,CACE,kDADF,EAEEJ,OAAO,CAACE,OAFV,EAGEd,KAHF,EAIEC,QAJF;AAMAU,IAAAA,OAAO,CAACV,QAAD,CAAP;AACD,GAVgC,EAU9B,EAV8B,CAAjC;AAYAR,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,OAAO,CAACE,OAAR,GAAkBf,IAAlB;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,oBAAoB,CAACG,MAArB,IAA+BD,yBAAyB,CAACC,MAA7D,EAAqE;AACnEO,MAAAA,aAAa,CAAC,6BAAD,CAAb;AACD,KAFD,MAEO,IAAIV,oBAAoB,CAACG,MAArB,IAA+B,CAACD,yBAAyB,CAACC,MAA9D,EAAsE;AAC3EO,MAAAA,aAAa,CAAC,mBAAD,CAAb;AACD;AACF,GANQ,EAMN,CAACV,oBAAoB,CAACG,MAAtB,EAA8BD,yBAAyB,CAACC,MAAxD,EAAgEO,aAAhE,CANM,CAAT;AAQA,QAAMI,QAAQ,GAAG;AACflB,IAAAA,IADe;AAEfc,IAAAA;AAFe,GAAjB;AAKA,sBAAO,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEI,QAAjC;AAAA,cAA4CP;AAA5C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA/CM;;GAAMF,gB;UAMPb,kB;;;KANOa,gB","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { LiquityStoreState, Decimal } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { FarmViewContext } from \"./FarmViewContext\";\nimport { transitions } from \"./transitions\";\nimport type { FarmView, FarmEvent } from \"./transitions\";\n\nconst transition = (view: FarmView, event: FarmEvent): FarmView => {\n  const nextView = transitions[view][event] ?? view;\n  return nextView;\n};\n\nconst getInitialView = (\n  liquidityMiningStake: Decimal,\n  remainingLiquidityMiningLQTYReward: Decimal,\n  liquidityMiningLQTYReward: Decimal\n): FarmView => {\n  if (remainingLiquidityMiningLQTYReward.isZero) return \"DISABLED\";\n  if (liquidityMiningStake.isZero && liquidityMiningLQTYReward.isZero) return \"INACTIVE\";\n  return \"ACTIVE\";\n};\n\nconst selector = ({\n  liquidityMiningStake,\n  remainingLiquidityMiningLQTYReward,\n  liquidityMiningLQTYReward\n}: LiquityStoreState) => ({\n  liquidityMiningStake,\n  remainingLiquidityMiningLQTYReward,\n  liquidityMiningLQTYReward\n});\n\nexport const FarmViewProvider: React.FC = props => {\n  const { children } = props;\n  const {\n    liquidityMiningStake,\n    remainingLiquidityMiningLQTYReward,\n    liquidityMiningLQTYReward\n  } = useLiquitySelector(selector);\n\n  const [view, setView] = useState<FarmView>(\n    getInitialView(\n      liquidityMiningStake,\n      remainingLiquidityMiningLQTYReward,\n      liquidityMiningLQTYReward\n    )\n  );\n  const viewRef = useRef<FarmView>(view);\n\n  const dispatchEvent = useCallback((event: FarmEvent) => {\n    const nextView = transition(viewRef.current, event);\n\n    console.log(\n      \"dispatchEvent() [current-view, event, next-view]\",\n      viewRef.current,\n      event,\n      nextView\n    );\n    setView(nextView);\n  }, []);\n\n  useEffect(() => {\n    viewRef.current = view;\n  }, [view]);\n\n  useEffect(() => {\n    if (liquidityMiningStake.isZero && liquidityMiningLQTYReward.isZero) {\n      dispatchEvent(\"UNSTAKE_AND_CLAIM_CONFIRMED\");\n    } else if (liquidityMiningStake.isZero && !liquidityMiningLQTYReward.isZero) {\n      dispatchEvent(\"UNSTAKE_CONFIRMED\");\n    }\n  }, [liquidityMiningStake.isZero, liquidityMiningLQTYReward.isZero, dispatchEvent]);\n\n  const provider = {\n    view,\n    dispatchEvent\n  };\n\n  return <FarmViewContext.Provider value={provider}>{children}</FarmViewContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}