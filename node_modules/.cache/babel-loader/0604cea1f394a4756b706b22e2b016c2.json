{"ast":null,"code":"import _slicedToArray from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useCallback,useEffect}from\"react\";import{Flex,Button}from\"theme-ui\";import{Decimal,Trove,LUSD_MINIMUM_DEBT}from\"@liquity/lib-base\";import{useLiquityReducer,useLiquitySelector}from\"@liquity/lib-react\";import{ActionDescription}from\"../ActionDescription\";import{useMyTransactionState}from\"../Transaction\";import{TroveEditor}from\"./TroveEditor\";import{TroveAction}from\"./TroveAction\";import{useTroveView}from\"./context/TroveViewContext\";import{selectForTroveChangeValidation,validateTroveChange}from\"./validation/validateTroveChange\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var init=function init(_ref){var trove=_ref.trove;return{original:trove,edited:new Trove(trove.collateral,trove.debt),changePending:false,debtDirty:false,addedMinimumDebt:false};};var reduceWith=function reduceWith(action){return function(state){return reduce(state,action);};};var addMinimumDebt=reduceWith({type:\"addMinimumDebt\"});var removeMinimumDebt=reduceWith({type:\"removeMinimumDebt\"});var finishChange=reduceWith({type:\"finishChange\"});var revert=reduceWith({type:\"revert\"});var reduce=function reduce(state,action){// console.log(state);\n// console.log(action);\nvar original=state.original,edited=state.edited,changePending=state.changePending,debtDirty=state.debtDirty,addedMinimumDebt=state.addedMinimumDebt;switch(action.type){case\"startChange\":{console.log(\"starting change\");return _objectSpread(_objectSpread({},state),{},{changePending:true});}case\"finishChange\":return _objectSpread(_objectSpread({},state),{},{changePending:false});case\"setCollateral\":{var newCollateral=Decimal.from(action.newValue);var newState=_objectSpread(_objectSpread({},state),{},{edited:edited.setCollateral(newCollateral)});if(!debtDirty){if(edited.isEmpty&&newCollateral.nonZero){return addMinimumDebt(newState);}if(addedMinimumDebt&&newCollateral.isZero){return removeMinimumDebt(newState);}}return newState;}case\"setDebt\":return _objectSpread(_objectSpread({},state),{},{edited:edited.setDebt(action.newValue),debtDirty:true});case\"addMinimumDebt\":return _objectSpread(_objectSpread({},state),{},{edited:edited.setDebt(LUSD_MINIMUM_DEBT),addedMinimumDebt:true});case\"removeMinimumDebt\":return _objectSpread(_objectSpread({},state),{},{edited:edited.setDebt(0),addedMinimumDebt:false});case\"revert\":return _objectSpread(_objectSpread({},state),{},{edited:new Trove(original.collateral,original.debt),debtDirty:false,addedMinimumDebt:false});case\"updateStore\":{var trove=action.newState.trove,changeCommitted=action.stateChange.troveBeforeRedistribution;var _newState=_objectSpread(_objectSpread({},state),{},{original:trove});if(changePending&&changeCommitted){return finishChange(revert(_newState));}var change=original.whatChanged(edited,0);if((change===null||change===void 0?void 0:change.type)===\"creation\"&&!trove.isEmpty||(change===null||change===void 0?void 0:change.type)===\"closure\"&&trove.isEmpty){return revert(_newState);}return _objectSpread(_objectSpread({},_newState),{},{edited:trove.apply(change,0)});}}};var feeFrom=function feeFrom(original,edited,borrowingRate){var change=original.whatChanged(edited,borrowingRate);if(change&&change.type!==\"invalidCreation\"&&change.params.borrowLUSD){return change.params.borrowLUSD.mul(borrowingRate);}else{return Decimal.ZERO;}};var select=function select(state){return{fees:state.fees,validationContext:selectForTroveChangeValidation(state)};};var transactionIdPrefix=\"trove-\";var transactionIdMatcher=new RegExp(\"^\".concat(transactionIdPrefix));export var TroveManager=function TroveManager(_ref2){var collateral=_ref2.collateral,debt=_ref2.debt;var _useLiquityReducer=useLiquityReducer(reduce,init),_useLiquityReducer2=_slicedToArray(_useLiquityReducer,2),_useLiquityReducer2$=_useLiquityReducer2[0],original=_useLiquityReducer2$.original,edited=_useLiquityReducer2$.edited,changePending=_useLiquityReducer2$.changePending,dispatch=_useLiquityReducer2[1];var _useLiquitySelector=useLiquitySelector(select),fees=_useLiquitySelector.fees,validationContext=_useLiquitySelector.validationContext;useEffect(function(){if(collateral!==undefined){dispatch({type:\"setCollateral\",newValue:collateral});}if(debt!==undefined){dispatch({type:\"setDebt\",newValue:debt});}},[collateral,debt,dispatch]);var borrowingRate=fees.borrowingRate();var maxBorrowingRate=borrowingRate.add(0.005);// TODO slippage tolerance\nvar _validateTroveChange=validateTroveChange(original,edited,borrowingRate,validationContext),_validateTroveChange2=_slicedToArray(_validateTroveChange,2),validChange=_validateTroveChange2[0],description=_validateTroveChange2[1];var _useTroveView=useTroveView(),dispatchEvent=_useTroveView.dispatchEvent;var handleCancel=useCallback(function(){dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");},[dispatchEvent]);var openingNewTrove=original.isEmpty;var myTransactionState=useMyTransactionState(transactionIdMatcher);useEffect(function(){if(myTransactionState.type===\"waitingForApproval\"||myTransactionState.type===\"waitingForConfirmation\"){dispatch({type:\"startChange\"});}else if(myTransactionState.type===\"failed\"||myTransactionState.type===\"cancelled\"){dispatch({type:\"finishChange\"});}else if(myTransactionState.type===\"confirmedOneShot\"){if(myTransactionState.id===\"\".concat(transactionIdPrefix,\"closure\")){dispatchEvent(\"TROVE_CLOSED\");}else{dispatchEvent(\"TROVE_ADJUSTED\");}}},[myTransactionState,dispatch,dispatchEvent]);return/*#__PURE__*/_jsxs(TroveEditor,{original:original,edited:edited,fee:feeFrom(original,edited,borrowingRate),borrowingRate:borrowingRate,changePending:changePending,dispatch:dispatch,children:[description!==null&&description!==void 0?description:openingNewTrove?/*#__PURE__*/_jsx(ActionDescription,{children:\"Start by entering the amount of ETH you'd like to deposit as collateral.\"}):/*#__PURE__*/_jsx(ActionDescription,{children:\"Adjust your Trove by modifying its collateral, debt, or both.\"}),/*#__PURE__*/_jsxs(Flex,{variant:\"layout.actions\",children:[/*#__PURE__*/_jsx(Button,{variant:\"cancel\",onClick:handleCancel,children:\"Cancel\"}),validChange?/*#__PURE__*/_jsx(TroveAction,{transactionId:\"\".concat(transactionIdPrefix).concat(validChange.type),change:validChange,maxBorrowingRate:maxBorrowingRate,children:\"Confirm\"}):/*#__PURE__*/_jsx(Button,{disabled:true,children:\"Confirm\"})]})]});};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/TroveManager.tsx"],"names":["useCallback","useEffect","Flex","Button","Decimal","Trove","LUSD_MINIMUM_DEBT","useLiquityReducer","useLiquitySelector","ActionDescription","useMyTransactionState","TroveEditor","TroveAction","useTroveView","selectForTroveChangeValidation","validateTroveChange","init","trove","original","edited","collateral","debt","changePending","debtDirty","addedMinimumDebt","reduceWith","action","state","reduce","addMinimumDebt","type","removeMinimumDebt","finishChange","revert","console","log","newCollateral","from","newValue","newState","setCollateral","isEmpty","nonZero","isZero","setDebt","changeCommitted","stateChange","troveBeforeRedistribution","change","whatChanged","apply","feeFrom","borrowingRate","params","borrowLUSD","mul","ZERO","select","fees","validationContext","transactionIdPrefix","transactionIdMatcher","RegExp","TroveManager","dispatch","undefined","maxBorrowingRate","add","validChange","description","dispatchEvent","handleCancel","openingNewTrove","myTransactionState","id"],"mappings":"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","sourcesContent":["import { useCallback, useEffect } from \"react\";\nimport { Flex, Button } from \"theme-ui\";\n\nimport { LiquityStoreState, Decimal, Trove, Decimalish, LUSD_MINIMUM_DEBT } from \"@liquity/lib-base\";\n\nimport { LiquityStoreUpdate, useLiquityReducer, useLiquitySelector } from \"@liquity/lib-react\";\n\nimport { ActionDescription } from \"../ActionDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\n\nimport { TroveEditor } from \"./TroveEditor\";\nimport { TroveAction } from \"./TroveAction\";\nimport { useTroveView } from \"./context/TroveViewContext\";\n\nimport {\n  selectForTroveChangeValidation,\n  validateTroveChange\n} from \"./validation/validateTroveChange\";\n\nconst init = ({ trove }: LiquityStoreState) => ({\n  original: trove,\n  edited: new Trove(trove.collateral, trove.debt),\n  changePending: false,\n  debtDirty: false,\n  addedMinimumDebt: false\n});\n\ntype TroveManagerState = ReturnType<typeof init>;\ntype TroveManagerAction =\n  | LiquityStoreUpdate\n  | { type: \"startChange\" | \"finishChange\" | \"revert\" | \"addMinimumDebt\" | \"removeMinimumDebt\" }\n  | { type: \"setCollateral\" | \"setDebt\"; newValue: Decimalish };\n\nconst reduceWith = (action: TroveManagerAction) => (state: TroveManagerState): TroveManagerState =>\n  reduce(state, action);\n\nconst addMinimumDebt = reduceWith({ type: \"addMinimumDebt\" });\nconst removeMinimumDebt = reduceWith({ type: \"removeMinimumDebt\" });\nconst finishChange = reduceWith({ type: \"finishChange\" });\nconst revert = reduceWith({ type: \"revert\" });\n\nconst reduce = (state: TroveManagerState, action: TroveManagerAction): TroveManagerState => {\n  // console.log(state);\n  // console.log(action);\n\n  const { original, edited, changePending, debtDirty, addedMinimumDebt } = state;\n\n  switch (action.type) {\n    case \"startChange\": {\n      console.log(\"starting change\");\n      return { ...state, changePending: true };\n    }\n\n    case \"finishChange\":\n      return { ...state, changePending: false };\n\n    case \"setCollateral\": {\n      const newCollateral = Decimal.from(action.newValue);\n\n      const newState = {\n        ...state,\n        edited: edited.setCollateral(newCollateral)\n      };\n\n      if (!debtDirty) {\n        if (edited.isEmpty && newCollateral.nonZero) {\n          return addMinimumDebt(newState);\n        }\n        if (addedMinimumDebt && newCollateral.isZero) {\n          return removeMinimumDebt(newState);\n        }\n      }\n\n      return newState;\n    }\n\n    case \"setDebt\":\n      return {\n        ...state,\n        edited: edited.setDebt(action.newValue),\n        debtDirty: true\n      };\n\n    case \"addMinimumDebt\":\n      return {\n        ...state,\n        edited: edited.setDebt(LUSD_MINIMUM_DEBT),\n        addedMinimumDebt: true\n      };\n\n    case \"removeMinimumDebt\":\n      return {\n        ...state,\n        edited: edited.setDebt(0),\n        addedMinimumDebt: false\n      };\n\n    case \"revert\":\n      return {\n        ...state,\n        edited: new Trove(original.collateral, original.debt),\n        debtDirty: false,\n        addedMinimumDebt: false\n      };\n\n    case \"updateStore\": {\n      const {\n        newState: { trove },\n        stateChange: { troveBeforeRedistribution: changeCommitted }\n      } = action;\n\n      const newState = {\n        ...state,\n        original: trove\n      };\n\n      if (changePending && changeCommitted) {\n        return finishChange(revert(newState));\n      }\n\n      const change = original.whatChanged(edited, 0);\n\n      if (\n        (change?.type === \"creation\" && !trove.isEmpty) ||\n        (change?.type === \"closure\" && trove.isEmpty)\n      ) {\n        return revert(newState);\n      }\n\n      return { ...newState, edited: trove.apply(change, 0) };\n    }\n  }\n};\n\nconst feeFrom = (original: Trove, edited: Trove, borrowingRate: Decimal): Decimal => {\n  const change = original.whatChanged(edited, borrowingRate);\n\n  if (change && change.type !== \"invalidCreation\" && change.params.borrowLUSD) {\n    return change.params.borrowLUSD.mul(borrowingRate);\n  } else {\n    return Decimal.ZERO;\n  }\n};\n\nconst select = (state: LiquityStoreState) => ({\n  fees: state.fees,\n  validationContext: selectForTroveChangeValidation(state)\n});\n\nconst transactionIdPrefix = \"trove-\";\nconst transactionIdMatcher = new RegExp(`^${transactionIdPrefix}`);\n\ntype TroveManagerProps = {\n  collateral?: Decimalish;\n  debt?: Decimalish;\n};\n\nexport const TroveManager: React.FC<TroveManagerProps> = ({ collateral, debt }) => {\n  const [{ original, edited, changePending }, dispatch] = useLiquityReducer(reduce, init);\n  const { fees, validationContext } = useLiquitySelector(select);\n\n  useEffect(() => {\n    if (collateral !== undefined) {\n      dispatch({ type: \"setCollateral\", newValue: collateral });\n    }\n    if (debt !== undefined) {\n      dispatch({ type: \"setDebt\", newValue: debt });\n    }\n  }, [collateral, debt, dispatch]);\n\n  const borrowingRate = fees.borrowingRate();\n  const maxBorrowingRate = borrowingRate.add(0.005); // TODO slippage tolerance\n\n  const [validChange, description] = validateTroveChange(\n    original,\n    edited,\n    borrowingRate,\n    validationContext\n  );\n\n  const { dispatchEvent } = useTroveView();\n\n  const handleCancel = useCallback(() => {\n    dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n\n  const openingNewTrove = original.isEmpty;\n\n  const myTransactionState = useMyTransactionState(transactionIdMatcher);\n\n  useEffect(() => {\n    if (\n      myTransactionState.type === \"waitingForApproval\" ||\n      myTransactionState.type === \"waitingForConfirmation\"\n    ) {\n      dispatch({ type: \"startChange\" });\n    } else if (myTransactionState.type === \"failed\" || myTransactionState.type === \"cancelled\") {\n      dispatch({ type: \"finishChange\" });\n    } else if (myTransactionState.type === \"confirmedOneShot\") {\n      if (myTransactionState.id === `${transactionIdPrefix}closure`) {\n        dispatchEvent(\"TROVE_CLOSED\");\n      } else {\n        dispatchEvent(\"TROVE_ADJUSTED\");\n      }\n    }\n  }, [myTransactionState, dispatch, dispatchEvent]);\n\n  return (\n    <TroveEditor\n      original={original}\n      edited={edited}\n      fee={feeFrom(original, edited, borrowingRate)}\n      borrowingRate={borrowingRate}\n      changePending={changePending}\n      dispatch={dispatch}\n    >\n      {description ??\n        (openingNewTrove ? (\n          <ActionDescription>\n            Start by entering the amount of ETH you'd like to deposit as collateral.\n          </ActionDescription>\n        ) : (\n          <ActionDescription>\n            Adjust your Trove by modifying its collateral, debt, or both.\n          </ActionDescription>\n        ))}\n\n      <Flex variant=\"layout.actions\">\n        <Button variant=\"cancel\" onClick={handleCancel}>\n          Cancel\n        </Button>\n\n        {validChange ? (\n          <TroveAction\n            transactionId={`${transactionIdPrefix}${validChange.type}`}\n            change={validChange}\n            maxBorrowingRate={maxBorrowingRate}\n          >\n            Confirm\n          </TroveAction>\n        ) : (\n          <Button disabled>Confirm</Button>\n        )}\n      </Flex>\n    </TroveEditor>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}