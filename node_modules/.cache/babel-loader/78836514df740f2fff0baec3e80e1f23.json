{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Tooltip.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { usePopper } from \"react-popper\";\nimport { Card } from \"theme-ui\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Tooltip({\n  children,\n  message,\n  placement = \"top\"\n}) {\n  _s();\n\n  const event = useRef();\n  const [show, setShow] = useState(false);\n  const [referenceElement, setReferenceElement] = useState();\n  const [popperElement, setPopperElement] = useState();\n  const {\n    styles,\n    attributes\n  } = usePopper(referenceElement, popperElement, {\n    placement\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/React.cloneElement(React.Children.only(children), {\n      // Use a debounced onMouseOver/onMouseOut instead of onMouseEnter/onMouseLeave to\n      // work around https://github.com/facebook/react/issues/10109\n      onMouseOver: () => {\n        event.current = \"over\";\n\n        if (!show) {\n          setShow(true);\n        }\n      },\n      onMouseOut: () => {\n        event.current = \"out\";\n        setTimeout(() => {\n          if (event.current === \"out\") {\n            setShow(false);\n          }\n        }, 0);\n      },\n      ref: setReferenceElement\n    }), show && /*#__PURE__*/_jsxDEV(Card, {\n      variant: \"tooltip\",\n      ref: setPopperElement,\n      style: styles.popper,\n      ...attributes.popper,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Tooltip, \"xQADKavwtPN7gbyXPtvOfveSEOE=\", false, function () {\n  return [usePopper];\n});\n\n_c = Tooltip;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tooltip\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Tooltip.tsx"],"names":["React","useState","useRef","usePopper","Card","Tooltip","children","message","placement","event","show","setShow","referenceElement","setReferenceElement","popperElement","setPopperElement","styles","attributes","cloneElement","Children","only","onMouseOver","current","onMouseOut","setTimeout","ref","popper"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AAEA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,IAAT,QAAqB,UAArB;;;AAcA,OAAO,SAASC,OAAT,CAA0D;AAC/DC,EAAAA,QAD+D;AAE/DC,EAAAA,OAF+D;AAG/DC,EAAAA,SAAS,GAAG;AAHmD,CAA1D,EAIa;AAAA;;AAClB,QAAMC,KAAK,GAAGP,MAAM,EAApB;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACW,gBAAD,EAAmBC,mBAAnB,IAA0CZ,QAAQ,EAAxD;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,EAAlD;AAEA,QAAM;AAAEe,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAyBd,SAAS,CAACS,gBAAD,EAAmBE,aAAnB,EAAkC;AAAEN,IAAAA;AAAF,GAAlC,CAAxC;AAEA,sBACE;AAAA,4BACGR,KAAK,CAACkB,YAAN,CAAmBlB,KAAK,CAACmB,QAAN,CAAeC,IAAf,CAAuBd,QAAvB,CAAnB,EAAqD;AACpD;AACA;AAEAe,MAAAA,WAAW,EAAE,MAAM;AACjBZ,QAAAA,KAAK,CAACa,OAAN,GAAgB,MAAhB;;AAEA,YAAI,CAACZ,IAAL,EAAW;AACTC,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,OAVmD;AAYpDY,MAAAA,UAAU,EAAE,MAAM;AAChBd,QAAAA,KAAK,CAACa,OAAN,GAAgB,KAAhB;AAEAE,QAAAA,UAAU,CAAC,MAAM;AACf,cAAIf,KAAK,CAACa,OAAN,KAAkB,KAAtB,EAA6B;AAC3BX,YAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,SAJS,EAIP,CAJO,CAAV;AAKD,OApBmD;AAsBpDc,MAAAA,GAAG,EAAEZ;AAtB+C,KAArD,CADH,EA0BGH,IAAI,iBACH,QAAC,IAAD;AAAM,MAAA,OAAO,EAAC,SAAd;AAAwB,MAAA,GAAG,EAAEK,gBAA7B;AAA+C,MAAA,KAAK,EAAEC,MAAM,CAACU,MAA7D;AAAA,SAAyET,UAAU,CAACS,MAApF;AAAA,gBACGnB;AADH;AAAA;AAAA;AAAA;AAAA,YA3BJ;AAAA,kBADF;AAkCD;;GA9CeF,O;UAUiBF,S;;;KAVjBE,O","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { VirtualElement } from \"@popperjs/core\";\nimport { usePopper } from \"react-popper\";\nimport { Card } from \"theme-ui\";\n\nexport type Hoverable = {\n  onMouseOver: () => void;\n  onMouseOut: () => void;\n  ref: (instance: Element | VirtualElement | null) => void;\n};\n\nexport type TooltipProps<C> = {\n  children: C;\n  message: string;\n  placement?: \"top\" | \"bottom\" | \"left\" | \"right\";\n};\n\nexport function Tooltip<C extends React.ReactElement<Hoverable>>({\n  children,\n  message,\n  placement = \"top\"\n}: TooltipProps<C>) {\n  const event = useRef<\"over\" | \"out\">();\n  const [show, setShow] = useState(false);\n  const [referenceElement, setReferenceElement] = useState<Element | VirtualElement | null>();\n  const [popperElement, setPopperElement] = useState<HTMLElement | null>();\n\n  const { styles, attributes } = usePopper(referenceElement, popperElement, { placement });\n\n  return (\n    <>\n      {React.cloneElement(React.Children.only<C>(children), {\n        // Use a debounced onMouseOver/onMouseOut instead of onMouseEnter/onMouseLeave to\n        // work around https://github.com/facebook/react/issues/10109\n\n        onMouseOver: () => {\n          event.current = \"over\";\n\n          if (!show) {\n            setShow(true);\n          }\n        },\n\n        onMouseOut: () => {\n          event.current = \"out\";\n\n          setTimeout(() => {\n            if (event.current === \"out\") {\n              setShow(false);\n            }\n          }, 0);\n        },\n\n        ref: setReferenceElement\n      })}\n\n      {show && (\n        <Card variant=\"tooltip\" ref={setPopperElement} style={styles.popper} {...attributes.popper}>\n          {message}\n        </Card>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}