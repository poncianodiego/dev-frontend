{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/WalletConnector.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Button, Text, Flex, Link, Box } from \"theme-ui\";\nimport { injectedConnector } from \"../connectors/injectedConnector\";\nimport { useAuthorizedConnection } from \"../hooks/useAuthorizedConnection\";\nimport { RetryDialog } from \"./RetryDialog\";\nimport { ConnectionConfirmationDialog } from \"./ConnectionConfirmationDialog\";\nimport { MetaMaskIcon } from \"./MetaMaskIcon\";\nimport { Icon } from \"./Icon\";\nimport { Modal } from \"./Modal\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst connectionReducer = (state, action) => {\n  switch (action.type) {\n    case \"startActivating\":\n      return {\n        type: \"activating\",\n        connector: action.connector\n      };\n\n    case \"finishActivating\":\n      return {\n        type: \"active\",\n        connector: state.type === \"inactive\" ? injectedConnector : state.connector\n      };\n\n    case \"fail\":\n      if (state.type !== \"inactive\") {\n        return {\n          type: action.error.message.match(/user rejected/i) ? \"rejectedByUser\" : action.error.message.match(/already pending/i) ? \"alreadyPending\" : \"failed\",\n          connector: state.connector\n        };\n      }\n\n      break;\n\n    case \"retry\":\n      if (state.type !== \"inactive\") {\n        return {\n          type: \"activating\",\n          connector: state.connector\n        };\n      }\n\n      break;\n\n    case \"cancel\":\n      return {\n        type: \"inactive\"\n      };\n\n    case \"deactivate\":\n      return {\n        type: \"inactive\"\n      };\n  }\n\n  console.warn(\"Ignoring connectionReducer action:\");\n  console.log(action);\n  console.log(\"  in state:\");\n  console.log(state);\n  return state;\n};\n\nconst detectMetaMask = () => {\n  var _ethereum$isMetaMask, _ethereum;\n\n  return (_ethereum$isMetaMask = (_ethereum = window.ethereum) === null || _ethereum === void 0 ? void 0 : _ethereum.isMetaMask) !== null && _ethereum$isMetaMask !== void 0 ? _ethereum$isMetaMask : false;\n};\n\nexport const WalletConnector = ({\n  children,\n  loader\n}) => {\n  _s();\n\n  const {\n    activate,\n    deactivate,\n    active,\n    error\n  } = useWeb3React();\n  const triedAuthorizedConnection = useAuthorizedConnection();\n  const [connectionState, dispatch] = useReducer(connectionReducer, {\n    type: \"inactive\"\n  });\n  const isMetaMask = detectMetaMask();\n  useEffect(() => {\n    if (error) {\n      dispatch({\n        type: \"fail\",\n        error\n      });\n      deactivate();\n    }\n  }, [error, deactivate]);\n  useEffect(() => {\n    if (active) {\n      dispatch({\n        type: \"finishActivating\"\n      });\n    } else {\n      dispatch({\n        type: \"deactivate\"\n      });\n    }\n  }, [active]);\n\n  if (!triedAuthorizedConnection) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: loader\n    }, void 0, false);\n  }\n\n  if (connectionState.type === \"active\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: children\n    }, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      sx: {\n        height: \"100vh\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          dispatch({\n            type: \"startActivating\",\n            connector: injectedConnector\n          });\n          activate(injectedConnector);\n        },\n        children: isMetaMask ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(MetaMaskIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              ml: 2\n            },\n            children: \"Connect to MetaMask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"plug\",\n            size: \"lg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              ml: 2\n            },\n            children: \"Connect wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), connectionState.type === \"failed\" && /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(RetryDialog, {\n        title: isMetaMask ? \"Failed to connect to MetaMask\" : \"Failed to connect wallet\",\n        onCancel: () => dispatch({\n          type: \"cancel\"\n        }),\n        onRetry: () => {\n          dispatch({\n            type: \"retry\"\n          });\n          activate(connectionState.connector);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            textAlign: \"center\"\n          },\n          children: \"You might need to install MetaMask or use a different browser.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          sx: {\n            lineHeight: 3\n          },\n          href: \"https://metamask.io/download.html\",\n          target: \"_blank\",\n          children: [\"Learn more \", /*#__PURE__*/_jsxDEV(Icon, {\n            size: \"xs\",\n            name: \"external-link-alt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this), connectionState.type === \"activating\" && /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(ConnectionConfirmationDialog, {\n        title: isMetaMask ? \"Confirm connection in MetaMask\" : \"Confirm connection in your wallet\",\n        icon: isMetaMask ? /*#__PURE__*/_jsxDEV(MetaMaskIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 32\n        }, this) : /*#__PURE__*/_jsxDEV(Icon, {\n          name: \"wallet\",\n          size: \"lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 51\n        }, this),\n        onCancel: () => dispatch({\n          type: \"cancel\"\n        }),\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          sx: {\n            textAlign: \"center\"\n          },\n          children: [\"Confirm the request that's just appeared.\", isMetaMask ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \" If you can't see a request, open your MetaMask extension via your browser.\"\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \" If you can't see a request, you might have to open your wallet.\"\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this), connectionState.type === \"rejectedByUser\" && /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(RetryDialog, {\n        title: \"Cancel connection?\",\n        onCancel: () => dispatch({\n          type: \"cancel\"\n        }),\n        onRetry: () => {\n          dispatch({\n            type: \"retry\"\n          });\n          activate(connectionState.connector);\n        },\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          children: \"To use Liquity, you need to connect your Ethereum account.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this), connectionState.type === \"alreadyPending\" && /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(RetryDialog, {\n        title: \"Connection already requested\",\n        onCancel: () => dispatch({\n          type: \"cancel\"\n        }),\n        onRetry: () => {\n          dispatch({\n            type: \"retry\"\n          });\n          activate(connectionState.connector);\n        },\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          children: \"Please check your wallet and accept the connection request before retrying.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(WalletConnector, \"jyCQVX+5nPtWEHhVh053Vsg/mfk=\", false, function () {\n  return [useWeb3React, useAuthorizedConnection];\n});\n\n_c = WalletConnector;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletConnector\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/WalletConnector.tsx"],"names":["React","useEffect","useReducer","useWeb3React","Button","Text","Flex","Link","Box","injectedConnector","useAuthorizedConnection","RetryDialog","ConnectionConfirmationDialog","MetaMaskIcon","Icon","Modal","connectionReducer","state","action","type","connector","error","message","match","console","warn","log","detectMetaMask","window","ethereum","isMetaMask","WalletConnector","children","loader","activate","deactivate","active","triedAuthorizedConnection","connectionState","dispatch","height","justifyContent","alignItems","ml","textAlign","lineHeight"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { AbstractConnector } from \"@web3-react/abstract-connector\";\nimport { Button, Text, Flex, Link, Box } from \"theme-ui\";\n\nimport { injectedConnector } from \"../connectors/injectedConnector\";\nimport { useAuthorizedConnection } from \"../hooks/useAuthorizedConnection\";\n\nimport { RetryDialog } from \"./RetryDialog\";\nimport { ConnectionConfirmationDialog } from \"./ConnectionConfirmationDialog\";\nimport { MetaMaskIcon } from \"./MetaMaskIcon\";\nimport { Icon } from \"./Icon\";\nimport { Modal } from \"./Modal\";\n\ninterface MaybeHasMetaMask {\n  ethereum?: {\n    isMetaMask?: boolean;\n  };\n}\n\ntype ConnectionState =\n  | { type: \"inactive\" }\n  | {\n      type: \"activating\" | \"active\" | \"rejectedByUser\" | \"alreadyPending\" | \"failed\";\n      connector: AbstractConnector;\n    };\n\ntype ConnectionAction =\n  | { type: \"startActivating\"; connector: AbstractConnector }\n  | { type: \"fail\"; error: Error }\n  | { type: \"finishActivating\" | \"retry\" | \"cancel\" | \"deactivate\" };\n\nconst connectionReducer: React.Reducer<ConnectionState, ConnectionAction> = (state, action) => {\n  switch (action.type) {\n    case \"startActivating\":\n      return {\n        type: \"activating\",\n        connector: action.connector\n      };\n    case \"finishActivating\":\n      return {\n        type: \"active\",\n        connector: state.type === \"inactive\" ? injectedConnector : state.connector\n      };\n    case \"fail\":\n      if (state.type !== \"inactive\") {\n        return {\n          type: action.error.message.match(/user rejected/i)\n            ? \"rejectedByUser\"\n            : action.error.message.match(/already pending/i)\n            ? \"alreadyPending\"\n            : \"failed\",\n          connector: state.connector\n        };\n      }\n      break;\n    case \"retry\":\n      if (state.type !== \"inactive\") {\n        return {\n          type: \"activating\",\n          connector: state.connector\n        };\n      }\n      break;\n    case \"cancel\":\n      return {\n        type: \"inactive\"\n      };\n    case \"deactivate\":\n      return {\n        type: \"inactive\"\n      };\n  }\n\n  console.warn(\"Ignoring connectionReducer action:\");\n  console.log(action);\n  console.log(\"  in state:\");\n  console.log(state);\n\n  return state;\n};\n\nconst detectMetaMask = () => (window as MaybeHasMetaMask).ethereum?.isMetaMask ?? false;\n\ntype WalletConnectorProps = {\n  loader?: React.ReactNode;\n};\n\nexport const WalletConnector: React.FC<WalletConnectorProps> = ({ children, loader }) => {\n  const { activate, deactivate, active, error } = useWeb3React<unknown>();\n  const triedAuthorizedConnection = useAuthorizedConnection();\n  const [connectionState, dispatch] = useReducer(connectionReducer, { type: \"inactive\" });\n  const isMetaMask = detectMetaMask();\n\n  useEffect(() => {\n    if (error) {\n      dispatch({ type: \"fail\", error });\n      deactivate();\n    }\n  }, [error, deactivate]);\n\n  useEffect(() => {\n    if (active) {\n      dispatch({ type: \"finishActivating\" });\n    } else {\n      dispatch({ type: \"deactivate\" });\n    }\n  }, [active]);\n\n  if (!triedAuthorizedConnection) {\n    return <>{loader}</>;\n  }\n\n  if (connectionState.type === \"active\") {\n    return <>{children}</>;\n  }\n\n  return (\n    <>\n      <Flex sx={{ height: \"100vh\", justifyContent: \"center\", alignItems: \"center\" }}>\n        <Button\n          onClick={() => {\n            dispatch({ type: \"startActivating\", connector: injectedConnector });\n            activate(injectedConnector);\n          }}\n        >\n          {isMetaMask ? (\n            <>\n              <MetaMaskIcon />\n              <Box sx={{ ml: 2 }}>Connect to MetaMask</Box>\n            </>\n          ) : (\n            <>\n              <Icon name=\"plug\" size=\"lg\" />\n              <Box sx={{ ml: 2 }}>Connect wallet</Box>\n            </>\n          )}\n        </Button>\n      </Flex>\n\n      {connectionState.type === \"failed\" && (\n        <Modal>\n          <RetryDialog\n            title={isMetaMask ? \"Failed to connect to MetaMask\" : \"Failed to connect wallet\"}\n            onCancel={() => dispatch({ type: \"cancel\" })}\n            onRetry={() => {\n              dispatch({ type: \"retry\" });\n              activate(connectionState.connector);\n            }}\n          >\n            <Box sx={{ textAlign: \"center\" }}>\n              You might need to install MetaMask or use a different browser.\n            </Box>\n            <Link sx={{ lineHeight: 3 }} href=\"https://metamask.io/download.html\" target=\"_blank\">\n              Learn more <Icon size=\"xs\" name=\"external-link-alt\" />\n            </Link>\n          </RetryDialog>\n        </Modal>\n      )}\n\n      {connectionState.type === \"activating\" && (\n        <Modal>\n          <ConnectionConfirmationDialog\n            title={\n              isMetaMask ? \"Confirm connection in MetaMask\" : \"Confirm connection in your wallet\"\n            }\n            icon={isMetaMask ? <MetaMaskIcon /> : <Icon name=\"wallet\" size=\"lg\" />}\n            onCancel={() => dispatch({ type: \"cancel\" })}\n          >\n            <Text sx={{ textAlign: \"center\" }}>\n              Confirm the request that&apos;s just appeared.\n              {isMetaMask ? (\n                <> If you can&apos;t see a request, open your MetaMask extension via your browser.</>\n              ) : (\n                <> If you can&apos;t see a request, you might have to open your wallet.</>\n              )}\n            </Text>\n          </ConnectionConfirmationDialog>\n        </Modal>\n      )}\n\n      {connectionState.type === \"rejectedByUser\" && (\n        <Modal>\n          <RetryDialog\n            title=\"Cancel connection?\"\n            onCancel={() => dispatch({ type: \"cancel\" })}\n            onRetry={() => {\n              dispatch({ type: \"retry\" });\n              activate(connectionState.connector);\n            }}\n          >\n            <Text>To use Liquity, you need to connect your Ethereum account.</Text>\n          </RetryDialog>\n        </Modal>\n      )}\n\n      {connectionState.type === \"alreadyPending\" && (\n        <Modal>\n          <RetryDialog\n            title=\"Connection already requested\"\n            onCancel={() => dispatch({ type: \"cancel\" })}\n            onRetry={() => {\n              dispatch({ type: \"retry\" });\n              activate(connectionState.connector);\n            }}\n          >\n            <Text>Please check your wallet and accept the connection request before retrying.</Text>\n          </RetryDialog>\n        </Modal>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}