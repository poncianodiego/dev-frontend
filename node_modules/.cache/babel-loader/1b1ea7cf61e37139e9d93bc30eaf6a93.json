{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _regeneratorRuntime = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthersLiquity = exports.EthersTransactionFailedError = void 0;\n\nvar lib_base_1 = require(\"@liquity/lib-base\");\n\nvar EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\n\nvar PopulatableEthersLiquity_1 = require(\"./PopulatableEthersLiquity\");\n\nvar ReadableEthersLiquity_1 = require(\"./ReadableEthersLiquity\");\n\nvar SendableEthersLiquity_1 = require(\"./SendableEthersLiquity\");\n/**\n * Thrown by {@link EthersLiquity} in case of transaction failure.\n *\n * @public\n */\n\n\nvar EthersTransactionFailedError = /*#__PURE__*/function (_lib_base_1$Transacti) {\n  _inherits(EthersTransactionFailedError, _lib_base_1$Transacti);\n\n  var _super = _createSuper(EthersTransactionFailedError);\n\n  function EthersTransactionFailedError(message, failedReceipt) {\n    _classCallCheck(this, EthersTransactionFailedError);\n\n    return _super.call(this, \"EthersTransactionFailedError\", message, failedReceipt);\n  }\n\n  return EthersTransactionFailedError;\n}(lib_base_1.TransactionFailedError);\n\nexports.EthersTransactionFailedError = EthersTransactionFailedError;\n\nvar waitForSuccess = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tx) {\n    var receipt;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return tx.waitForReceipt();\n\n          case 2:\n            receipt = _context.sent;\n\n            if (!(receipt.status !== \"succeeded\")) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new EthersTransactionFailedError(\"Transaction failed\", receipt);\n\n          case 5:\n            return _context.abrupt(\"return\", receipt.details);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function waitForSuccess(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Convenience class that combines multiple interfaces of the library in one object.\n *\n * @public\n */\n\n\nvar EthersLiquity = /*#__PURE__*/function () {\n  /** @internal */\n  function EthersLiquity(readable) {\n    _classCallCheck(this, EthersLiquity);\n\n    this._readable = readable;\n    this.connection = readable.connection;\n    this.populate = new PopulatableEthersLiquity_1.PopulatableEthersLiquity(readable);\n    this.send = new SendableEthersLiquity_1.SendableEthersLiquity(this.populate);\n  }\n  /** @internal */\n\n\n  _createClass(EthersLiquity, [{\n    key: \"hasStore\",\n    value: function hasStore() {\n      return false;\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalRedistributed} */\n\n  }, {\n    key: \"getTotalRedistributed\",\n    value: function getTotalRedistributed(overrides) {\n      return this._readable.getTotalRedistributed(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTroveBeforeRedistribution} */\n\n  }, {\n    key: \"getTroveBeforeRedistribution\",\n    value: function getTroveBeforeRedistribution(address, overrides) {\n      return this._readable.getTroveBeforeRedistribution(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTrove} */\n\n  }, {\n    key: \"getTrove\",\n    value: function getTrove(address, overrides) {\n      return this._readable.getTrove(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getNumberOfTroves} */\n\n  }, {\n    key: \"getNumberOfTroves\",\n    value: function getNumberOfTroves(overrides) {\n      return this._readable.getNumberOfTroves(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getPrice} */\n\n  }, {\n    key: \"getPrice\",\n    value: function getPrice(overrides) {\n      return this._readable.getPrice(overrides);\n    }\n    /** @internal */\n\n  }, {\n    key: \"_getActivePool\",\n    value: function _getActivePool(overrides) {\n      return this._readable._getActivePool(overrides);\n    }\n    /** @internal */\n\n  }, {\n    key: \"_getDefaultPool\",\n    value: function _getDefaultPool(overrides) {\n      return this._readable._getDefaultPool(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotal} */\n\n  }, {\n    key: \"getTotal\",\n    value: function getTotal(overrides) {\n      return this._readable.getTotal(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getStabilityDeposit} */\n\n  }, {\n    key: \"getStabilityDeposit\",\n    value: function getStabilityDeposit(address, overrides) {\n      return this._readable.getStabilityDeposit(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingStabilityPoolLQTYReward} */\n\n  }, {\n    key: \"getRemainingStabilityPoolLQTYReward\",\n    value: function getRemainingStabilityPoolLQTYReward(overrides) {\n      return this._readable.getRemainingStabilityPoolLQTYReward(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDInStabilityPool} */\n\n  }, {\n    key: \"getLUSDInStabilityPool\",\n    value: function getLUSDInStabilityPool(overrides) {\n      return this._readable.getLUSDInStabilityPool(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDBalance} */\n\n  }, {\n    key: \"getLUSDBalance\",\n    value: function getLUSDBalance(address, overrides) {\n      return this._readable.getLUSDBalance(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYBalance} */\n\n  }, {\n    key: \"getLQTYBalance\",\n    value: function getLQTYBalance(address, overrides) {\n      return this._readable.getLQTYBalance(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenBalance} */\n\n  }, {\n    key: \"getUniTokenBalance\",\n    value: function getUniTokenBalance(address, overrides) {\n      return this._readable.getUniTokenBalance(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenAllowance} */\n\n  }, {\n    key: \"getUniTokenAllowance\",\n    value: function getUniTokenAllowance(address, overrides) {\n      return this._readable.getUniTokenAllowance(address, overrides);\n    }\n    /** @internal */\n\n  }, {\n    key: \"_getRemainingLiquidityMiningLQTYRewardCalculator\",\n    value: function _getRemainingLiquidityMiningLQTYRewardCalculator(overrides) {\n      return this._readable._getRemainingLiquidityMiningLQTYRewardCalculator(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingLiquidityMiningLQTYReward} */\n\n  }, {\n    key: \"getRemainingLiquidityMiningLQTYReward\",\n    value: function getRemainingLiquidityMiningLQTYReward(overrides) {\n      return this._readable.getRemainingLiquidityMiningLQTYReward(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningStake} */\n\n  }, {\n    key: \"getLiquidityMiningStake\",\n    value: function getLiquidityMiningStake(address, overrides) {\n      return this._readable.getLiquidityMiningStake(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedUniTokens} */\n\n  }, {\n    key: \"getTotalStakedUniTokens\",\n    value: function getTotalStakedUniTokens(overrides) {\n      return this._readable.getTotalStakedUniTokens(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningLQTYReward} */\n\n  }, {\n    key: \"getLiquidityMiningLQTYReward\",\n    value: function getLiquidityMiningLQTYReward(address, overrides) {\n      return this._readable.getLiquidityMiningLQTYReward(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getCollateralSurplusBalance} */\n\n  }, {\n    key: \"getCollateralSurplusBalance\",\n    value: function getCollateralSurplusBalance(address, overrides) {\n      return this._readable.getCollateralSurplusBalance(address, overrides);\n    }\n  }, {\n    key: \"getTroves\",\n    value: function getTroves(params, overrides) {\n      return this._readable.getTroves(params, overrides);\n    }\n    /** @internal */\n\n  }, {\n    key: \"_getFeesFactory\",\n    value: function _getFeesFactory(overrides) {\n      return this._readable._getFeesFactory(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFees} */\n\n  }, {\n    key: \"getFees\",\n    value: function getFees(overrides) {\n      return this._readable.getFees(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYStake} */\n\n  }, {\n    key: \"getLQTYStake\",\n    value: function getLQTYStake(address, overrides) {\n      return this._readable.getLQTYStake(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedLQTY} */\n\n  }, {\n    key: \"getTotalStakedLQTY\",\n    value: function getTotalStakedLQTY(overrides) {\n      return this._readable.getTotalStakedLQTY(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFrontendStatus} */\n\n  }, {\n    key: \"getFrontendStatus\",\n    value: function getFrontendStatus(address, overrides) {\n      return this._readable.getFrontendStatus(address, overrides);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.openTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"openTrove\",\n    value: function openTrove(params, maxBorrowingRate, overrides) {\n      return this.send.openTrove(params, maxBorrowingRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.closeTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"closeTrove\",\n    value: function closeTrove(overrides) {\n      return this.send.closeTrove(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.adjustTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"adjustTrove\",\n    value: function adjustTrove(params, maxBorrowingRate, overrides) {\n      return this.send.adjustTrove(params, maxBorrowingRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.depositCollateral}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"depositCollateral\",\n    value: function depositCollateral(amount, overrides) {\n      return this.send.depositCollateral(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawCollateral}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"withdrawCollateral\",\n    value: function withdrawCollateral(amount, overrides) {\n      return this.send.withdrawCollateral(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.borrowLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"borrowLUSD\",\n    value: function borrowLUSD(amount, maxBorrowingRate, overrides) {\n      return this.send.borrowLUSD(amount, maxBorrowingRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.repayLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"repayLUSD\",\n    value: function repayLUSD(amount, overrides) {\n      return this.send.repayLUSD(amount, overrides).then(waitForSuccess);\n    }\n    /** @internal */\n\n  }, {\n    key: \"setPrice\",\n    value: function setPrice(price, overrides) {\n      return this.send.setPrice(price, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.liquidate}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"liquidate\",\n    value: function liquidate(address, overrides) {\n      return this.send.liquidate(address, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.liquidateUpTo}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"liquidateUpTo\",\n    value: function liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides) {\n      return this.send.liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.depositLUSDInStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"depositLUSDInStabilityPool\",\n    value: function depositLUSDInStabilityPool(amount, frontendTag, overrides) {\n      return this.send.depositLUSDInStabilityPool(amount, frontendTag, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawLUSDFromStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"withdrawLUSDFromStabilityPool\",\n    value: function withdrawLUSDFromStabilityPool(amount, overrides) {\n      return this.send.withdrawLUSDFromStabilityPool(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawGainsFromStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"withdrawGainsFromStabilityPool\",\n    value: function withdrawGainsFromStabilityPool(overrides) {\n      return this.send.withdrawGainsFromStabilityPool(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.transferCollateralGainToTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"transferCollateralGainToTrove\",\n    value: function transferCollateralGainToTrove(overrides) {\n      return this.send.transferCollateralGainToTrove(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.sendLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"sendLUSD\",\n    value: function sendLUSD(toAddress, amount, overrides) {\n      return this.send.sendLUSD(toAddress, amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.sendLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"sendLQTY\",\n    value: function sendLQTY(toAddress, amount, overrides) {\n      return this.send.sendLQTY(toAddress, amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.redeemLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"redeemLUSD\",\n    value: function redeemLUSD(amount, maxRedemptionRate, overrides) {\n      return this.send.redeemLUSD(amount, maxRedemptionRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.claimCollateralSurplus}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"claimCollateralSurplus\",\n    value: function claimCollateralSurplus(overrides) {\n      return this.send.claimCollateralSurplus(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.stakeLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"stakeLQTY\",\n    value: function stakeLQTY(amount, overrides) {\n      return this.send.stakeLQTY(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.unstakeLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"unstakeLQTY\",\n    value: function unstakeLQTY(amount, overrides) {\n      return this.send.unstakeLQTY(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawGainsFromStaking}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"withdrawGainsFromStaking\",\n    value: function withdrawGainsFromStaking(overrides) {\n      return this.send.withdrawGainsFromStaking(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.registerFrontend}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"registerFrontend\",\n    value: function registerFrontend(kickbackRate, overrides) {\n      return this.send.registerFrontend(kickbackRate, overrides).then(waitForSuccess);\n    }\n    /** @internal */\n\n  }, {\n    key: \"_mintUniToken\",\n    value: function _mintUniToken(amount, address, overrides) {\n      return this.send._mintUniToken(amount, address, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.approveUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"approveUniTokens\",\n    value: function approveUniTokens(allowance, overrides) {\n      return this.send.approveUniTokens(allowance, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.stakeUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"stakeUniTokens\",\n    value: function stakeUniTokens(amount, overrides) {\n      return this.send.stakeUniTokens(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.unstakeUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"unstakeUniTokens\",\n    value: function unstakeUniTokens(amount, overrides) {\n      return this.send.unstakeUniTokens(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawLQTYRewardFromLiquidityMining}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"withdrawLQTYRewardFromLiquidityMining\",\n    value: function withdrawLQTYRewardFromLiquidityMining(overrides) {\n      return this.send.withdrawLQTYRewardFromLiquidityMining(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.exitLiquidityMining}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n\n  }, {\n    key: \"exitLiquidityMining\",\n    value: function exitLiquidityMining(overrides) {\n      return this.send.exitLiquidityMining(overrides).then(waitForSuccess);\n    }\n  }], [{\n    key: \"_from\",\n    value: function _from(connection) {\n      if (EthersLiquityConnection_1._usingStore(connection)) {\n        return new _EthersLiquityWithStore(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));\n      } else {\n        return new EthersLiquity(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));\n      }\n    }\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(signerOrProvider, optionalParams) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = EthersLiquity;\n                _context2.next = 3;\n                return EthersLiquityConnection_1._connect(signerOrProvider, optionalParams);\n\n              case 3:\n                _context2.t1 = _context2.sent;\n                return _context2.abrupt(\"return\", _context2.t0._from.call(_context2.t0, _context2.t1));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function connect(_x2, _x3) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }]);\n\n  return EthersLiquity;\n}();\n\nexports.EthersLiquity = EthersLiquity;\n\nvar _EthersLiquityWithStore = /*#__PURE__*/function (_EthersLiquity) {\n  _inherits(_EthersLiquityWithStore, _EthersLiquity);\n\n  var _super2 = _createSuper(_EthersLiquityWithStore);\n\n  function _EthersLiquityWithStore(readable) {\n    var _this;\n\n    _classCallCheck(this, _EthersLiquityWithStore);\n\n    _this = _super2.call(this, readable);\n    _this.store = readable.store;\n    return _this;\n  }\n\n  _createClass(_EthersLiquityWithStore, [{\n    key: \"hasStore\",\n    value: function hasStore(store) {\n      return store === undefined || store === this.connection.useStore;\n    }\n  }]);\n\n  return _EthersLiquityWithStore;\n}(EthersLiquity);","map":{"version":3,"sources":["../../src/EthersLiquity.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EthersLiquity = exports.EthersTransactionFailedError = void 0;\nconst lib_base_1 = require(\"@liquity/lib-base\");\nconst EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\nconst PopulatableEthersLiquity_1 = require(\"./PopulatableEthersLiquity\");\nconst ReadableEthersLiquity_1 = require(\"./ReadableEthersLiquity\");\nconst SendableEthersLiquity_1 = require(\"./SendableEthersLiquity\");\n/**\n * Thrown by {@link EthersLiquity} in case of transaction failure.\n *\n * @public\n */\nclass EthersTransactionFailedError extends lib_base_1.TransactionFailedError {\n    constructor(message, failedReceipt) {\n        super(\"EthersTransactionFailedError\", message, failedReceipt);\n    }\n}\nexports.EthersTransactionFailedError = EthersTransactionFailedError;\nconst waitForSuccess = async (tx) => {\n    const receipt = await tx.waitForReceipt();\n    if (receipt.status !== \"succeeded\") {\n        throw new EthersTransactionFailedError(\"Transaction failed\", receipt);\n    }\n    return receipt.details;\n};\n/**\n * Convenience class that combines multiple interfaces of the library in one object.\n *\n * @public\n */\nclass EthersLiquity {\n    /** @internal */\n    constructor(readable) {\n        this._readable = readable;\n        this.connection = readable.connection;\n        this.populate = new PopulatableEthersLiquity_1.PopulatableEthersLiquity(readable);\n        this.send = new SendableEthersLiquity_1.SendableEthersLiquity(this.populate);\n    }\n    /** @internal */\n    static _from(connection) {\n        if (EthersLiquityConnection_1._usingStore(connection)) {\n            return new _EthersLiquityWithStore(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));\n        }\n        else {\n            return new EthersLiquity(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));\n        }\n    }\n    static async connect(signerOrProvider, optionalParams) {\n        return EthersLiquity._from(await EthersLiquityConnection_1._connect(signerOrProvider, optionalParams));\n    }\n    hasStore() {\n        return false;\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalRedistributed} */\n    getTotalRedistributed(overrides) {\n        return this._readable.getTotalRedistributed(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTroveBeforeRedistribution} */\n    getTroveBeforeRedistribution(address, overrides) {\n        return this._readable.getTroveBeforeRedistribution(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTrove} */\n    getTrove(address, overrides) {\n        return this._readable.getTrove(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getNumberOfTroves} */\n    getNumberOfTroves(overrides) {\n        return this._readable.getNumberOfTroves(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getPrice} */\n    getPrice(overrides) {\n        return this._readable.getPrice(overrides);\n    }\n    /** @internal */\n    _getActivePool(overrides) {\n        return this._readable._getActivePool(overrides);\n    }\n    /** @internal */\n    _getDefaultPool(overrides) {\n        return this._readable._getDefaultPool(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotal} */\n    getTotal(overrides) {\n        return this._readable.getTotal(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getStabilityDeposit} */\n    getStabilityDeposit(address, overrides) {\n        return this._readable.getStabilityDeposit(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingStabilityPoolLQTYReward} */\n    getRemainingStabilityPoolLQTYReward(overrides) {\n        return this._readable.getRemainingStabilityPoolLQTYReward(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDInStabilityPool} */\n    getLUSDInStabilityPool(overrides) {\n        return this._readable.getLUSDInStabilityPool(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDBalance} */\n    getLUSDBalance(address, overrides) {\n        return this._readable.getLUSDBalance(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYBalance} */\n    getLQTYBalance(address, overrides) {\n        return this._readable.getLQTYBalance(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenBalance} */\n    getUniTokenBalance(address, overrides) {\n        return this._readable.getUniTokenBalance(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenAllowance} */\n    getUniTokenAllowance(address, overrides) {\n        return this._readable.getUniTokenAllowance(address, overrides);\n    }\n    /** @internal */\n    _getRemainingLiquidityMiningLQTYRewardCalculator(overrides) {\n        return this._readable._getRemainingLiquidityMiningLQTYRewardCalculator(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingLiquidityMiningLQTYReward} */\n    getRemainingLiquidityMiningLQTYReward(overrides) {\n        return this._readable.getRemainingLiquidityMiningLQTYReward(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningStake} */\n    getLiquidityMiningStake(address, overrides) {\n        return this._readable.getLiquidityMiningStake(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedUniTokens} */\n    getTotalStakedUniTokens(overrides) {\n        return this._readable.getTotalStakedUniTokens(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningLQTYReward} */\n    getLiquidityMiningLQTYReward(address, overrides) {\n        return this._readable.getLiquidityMiningLQTYReward(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getCollateralSurplusBalance} */\n    getCollateralSurplusBalance(address, overrides) {\n        return this._readable.getCollateralSurplusBalance(address, overrides);\n    }\n    getTroves(params, overrides) {\n        return this._readable.getTroves(params, overrides);\n    }\n    /** @internal */\n    _getFeesFactory(overrides) {\n        return this._readable._getFeesFactory(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFees} */\n    getFees(overrides) {\n        return this._readable.getFees(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYStake} */\n    getLQTYStake(address, overrides) {\n        return this._readable.getLQTYStake(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedLQTY} */\n    getTotalStakedLQTY(overrides) {\n        return this._readable.getTotalStakedLQTY(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFrontendStatus} */\n    getFrontendStatus(address, overrides) {\n        return this._readable.getFrontendStatus(address, overrides);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.openTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    openTrove(params, maxBorrowingRate, overrides) {\n        return this.send.openTrove(params, maxBorrowingRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.closeTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    closeTrove(overrides) {\n        return this.send.closeTrove(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.adjustTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    adjustTrove(params, maxBorrowingRate, overrides) {\n        return this.send.adjustTrove(params, maxBorrowingRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.depositCollateral}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    depositCollateral(amount, overrides) {\n        return this.send.depositCollateral(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawCollateral}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawCollateral(amount, overrides) {\n        return this.send.withdrawCollateral(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.borrowLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    borrowLUSD(amount, maxBorrowingRate, overrides) {\n        return this.send.borrowLUSD(amount, maxBorrowingRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.repayLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    repayLUSD(amount, overrides) {\n        return this.send.repayLUSD(amount, overrides).then(waitForSuccess);\n    }\n    /** @internal */\n    setPrice(price, overrides) {\n        return this.send.setPrice(price, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.liquidate}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    liquidate(address, overrides) {\n        return this.send.liquidate(address, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.liquidateUpTo}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides) {\n        return this.send.liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.depositLUSDInStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    depositLUSDInStabilityPool(amount, frontendTag, overrides) {\n        return this.send.depositLUSDInStabilityPool(amount, frontendTag, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawLUSDFromStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawLUSDFromStabilityPool(amount, overrides) {\n        return this.send.withdrawLUSDFromStabilityPool(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawGainsFromStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawGainsFromStabilityPool(overrides) {\n        return this.send.withdrawGainsFromStabilityPool(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.transferCollateralGainToTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    transferCollateralGainToTrove(overrides) {\n        return this.send.transferCollateralGainToTrove(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.sendLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    sendLUSD(toAddress, amount, overrides) {\n        return this.send.sendLUSD(toAddress, amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.sendLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    sendLQTY(toAddress, amount, overrides) {\n        return this.send.sendLQTY(toAddress, amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.redeemLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    redeemLUSD(amount, maxRedemptionRate, overrides) {\n        return this.send.redeemLUSD(amount, maxRedemptionRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.claimCollateralSurplus}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    claimCollateralSurplus(overrides) {\n        return this.send.claimCollateralSurplus(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.stakeLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    stakeLQTY(amount, overrides) {\n        return this.send.stakeLQTY(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.unstakeLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    unstakeLQTY(amount, overrides) {\n        return this.send.unstakeLQTY(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawGainsFromStaking}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawGainsFromStaking(overrides) {\n        return this.send.withdrawGainsFromStaking(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.registerFrontend}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    registerFrontend(kickbackRate, overrides) {\n        return this.send.registerFrontend(kickbackRate, overrides).then(waitForSuccess);\n    }\n    /** @internal */\n    _mintUniToken(amount, address, overrides) {\n        return this.send._mintUniToken(amount, address, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.approveUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    approveUniTokens(allowance, overrides) {\n        return this.send.approveUniTokens(allowance, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.stakeUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    stakeUniTokens(amount, overrides) {\n        return this.send.stakeUniTokens(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.unstakeUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    unstakeUniTokens(amount, overrides) {\n        return this.send.unstakeUniTokens(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawLQTYRewardFromLiquidityMining}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawLQTYRewardFromLiquidityMining(overrides) {\n        return this.send.withdrawLQTYRewardFromLiquidityMining(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.exitLiquidityMining}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    exitLiquidityMining(overrides) {\n        return this.send.exitLiquidityMining(overrides).then(waitForSuccess);\n    }\n}\nexports.EthersLiquity = EthersLiquity;\nclass _EthersLiquityWithStore extends EthersLiquity {\n    constructor(readable) {\n        super(readable);\n        this.store = readable.store;\n    }\n    hasStore(store) {\n        return store === undefined || store === this.connection.useStore;\n    }\n}\n//# sourceMappingURL=EthersLiquity.js.map"]},"metadata":{},"sourceType":"script"}