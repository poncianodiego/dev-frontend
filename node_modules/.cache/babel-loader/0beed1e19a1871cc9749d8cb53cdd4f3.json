{"ast":null,"code":"import _slicedToArray from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useEffect}from\"react\";import{useLiquityReducer}from\"@liquity/lib-react\";import{useMyTransactionState}from\"../../Transaction\";import{StakingViewContext}from\"./StakingViewContext\";import{jsx as _jsx}from\"react/jsx-runtime\";var init=function init(_ref){var lqtyStake=_ref.lqtyStake;return{lqtyStake:lqtyStake,changePending:false,adjusting:false};};var reduce=function reduce(state,action){// console.log(state);\n// console.log(action);\nswitch(action.type){case\"startAdjusting\":return _objectSpread(_objectSpread({},state),{},{adjusting:true});case\"cancelAdjusting\":return _objectSpread(_objectSpread({},state),{},{adjusting:false});case\"startChange\":return _objectSpread(_objectSpread({},state),{},{changePending:true});case\"abortChange\":return _objectSpread(_objectSpread({},state),{},{changePending:false});case\"updateStore\":{var oldStake=action.oldState.lqtyStake,updatedStake=action.stateChange.lqtyStake;if(updatedStake){var changeCommitted=!updatedStake.stakedLQTY.eq(oldStake.stakedLQTY)||updatedStake.collateralGain.lt(oldStake.collateralGain)||updatedStake.lusdGain.lt(oldStake.lusdGain);return _objectSpread(_objectSpread({},state),{},{lqtyStake:updatedStake,adjusting:false,changePending:changeCommitted?false:state.changePending});}}}return state;};export var StakingViewProvider=function StakingViewProvider(_ref2){var children=_ref2.children;var stakingTransactionState=useMyTransactionState(\"stake\");var _useLiquityReducer=useLiquityReducer(reduce,init),_useLiquityReducer2=_slicedToArray(_useLiquityReducer,2),_useLiquityReducer2$=_useLiquityReducer2[0],adjusting=_useLiquityReducer2$.adjusting,changePending=_useLiquityReducer2$.changePending,lqtyStake=_useLiquityReducer2$.lqtyStake,dispatch=_useLiquityReducer2[1];useEffect(function(){if(stakingTransactionState.type===\"waitingForApproval\"||stakingTransactionState.type===\"waitingForConfirmation\"){dispatch({type:\"startChange\"});}else if(stakingTransactionState.type===\"failed\"||stakingTransactionState.type===\"cancelled\"){dispatch({type:\"abortChange\"});}},[stakingTransactionState.type,dispatch]);return/*#__PURE__*/_jsx(StakingViewContext.Provider,{value:{view:adjusting?\"ADJUSTING\":lqtyStake.isEmpty?\"NONE\":\"ACTIVE\",changePending:changePending,dispatch:dispatch},children:children});};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Staking/context/StakingViewProvider.tsx"],"names":["useEffect","useLiquityReducer","useMyTransactionState","StakingViewContext","init","lqtyStake","changePending","adjusting","reduce","state","action","type","oldStake","oldState","updatedStake","stateChange","changeCommitted","stakedLQTY","eq","collateralGain","lt","lusdGain","StakingViewProvider","children","stakingTransactionState","dispatch","view","isEmpty"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\n\nimport { LiquityStoreState, LQTYStake } from \"@liquity/lib-base\";\nimport { LiquityStoreUpdate, useLiquityReducer } from \"@liquity/lib-react\";\n\nimport { useMyTransactionState } from \"../../Transaction\";\n\nimport { StakingViewAction, StakingViewContext } from \"./StakingViewContext\";\n\ntype StakingViewProviderAction =\n  | LiquityStoreUpdate\n  | StakingViewAction\n  | { type: \"startChange\" | \"abortChange\" };\n\ntype StakingViewProviderState = {\n  lqtyStake: LQTYStake;\n  changePending: boolean;\n  adjusting: boolean;\n};\n\nconst init = ({ lqtyStake }: LiquityStoreState): StakingViewProviderState => ({\n  lqtyStake,\n  changePending: false,\n  adjusting: false\n});\n\nconst reduce = (\n  state: StakingViewProviderState,\n  action: StakingViewProviderAction\n): StakingViewProviderState => {\n  // console.log(state);\n  // console.log(action);\n\n  switch (action.type) {\n    case \"startAdjusting\":\n      return { ...state, adjusting: true };\n\n    case \"cancelAdjusting\":\n      return { ...state, adjusting: false };\n\n    case \"startChange\":\n      return { ...state, changePending: true };\n\n    case \"abortChange\":\n      return { ...state, changePending: false };\n\n    case \"updateStore\": {\n      const {\n        oldState: { lqtyStake: oldStake },\n        stateChange: { lqtyStake: updatedStake }\n      } = action;\n\n      if (updatedStake) {\n        const changeCommitted =\n          !updatedStake.stakedLQTY.eq(oldStake.stakedLQTY) ||\n          updatedStake.collateralGain.lt(oldStake.collateralGain) ||\n          updatedStake.lusdGain.lt(oldStake.lusdGain);\n\n        return {\n          ...state,\n          lqtyStake: updatedStake,\n          adjusting: false,\n          changePending: changeCommitted ? false : state.changePending\n        };\n      }\n    }\n  }\n\n  return state;\n};\n\nexport const StakingViewProvider: React.FC = ({ children }) => {\n  const stakingTransactionState = useMyTransactionState(\"stake\");\n  const [{ adjusting, changePending, lqtyStake }, dispatch] = useLiquityReducer(reduce, init);\n\n  useEffect(() => {\n    if (\n      stakingTransactionState.type === \"waitingForApproval\" ||\n      stakingTransactionState.type === \"waitingForConfirmation\"\n    ) {\n      dispatch({ type: \"startChange\" });\n    } else if (\n      stakingTransactionState.type === \"failed\" ||\n      stakingTransactionState.type === \"cancelled\"\n    ) {\n      dispatch({ type: \"abortChange\" });\n    }\n  }, [stakingTransactionState.type, dispatch]);\n\n  return (\n    <StakingViewContext.Provider\n      value={{\n        view: adjusting ? \"ADJUSTING\" : lqtyStake.isEmpty ? \"NONE\" : \"ACTIVE\",\n        changePending,\n        dispatch\n      }}\n    >\n      {children}\n    </StakingViewContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}