{"ast":null,"code":"import _slicedToArray from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useCallback,useEffect,useState,useRef}from\"react\";import{Flex,Button,Box,Card,Heading}from\"theme-ui\";import{Decimal,Trove,LUSD_LIQUIDATION_RESERVE,Percent,Difference}from\"@liquity/lib-base\";import{useLiquitySelector}from\"@liquity/lib-react\";import{ActionDescription}from\"../ActionDescription\";import{useMyTransactionState}from\"../Transaction\";import{TroveAction}from\"./TroveAction\";import{useTroveView}from\"./context/TroveViewContext\";import{COIN}from\"../../strings\";import{Icon}from\"../Icon\";import{InfoIcon}from\"../InfoIcon\";import{LoadingOverlay}from\"../LoadingOverlay\";import{CollateralRatio}from\"./CollateralRatio\";import{EditableRow,StaticRow}from\"./Editor\";import{selectForTroveChangeValidation,validateTroveChange}from\"./validation/validateTroveChange\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var selector=function selector(state){var trove=state.trove,fees=state.fees,price=state.price,accountBalance=state.accountBalance;return{trove:trove,fees:fees,price:price,accountBalance:accountBalance,validationContext:selectForTroveChangeValidation(state)};};var TRANSACTION_ID=\"trove-adjustment\";var GAS_ROOM_ETH=Decimal.from(0.1);var feeFrom=function feeFrom(original,edited,borrowingRate){var change=original.whatChanged(edited,borrowingRate);if(change&&change.type!==\"invalidCreation\"&&change.params.borrowLUSD){return change.params.borrowLUSD.mul(borrowingRate);}else{return Decimal.ZERO;}};var applyUnsavedCollateralChanges=function applyUnsavedCollateralChanges(unsavedChanges,trove){if(unsavedChanges.absoluteValue){if(unsavedChanges.positive){return trove.collateral.add(unsavedChanges.absoluteValue);}if(unsavedChanges.negative){if(unsavedChanges.absoluteValue.lt(trove.collateral)){return trove.collateral.sub(unsavedChanges.absoluteValue);}}return trove.collateral;}return trove.collateral;};var applyUnsavedNetDebtChanges=function applyUnsavedNetDebtChanges(unsavedChanges,trove){if(unsavedChanges.absoluteValue){if(unsavedChanges.positive){return trove.netDebt.add(unsavedChanges.absoluteValue);}if(unsavedChanges.negative){if(unsavedChanges.absoluteValue.lt(trove.netDebt)){return trove.netDebt.sub(unsavedChanges.absoluteValue);}}return trove.netDebt;}return trove.netDebt;};export var Adjusting=function Adjusting(){var _useTroveView=useTroveView(),dispatchEvent=_useTroveView.dispatchEvent;var _useLiquitySelector=useLiquitySelector(selector),trove=_useLiquitySelector.trove,fees=_useLiquitySelector.fees,price=_useLiquitySelector.price,accountBalance=_useLiquitySelector.accountBalance,validationContext=_useLiquitySelector.validationContext;var editingState=useState();var previousTrove=useRef(trove);var _useState=useState(trove.collateral),_useState2=_slicedToArray(_useState,2),collateral=_useState2[0],setCollateral=_useState2[1];var _useState3=useState(trove.netDebt),_useState4=_slicedToArray(_useState3,2),netDebt=_useState4[0],setNetDebt=_useState4[1];var transactionState=useMyTransactionState(TRANSACTION_ID);var borrowingRate=fees.borrowingRate();useEffect(function(){if(transactionState.type===\"confirmedOneShot\"){dispatchEvent(\"TROVE_ADJUSTED\");}},[transactionState.type,dispatchEvent]);useEffect(function(){if(!previousTrove.current.collateral.eq(trove.collateral)){var unsavedChanges=Difference.between(collateral,previousTrove.current.collateral);var nextCollateral=applyUnsavedCollateralChanges(unsavedChanges,trove);setCollateral(nextCollateral);}if(!previousTrove.current.netDebt.eq(trove.netDebt)){var _unsavedChanges=Difference.between(netDebt,previousTrove.current.netDebt);var nextNetDebt=applyUnsavedNetDebtChanges(_unsavedChanges,trove);setNetDebt(nextNetDebt);}previousTrove.current=trove;},[trove,collateral,netDebt]);var handleCancelPressed=useCallback(function(){dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");},[dispatchEvent]);var reset=useCallback(function(){setCollateral(trove.collateral);setNetDebt(trove.netDebt);},[trove.collateral,trove.netDebt]);if(trove.status!==\"open\"){return null;}var isDirty=!collateral.eq(trove.collateral)||!netDebt.eq(trove.netDebt);var isDebtIncrease=netDebt.gt(trove.netDebt);var debtIncreaseAmount=isDebtIncrease?netDebt.sub(trove.netDebt):Decimal.ZERO;var fee=isDebtIncrease?feeFrom(trove,new Trove(trove.collateral,trove.debt.add(debtIncreaseAmount)),borrowingRate):Decimal.ZERO;var totalDebt=netDebt.add(LUSD_LIQUIDATION_RESERVE).add(fee);var maxBorrowingRate=borrowingRate.add(0.005);var updatedTrove=isDirty?new Trove(collateral,totalDebt):trove;var feePct=new Percent(borrowingRate);var maxEth=accountBalance.gt(GAS_ROOM_ETH)?accountBalance.sub(GAS_ROOM_ETH):Decimal.ZERO;var maxCollateral=collateral.add(maxEth);var collateralMaxedOut=collateral.eq(maxCollateral);var collateralRatio=!collateral.isZero&&!netDebt.isZero?updatedTrove.collateralRatio(price):undefined;var collateralRatioChange=Difference.between(collateralRatio,trove.collateralRatio(price));var _validateTroveChange=validateTroveChange(trove,updatedTrove,borrowingRate,validationContext),_validateTroveChange2=_slicedToArray(_validateTroveChange,2),troveChange=_validateTroveChange2[0],description=_validateTroveChange2[1];var isTransactionPending=transactionState.type===\"waitingForApproval\"||transactionState.type===\"waitingForConfirmation\";return/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsxs(Heading,{children:[\"Trove\",isDirty&&!isTransactionPending&&/*#__PURE__*/_jsx(Button,{variant:\"titleIcon\",sx:{\":enabled:hover\":{color:\"danger\"}},onClick:reset,children:/*#__PURE__*/_jsx(Icon,{name:\"history\",size:\"lg\"})})]}),/*#__PURE__*/_jsxs(Box,{sx:{p:[2,3]},children:[/*#__PURE__*/_jsx(EditableRow,{label:\"Collateral\",inputId:\"trove-collateral\",amount:collateral.prettify(4),maxAmount:maxCollateral.toString(),maxedOut:collateralMaxedOut,editingState:editingState,unit:\"ETH\",editedAmount:collateral.toString(4),setEditedAmount:function setEditedAmount(amount){return setCollateral(Decimal.from(amount));}}),/*#__PURE__*/_jsx(EditableRow,{label:\"Net debt\",inputId:\"trove-net-debt-amount\",amount:netDebt.prettify(),unit:COIN,editingState:editingState,editedAmount:netDebt.toString(2),setEditedAmount:function setEditedAmount(amount){return setNetDebt(Decimal.from(amount));}}),/*#__PURE__*/_jsx(StaticRow,{label:\"Liquidation Reserve\",inputId:\"trove-liquidation-reserve\",amount:\"\".concat(LUSD_LIQUIDATION_RESERVE),unit:COIN,infoIcon:/*#__PURE__*/_jsx(InfoIcon,{tooltip:/*#__PURE__*/_jsx(Card,{variant:\"tooltip\",sx:{width:\"200px\"},children:\"An amount set aside to cover the liquidator\\u2019s gas costs if your Trove needs to be liquidated. The amount increases your debt and is refunded if you close your Trove by fully paying off its net debt.\"})})}),/*#__PURE__*/_jsx(StaticRow,{label:\"Borrowing Fee\",inputId:\"trove-borrowing-fee\",amount:fee.prettify(2),pendingAmount:feePct.toString(2),unit:COIN,infoIcon:/*#__PURE__*/_jsx(InfoIcon,{tooltip:/*#__PURE__*/_jsx(Card,{variant:\"tooltip\",sx:{width:\"240px\"},children:\"This amount is deducted from the borrowed amount as a one-time fee. There are no recurring fees for borrowing, which is thus interest-free.\"})})}),/*#__PURE__*/_jsx(StaticRow,{label:\"Total debt\",inputId:\"trove-total-debt\",amount:totalDebt.prettify(2),unit:COIN,infoIcon:/*#__PURE__*/_jsx(InfoIcon,{tooltip:/*#__PURE__*/_jsxs(Card,{variant:\"tooltip\",sx:{width:\"240px\"},children:[\"The total amount of LUSD your Trove will hold.\",\" \",isDirty&&/*#__PURE__*/_jsxs(_Fragment,{children:[\"You will need to repay \",totalDebt.sub(LUSD_LIQUIDATION_RESERVE).prettify(2),\" \",\"LUSD to reclaim your collateral (\",LUSD_LIQUIDATION_RESERVE.toString(),\" LUSD Liquidation Reserve excluded).\"]})]})})}),/*#__PURE__*/_jsx(CollateralRatio,{value:collateralRatio,change:collateralRatioChange}),description!==null&&description!==void 0?description:/*#__PURE__*/_jsx(ActionDescription,{children:\"Adjust your Trove by modifying its collateral, debt, or both.\"}),/*#__PURE__*/_jsxs(Flex,{variant:\"layout.actions\",children:[/*#__PURE__*/_jsx(Button,{variant:\"cancel\",onClick:handleCancelPressed,children:\"Cancel\"}),troveChange?/*#__PURE__*/_jsx(TroveAction,{transactionId:TRANSACTION_ID,change:troveChange,maxBorrowingRate:maxBorrowingRate,children:\"Confirm\"}):/*#__PURE__*/_jsx(Button,{disabled:true,children:\"Confirm\"})]})]}),isTransactionPending&&/*#__PURE__*/_jsx(LoadingOverlay,{})]});};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/Adjusting.tsx"],"names":["React","useCallback","useEffect","useState","useRef","Flex","Button","Box","Card","Heading","Decimal","Trove","LUSD_LIQUIDATION_RESERVE","Percent","Difference","useLiquitySelector","ActionDescription","useMyTransactionState","TroveAction","useTroveView","COIN","Icon","InfoIcon","LoadingOverlay","CollateralRatio","EditableRow","StaticRow","selectForTroveChangeValidation","validateTroveChange","selector","state","trove","fees","price","accountBalance","validationContext","TRANSACTION_ID","GAS_ROOM_ETH","from","feeFrom","original","edited","borrowingRate","change","whatChanged","type","params","borrowLUSD","mul","ZERO","applyUnsavedCollateralChanges","unsavedChanges","absoluteValue","positive","collateral","add","negative","lt","sub","applyUnsavedNetDebtChanges","netDebt","Adjusting","dispatchEvent","editingState","previousTrove","setCollateral","setNetDebt","transactionState","current","eq","between","nextCollateral","nextNetDebt","handleCancelPressed","reset","status","isDirty","isDebtIncrease","gt","debtIncreaseAmount","fee","debt","totalDebt","maxBorrowingRate","updatedTrove","feePct","maxEth","maxCollateral","collateralMaxedOut","collateralRatio","isZero","undefined","collateralRatioChange","troveChange","description","isTransactionPending","color","p","prettify","toString","amount","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport { Flex, Button, Box, Card, Heading } from \"theme-ui\";\nimport {\n  LiquityStoreState,\n  Decimal,\n  Trove,\n  LUSD_LIQUIDATION_RESERVE,\n  Percent,\n  Difference\n} from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { ActionDescription } from \"../ActionDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\nimport { TroveAction } from \"./TroveAction\";\nimport { useTroveView } from \"./context/TroveViewContext\";\nimport { COIN } from \"../../strings\";\nimport { Icon } from \"../Icon\";\nimport { InfoIcon } from \"../InfoIcon\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { CollateralRatio } from \"./CollateralRatio\";\nimport { EditableRow, StaticRow } from \"./Editor\";\nimport {\n  selectForTroveChangeValidation,\n  validateTroveChange\n} from \"./validation/validateTroveChange\";\n\nconst selector = (state: LiquityStoreState) => {\n  const { trove, fees, price, accountBalance } = state;\n  return {\n    trove,\n    fees,\n    price,\n    accountBalance,\n    validationContext: selectForTroveChangeValidation(state)\n  };\n};\n\nconst TRANSACTION_ID = \"trove-adjustment\";\nconst GAS_ROOM_ETH = Decimal.from(0.1);\n\nconst feeFrom = (original: Trove, edited: Trove, borrowingRate: Decimal): Decimal => {\n  const change = original.whatChanged(edited, borrowingRate);\n\n  if (change && change.type !== \"invalidCreation\" && change.params.borrowLUSD) {\n    return change.params.borrowLUSD.mul(borrowingRate);\n  } else {\n    return Decimal.ZERO;\n  }\n};\n\nconst applyUnsavedCollateralChanges = (unsavedChanges: Difference, trove: Trove) => {\n  if (unsavedChanges.absoluteValue) {\n    if (unsavedChanges.positive) {\n      return trove.collateral.add(unsavedChanges.absoluteValue);\n    }\n    if (unsavedChanges.negative) {\n      if (unsavedChanges.absoluteValue.lt(trove.collateral)) {\n        return trove.collateral.sub(unsavedChanges.absoluteValue);\n      }\n    }\n    return trove.collateral;\n  }\n  return trove.collateral;\n};\n\nconst applyUnsavedNetDebtChanges = (unsavedChanges: Difference, trove: Trove) => {\n  if (unsavedChanges.absoluteValue) {\n    if (unsavedChanges.positive) {\n      return trove.netDebt.add(unsavedChanges.absoluteValue);\n    }\n    if (unsavedChanges.negative) {\n      if (unsavedChanges.absoluteValue.lt(trove.netDebt)) {\n        return trove.netDebt.sub(unsavedChanges.absoluteValue);\n      }\n    }\n    return trove.netDebt;\n  }\n  return trove.netDebt;\n};\n\nexport const Adjusting: React.FC = () => {\n  const { dispatchEvent } = useTroveView();\n  const { trove, fees, price, accountBalance, validationContext } = useLiquitySelector(selector);\n  const editingState = useState<string>();\n  const previousTrove = useRef<Trove>(trove);\n  const [collateral, setCollateral] = useState<Decimal>(trove.collateral);\n  const [netDebt, setNetDebt] = useState<Decimal>(trove.netDebt);\n\n  const transactionState = useMyTransactionState(TRANSACTION_ID);\n  const borrowingRate = fees.borrowingRate();\n\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"TROVE_ADJUSTED\");\n    }\n  }, [transactionState.type, dispatchEvent]);\n\n  useEffect(() => {\n    if (!previousTrove.current.collateral.eq(trove.collateral)) {\n      const unsavedChanges = Difference.between(collateral, previousTrove.current.collateral);\n      const nextCollateral = applyUnsavedCollateralChanges(unsavedChanges, trove);\n      setCollateral(nextCollateral);\n    }\n    if (!previousTrove.current.netDebt.eq(trove.netDebt)) {\n      const unsavedChanges = Difference.between(netDebt, previousTrove.current.netDebt);\n      const nextNetDebt = applyUnsavedNetDebtChanges(unsavedChanges, trove);\n      setNetDebt(nextNetDebt);\n    }\n    previousTrove.current = trove;\n  }, [trove, collateral, netDebt]);\n\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n\n  const reset = useCallback(() => {\n    setCollateral(trove.collateral);\n    setNetDebt(trove.netDebt);\n  }, [trove.collateral, trove.netDebt]);\n\n  if (trove.status !== \"open\") {\n    return null;\n  }\n\n  const isDirty = !collateral.eq(trove.collateral) || !netDebt.eq(trove.netDebt);\n  const isDebtIncrease = netDebt.gt(trove.netDebt);\n  const debtIncreaseAmount = isDebtIncrease ? netDebt.sub(trove.netDebt) : Decimal.ZERO;\n\n  const fee = isDebtIncrease\n    ? feeFrom(trove, new Trove(trove.collateral, trove.debt.add(debtIncreaseAmount)), borrowingRate)\n    : Decimal.ZERO;\n  const totalDebt = netDebt.add(LUSD_LIQUIDATION_RESERVE).add(fee);\n  const maxBorrowingRate = borrowingRate.add(0.005);\n  const updatedTrove = isDirty ? new Trove(collateral, totalDebt) : trove;\n  const feePct = new Percent(borrowingRate);\n  const maxEth = accountBalance.gt(GAS_ROOM_ETH) ? accountBalance.sub(GAS_ROOM_ETH) : Decimal.ZERO;\n  const maxCollateral = collateral.add(maxEth);\n  const collateralMaxedOut = collateral.eq(maxCollateral);\n  const collateralRatio =\n    !collateral.isZero && !netDebt.isZero ? updatedTrove.collateralRatio(price) : undefined;\n  const collateralRatioChange = Difference.between(collateralRatio, trove.collateralRatio(price));\n\n  const [troveChange, description] = validateTroveChange(\n    trove,\n    updatedTrove,\n    borrowingRate,\n    validationContext\n  );\n\n  const isTransactionPending =\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\";\n\n  return (\n    <Card>\n      <Heading>\n        Trove\n        {isDirty && !isTransactionPending && (\n          <Button variant=\"titleIcon\" sx={{ \":enabled:hover\": { color: \"danger\" } }} onClick={reset}>\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Collateral\"\n          inputId=\"trove-collateral\"\n          amount={collateral.prettify(4)}\n          maxAmount={maxCollateral.toString()}\n          maxedOut={collateralMaxedOut}\n          editingState={editingState}\n          unit=\"ETH\"\n          editedAmount={collateral.toString(4)}\n          setEditedAmount={(amount: string) => setCollateral(Decimal.from(amount))}\n        />\n\n        <EditableRow\n          label=\"Net debt\"\n          inputId=\"trove-net-debt-amount\"\n          amount={netDebt.prettify()}\n          unit={COIN}\n          editingState={editingState}\n          editedAmount={netDebt.toString(2)}\n          setEditedAmount={(amount: string) => setNetDebt(Decimal.from(amount))}\n        />\n\n        <StaticRow\n          label=\"Liquidation Reserve\"\n          inputId=\"trove-liquidation-reserve\"\n          amount={`${LUSD_LIQUIDATION_RESERVE}`}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"200px\" }}>\n                  An amount set aside to cover the liquidator’s gas costs if your Trove needs to be\n                  liquidated. The amount increases your debt and is refunded if you close your Trove\n                  by fully paying off its net debt.\n                </Card>\n              }\n            />\n          }\n        />\n\n        <StaticRow\n          label=\"Borrowing Fee\"\n          inputId=\"trove-borrowing-fee\"\n          amount={fee.prettify(2)}\n          pendingAmount={feePct.toString(2)}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                  This amount is deducted from the borrowed amount as a one-time fee. There are no\n                  recurring fees for borrowing, which is thus interest-free.\n                </Card>\n              }\n            />\n          }\n        />\n\n        <StaticRow\n          label=\"Total debt\"\n          inputId=\"trove-total-debt\"\n          amount={totalDebt.prettify(2)}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                  The total amount of LUSD your Trove will hold.{\" \"}\n                  {isDirty && (\n                    <>\n                      You will need to repay {totalDebt.sub(LUSD_LIQUIDATION_RESERVE).prettify(2)}{\" \"}\n                      LUSD to reclaim your collateral ({LUSD_LIQUIDATION_RESERVE.toString()} LUSD\n                      Liquidation Reserve excluded).\n                    </>\n                  )}\n                </Card>\n              }\n            />\n          }\n        />\n\n        <CollateralRatio value={collateralRatio} change={collateralRatioChange} />\n\n        {description ?? (\n          <ActionDescription>\n            Adjust your Trove by modifying its collateral, debt, or both.\n          </ActionDescription>\n        )}\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"cancel\" onClick={handleCancelPressed}>\n            Cancel\n          </Button>\n\n          {troveChange ? (\n            <TroveAction\n              transactionId={TRANSACTION_ID}\n              change={troveChange}\n              maxBorrowingRate={maxBorrowingRate}\n            >\n              Confirm\n            </TroveAction>\n          ) : (\n            <Button disabled>Confirm</Button>\n          )}\n        </Flex>\n      </Box>\n      {isTransactionPending && <LoadingOverlay />}\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}