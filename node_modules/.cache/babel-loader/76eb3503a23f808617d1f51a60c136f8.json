{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Percent = exports.Difference = exports.Decimal = void 0;\n\nconst assert_1 = __importDefault(require(\"assert\"));\n\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\n\nconst getDigits = numDigits => TEN.pow(numDigits);\n\nconst MAX_UINT_256 = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\nconst PRECISION = 18;\nconst ONE = bignumber_1.BigNumber.from(1);\nconst TEN = bignumber_1.BigNumber.from(10);\nconst DIGITS = getDigits(PRECISION);\nconst stringRepresentationFormat = /^[0-9]*(\\.[0-9]*)?(e[-+]?[0-9]+)?$/;\nconst trailingZeros = /0*$/;\nconst magnitudes = [\"\", \"K\", \"M\", \"B\", \"T\"];\n\nconst roundedMul = (x, y) => x.mul(y).add(Decimal.HALF.hex).div(DIGITS);\n/**\n * Fixed-point decimal bignumber with 18 digits of precision.\n *\n * @remarks\n * Used by Liquity libraries to precisely represent native currency (e.g. Ether), LUSD and LQTY\n * amounts, as well as derived metrics like collateral ratios.\n *\n * @public\n */\n\n\nclass Decimal {\n  constructor(bigNumber) {\n    if (bigNumber.isNegative()) {\n      throw new Error(\"negatives not supported by Decimal\");\n    }\n\n    this._bigNumber = bigNumber;\n  }\n  /** @internal */\n\n\n  get hex() {\n    return this._bigNumber.toHexString();\n  }\n  /** @internal */\n\n\n  get bigNumber() {\n    return this._bigNumber.toString();\n  }\n\n  static fromBigNumberString(bigNumberString) {\n    return new Decimal(bignumber_1.BigNumber.from(bigNumberString));\n  }\n\n  static _fromString(representation) {\n    if (!representation || !representation.match(stringRepresentationFormat)) {\n      throw new Error(`bad decimal format: \"${representation}\"`);\n    }\n\n    if (representation.includes(\"e\")) {\n      // eslint-disable-next-line prefer-const\n      let [coefficient, exponent] = representation.split(\"e\");\n\n      if (exponent.startsWith(\"-\")) {\n        return new Decimal(Decimal._fromString(coefficient)._bigNumber.div(TEN.pow(bignumber_1.BigNumber.from(exponent.substr(1)))));\n      }\n\n      if (exponent.startsWith(\"+\")) {\n        exponent = exponent.substr(1);\n      }\n\n      return new Decimal(Decimal._fromString(coefficient)._bigNumber.mul(TEN.pow(bignumber_1.BigNumber.from(exponent))));\n    }\n\n    if (!representation.includes(\".\")) {\n      return new Decimal(bignumber_1.BigNumber.from(representation).mul(DIGITS));\n    } // eslint-disable-next-line prefer-const\n\n\n    let [characteristic, mantissa] = representation.split(\".\");\n\n    if (mantissa.length < PRECISION) {\n      mantissa += \"0\".repeat(PRECISION - mantissa.length);\n    } else {\n      mantissa = mantissa.substr(0, PRECISION);\n    }\n\n    return new Decimal(bignumber_1.BigNumber.from(characteristic || 0).mul(DIGITS).add(mantissa));\n  }\n\n  static from(decimalish) {\n    switch (typeof decimalish) {\n      case \"object\":\n        if (decimalish instanceof Decimal) {\n          return decimalish;\n        } else {\n          throw new Error(\"invalid Decimalish value\");\n        }\n\n      case \"string\":\n        return Decimal._fromString(decimalish);\n\n      case \"number\":\n        return Decimal._fromString(decimalish.toString());\n\n      default:\n        throw new Error(\"invalid Decimalish value\");\n    }\n  }\n\n  _toStringWithAutomaticPrecision() {\n    const characteristic = this._bigNumber.div(DIGITS);\n\n    const mantissa = this._bigNumber.mod(DIGITS);\n\n    if (mantissa.isZero()) {\n      return characteristic.toString();\n    } else {\n      const paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n      const trimmedMantissa = paddedMantissa.replace(trailingZeros, \"\");\n      return characteristic.toString() + \".\" + trimmedMantissa;\n    }\n  }\n\n  _roundUp(precision) {\n    const halfDigit = getDigits(PRECISION - 1 - precision).mul(5);\n    return this._bigNumber.add(halfDigit);\n  }\n\n  _toStringWithPrecision(precision) {\n    if (precision < 0) {\n      throw new Error(\"precision must not be negative\");\n    }\n\n    const value = precision < PRECISION ? this._roundUp(precision) : this._bigNumber;\n    const characteristic = value.div(DIGITS);\n    const mantissa = value.mod(DIGITS);\n\n    if (precision === 0) {\n      return characteristic.toString();\n    } else {\n      const paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n      const trimmedMantissa = paddedMantissa.substr(0, precision);\n      return characteristic.toString() + \".\" + trimmedMantissa;\n    }\n  }\n\n  toString(precision) {\n    if (this.infinite) {\n      return \"âˆž\";\n    } else if (precision !== undefined) {\n      return this._toStringWithPrecision(precision);\n    } else {\n      return this._toStringWithAutomaticPrecision();\n    }\n  }\n\n  prettify(precision = 2) {\n    const [characteristic, mantissa] = this.toString(precision).split(\".\");\n    const prettyCharacteristic = characteristic.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n    return mantissa !== undefined ? prettyCharacteristic + \".\" + mantissa : prettyCharacteristic;\n  }\n\n  shorten() {\n    const characteristicLength = this.toString(0).length;\n    const magnitude = Math.min(Math.floor((characteristicLength - 1) / 3), magnitudes.length - 1);\n    const precision = Math.max(3 * (magnitude + 1) - characteristicLength, 0);\n    const normalized = this.div(new Decimal(getDigits(PRECISION + 3 * magnitude)));\n    return normalized.prettify(precision) + magnitudes[magnitude];\n  }\n\n  add(addend) {\n    return new Decimal(this._bigNumber.add(Decimal.from(addend)._bigNumber));\n  }\n\n  sub(subtrahend) {\n    return new Decimal(this._bigNumber.sub(Decimal.from(subtrahend)._bigNumber));\n  }\n\n  mul(multiplier) {\n    return new Decimal(this._bigNumber.mul(Decimal.from(multiplier)._bigNumber).div(DIGITS));\n  }\n\n  div(divider) {\n    divider = Decimal.from(divider);\n\n    if (divider.isZero) {\n      return Decimal.INFINITY;\n    }\n\n    return new Decimal(this._bigNumber.mul(DIGITS).div(divider._bigNumber));\n  }\n  /** @internal */\n\n\n  _divCeil(divider) {\n    divider = Decimal.from(divider);\n\n    if (divider.isZero) {\n      return Decimal.INFINITY;\n    }\n\n    return new Decimal(this._bigNumber.mul(DIGITS).add(divider._bigNumber.sub(ONE)).div(divider._bigNumber));\n  }\n\n  mulDiv(multiplier, divider) {\n    multiplier = Decimal.from(multiplier);\n    divider = Decimal.from(divider);\n\n    if (divider.isZero) {\n      return Decimal.INFINITY;\n    }\n\n    return new Decimal(this._bigNumber.mul(multiplier._bigNumber).div(divider._bigNumber));\n  }\n\n  pow(exponent) {\n    assert_1.default(Number.isInteger(exponent));\n    assert_1.default(0 <= exponent && exponent <= 0xffffffff); // Ensure we're safe to use bitwise ops\n\n    if (exponent === 0) {\n      return Decimal.ONE;\n    }\n\n    if (exponent === 1) {\n      return this;\n    }\n\n    let x = this._bigNumber;\n    let y = DIGITS;\n\n    for (; exponent > 1; exponent >>>= 1) {\n      if (exponent & 1) {\n        y = roundedMul(x, y);\n      }\n\n      x = roundedMul(x, x);\n    }\n\n    return new Decimal(roundedMul(x, y));\n  }\n\n  get isZero() {\n    return this._bigNumber.isZero();\n  }\n\n  get zero() {\n    if (this.isZero) {\n      return this;\n    }\n  }\n\n  get nonZero() {\n    if (!this.isZero) {\n      return this;\n    }\n  }\n\n  get infinite() {\n    if (this.eq(Decimal.INFINITY)) {\n      return this;\n    }\n  }\n\n  get finite() {\n    if (!this.eq(Decimal.INFINITY)) {\n      return this;\n    }\n  }\n  /** @internal */\n\n\n  get absoluteValue() {\n    return this;\n  }\n\n  lt(that) {\n    return this._bigNumber.lt(Decimal.from(that)._bigNumber);\n  }\n\n  eq(that) {\n    return this._bigNumber.eq(Decimal.from(that)._bigNumber);\n  }\n\n  gt(that) {\n    return this._bigNumber.gt(Decimal.from(that)._bigNumber);\n  }\n\n  gte(that) {\n    return this._bigNumber.gte(Decimal.from(that)._bigNumber);\n  }\n\n  lte(that) {\n    return this._bigNumber.lte(Decimal.from(that)._bigNumber);\n  }\n\n  static min(a, b) {\n    a = Decimal.from(a);\n    b = Decimal.from(b);\n    return a.lt(b) ? a : b;\n  }\n\n  static max(a, b) {\n    a = Decimal.from(a);\n    b = Decimal.from(b);\n    return a.gt(b) ? a : b;\n  }\n\n}\n\nexports.Decimal = Decimal;\nDecimal.INFINITY = Decimal.fromBigNumberString(MAX_UINT_256);\nDecimal.ZERO = Decimal.from(0);\nDecimal.HALF = Decimal.from(0.5);\nDecimal.ONE = Decimal.from(1);\n/** @alpha */\n\nclass Difference {\n  constructor(number) {\n    this._number = number;\n  }\n\n  static between(d1, d2) {\n    if (d1 === undefined || d2 === undefined) {\n      return new Difference(undefined);\n    }\n\n    d1 = Decimal.from(d1);\n    d2 = Decimal.from(d2);\n\n    if (d1.infinite && d2.infinite) {\n      return new Difference(undefined);\n    } else if (d1.infinite) {\n      return new Difference({\n        sign: \"+\",\n        absoluteValue: d1\n      });\n    } else if (d2.infinite) {\n      return new Difference({\n        sign: \"-\",\n        absoluteValue: d2\n      });\n    } else if (d1.gt(d2)) {\n      return new Difference({\n        sign: \"+\",\n        absoluteValue: Decimal.from(d1).sub(d2)\n      });\n    } else if (d2.gt(d1)) {\n      return new Difference({\n        sign: \"-\",\n        absoluteValue: Decimal.from(d2).sub(d1)\n      });\n    } else {\n      return new Difference({\n        sign: \"\",\n        absoluteValue: Decimal.ZERO\n      });\n    }\n  }\n\n  toString(precision) {\n    if (!this._number) {\n      return \"N/A\";\n    }\n\n    return this._number.sign + this._number.absoluteValue.toString(precision);\n  }\n\n  prettify(precision) {\n    if (!this._number) {\n      return this.toString();\n    }\n\n    return this._number.sign + this._number.absoluteValue.prettify(precision);\n  }\n\n  mul(multiplier) {\n    return new Difference(this._number && {\n      sign: this._number.sign,\n      absoluteValue: this._number.absoluteValue.mul(multiplier)\n    });\n  }\n\n  get nonZero() {\n    var _a;\n\n    return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.nonZero) && this;\n  }\n\n  get positive() {\n    var _a;\n\n    return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.sign) === \"+\" ? this : undefined;\n  }\n\n  get negative() {\n    var _a;\n\n    return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.sign) === \"-\" ? this : undefined;\n  }\n\n  get absoluteValue() {\n    var _a;\n\n    return (_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue;\n  }\n\n  get infinite() {\n    var _a;\n\n    return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.infinite) && this;\n  }\n\n  get finite() {\n    var _a;\n\n    return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.finite) && this;\n  }\n\n}\n\nexports.Difference = Difference;\n/** @alpha */\n\nclass Percent {\n  constructor(ratio) {\n    this._percent = ratio.infinite || ratio.mul && ratio.mul(100) || ratio;\n  }\n\n  nonZeroish(precision) {\n    var _a;\n\n    const zeroish = `0.${\"0\".repeat(precision)}5`;\n\n    if ((_a = this._percent.absoluteValue) === null || _a === void 0 ? void 0 : _a.gte(zeroish)) {\n      return this;\n    }\n  }\n\n  toString(precision) {\n    return this._percent.toString(precision) + (this._percent.absoluteValue && !this._percent.infinite ? \"%\" : \"\");\n  }\n\n  prettify() {\n    var _a, _b;\n\n    if ((_a = this._percent.absoluteValue) === null || _a === void 0 ? void 0 : _a.gte(\"1000\")) {\n      return this.toString(0);\n    } else if ((_b = this._percent.absoluteValue) === null || _b === void 0 ? void 0 : _b.gte(\"10\")) {\n      return this.toString(1);\n    } else {\n      return this.toString(2);\n    }\n  }\n\n}\n\nexports.Percent = Percent;","map":{"version":3,"sources":["../../src/Decimal.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Percent = exports.Difference = exports.Decimal = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\nconst getDigits = (numDigits) => TEN.pow(numDigits);\nconst MAX_UINT_256 = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\nconst PRECISION = 18;\nconst ONE = bignumber_1.BigNumber.from(1);\nconst TEN = bignumber_1.BigNumber.from(10);\nconst DIGITS = getDigits(PRECISION);\nconst stringRepresentationFormat = /^[0-9]*(\\.[0-9]*)?(e[-+]?[0-9]+)?$/;\nconst trailingZeros = /0*$/;\nconst magnitudes = [\"\", \"K\", \"M\", \"B\", \"T\"];\nconst roundedMul = (x, y) => x.mul(y).add(Decimal.HALF.hex).div(DIGITS);\n/**\n * Fixed-point decimal bignumber with 18 digits of precision.\n *\n * @remarks\n * Used by Liquity libraries to precisely represent native currency (e.g. Ether), LUSD and LQTY\n * amounts, as well as derived metrics like collateral ratios.\n *\n * @public\n */\nclass Decimal {\n    constructor(bigNumber) {\n        if (bigNumber.isNegative()) {\n            throw new Error(\"negatives not supported by Decimal\");\n        }\n        this._bigNumber = bigNumber;\n    }\n    /** @internal */\n    get hex() {\n        return this._bigNumber.toHexString();\n    }\n    /** @internal */\n    get bigNumber() {\n        return this._bigNumber.toString();\n    }\n    static fromBigNumberString(bigNumberString) {\n        return new Decimal(bignumber_1.BigNumber.from(bigNumberString));\n    }\n    static _fromString(representation) {\n        if (!representation || !representation.match(stringRepresentationFormat)) {\n            throw new Error(`bad decimal format: \"${representation}\"`);\n        }\n        if (representation.includes(\"e\")) {\n            // eslint-disable-next-line prefer-const\n            let [coefficient, exponent] = representation.split(\"e\");\n            if (exponent.startsWith(\"-\")) {\n                return new Decimal(Decimal._fromString(coefficient)._bigNumber.div(TEN.pow(bignumber_1.BigNumber.from(exponent.substr(1)))));\n            }\n            if (exponent.startsWith(\"+\")) {\n                exponent = exponent.substr(1);\n            }\n            return new Decimal(Decimal._fromString(coefficient)._bigNumber.mul(TEN.pow(bignumber_1.BigNumber.from(exponent))));\n        }\n        if (!representation.includes(\".\")) {\n            return new Decimal(bignumber_1.BigNumber.from(representation).mul(DIGITS));\n        }\n        // eslint-disable-next-line prefer-const\n        let [characteristic, mantissa] = representation.split(\".\");\n        if (mantissa.length < PRECISION) {\n            mantissa += \"0\".repeat(PRECISION - mantissa.length);\n        }\n        else {\n            mantissa = mantissa.substr(0, PRECISION);\n        }\n        return new Decimal(bignumber_1.BigNumber.from(characteristic || 0)\n            .mul(DIGITS)\n            .add(mantissa));\n    }\n    static from(decimalish) {\n        switch (typeof decimalish) {\n            case \"object\":\n                if (decimalish instanceof Decimal) {\n                    return decimalish;\n                }\n                else {\n                    throw new Error(\"invalid Decimalish value\");\n                }\n            case \"string\":\n                return Decimal._fromString(decimalish);\n            case \"number\":\n                return Decimal._fromString(decimalish.toString());\n            default:\n                throw new Error(\"invalid Decimalish value\");\n        }\n    }\n    _toStringWithAutomaticPrecision() {\n        const characteristic = this._bigNumber.div(DIGITS);\n        const mantissa = this._bigNumber.mod(DIGITS);\n        if (mantissa.isZero()) {\n            return characteristic.toString();\n        }\n        else {\n            const paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n            const trimmedMantissa = paddedMantissa.replace(trailingZeros, \"\");\n            return characteristic.toString() + \".\" + trimmedMantissa;\n        }\n    }\n    _roundUp(precision) {\n        const halfDigit = getDigits(PRECISION - 1 - precision).mul(5);\n        return this._bigNumber.add(halfDigit);\n    }\n    _toStringWithPrecision(precision) {\n        if (precision < 0) {\n            throw new Error(\"precision must not be negative\");\n        }\n        const value = precision < PRECISION ? this._roundUp(precision) : this._bigNumber;\n        const characteristic = value.div(DIGITS);\n        const mantissa = value.mod(DIGITS);\n        if (precision === 0) {\n            return characteristic.toString();\n        }\n        else {\n            const paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n            const trimmedMantissa = paddedMantissa.substr(0, precision);\n            return characteristic.toString() + \".\" + trimmedMantissa;\n        }\n    }\n    toString(precision) {\n        if (this.infinite) {\n            return \"âˆž\";\n        }\n        else if (precision !== undefined) {\n            return this._toStringWithPrecision(precision);\n        }\n        else {\n            return this._toStringWithAutomaticPrecision();\n        }\n    }\n    prettify(precision = 2) {\n        const [characteristic, mantissa] = this.toString(precision).split(\".\");\n        const prettyCharacteristic = characteristic.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n        return mantissa !== undefined ? prettyCharacteristic + \".\" + mantissa : prettyCharacteristic;\n    }\n    shorten() {\n        const characteristicLength = this.toString(0).length;\n        const magnitude = Math.min(Math.floor((characteristicLength - 1) / 3), magnitudes.length - 1);\n        const precision = Math.max(3 * (magnitude + 1) - characteristicLength, 0);\n        const normalized = this.div(new Decimal(getDigits(PRECISION + 3 * magnitude)));\n        return normalized.prettify(precision) + magnitudes[magnitude];\n    }\n    add(addend) {\n        return new Decimal(this._bigNumber.add(Decimal.from(addend)._bigNumber));\n    }\n    sub(subtrahend) {\n        return new Decimal(this._bigNumber.sub(Decimal.from(subtrahend)._bigNumber));\n    }\n    mul(multiplier) {\n        return new Decimal(this._bigNumber.mul(Decimal.from(multiplier)._bigNumber).div(DIGITS));\n    }\n    div(divider) {\n        divider = Decimal.from(divider);\n        if (divider.isZero) {\n            return Decimal.INFINITY;\n        }\n        return new Decimal(this._bigNumber.mul(DIGITS).div(divider._bigNumber));\n    }\n    /** @internal */\n    _divCeil(divider) {\n        divider = Decimal.from(divider);\n        if (divider.isZero) {\n            return Decimal.INFINITY;\n        }\n        return new Decimal(this._bigNumber.mul(DIGITS).add(divider._bigNumber.sub(ONE)).div(divider._bigNumber));\n    }\n    mulDiv(multiplier, divider) {\n        multiplier = Decimal.from(multiplier);\n        divider = Decimal.from(divider);\n        if (divider.isZero) {\n            return Decimal.INFINITY;\n        }\n        return new Decimal(this._bigNumber.mul(multiplier._bigNumber).div(divider._bigNumber));\n    }\n    pow(exponent) {\n        assert_1.default(Number.isInteger(exponent));\n        assert_1.default(0 <= exponent && exponent <= 0xffffffff); // Ensure we're safe to use bitwise ops\n        if (exponent === 0) {\n            return Decimal.ONE;\n        }\n        if (exponent === 1) {\n            return this;\n        }\n        let x = this._bigNumber;\n        let y = DIGITS;\n        for (; exponent > 1; exponent >>>= 1) {\n            if (exponent & 1) {\n                y = roundedMul(x, y);\n            }\n            x = roundedMul(x, x);\n        }\n        return new Decimal(roundedMul(x, y));\n    }\n    get isZero() {\n        return this._bigNumber.isZero();\n    }\n    get zero() {\n        if (this.isZero) {\n            return this;\n        }\n    }\n    get nonZero() {\n        if (!this.isZero) {\n            return this;\n        }\n    }\n    get infinite() {\n        if (this.eq(Decimal.INFINITY)) {\n            return this;\n        }\n    }\n    get finite() {\n        if (!this.eq(Decimal.INFINITY)) {\n            return this;\n        }\n    }\n    /** @internal */\n    get absoluteValue() {\n        return this;\n    }\n    lt(that) {\n        return this._bigNumber.lt(Decimal.from(that)._bigNumber);\n    }\n    eq(that) {\n        return this._bigNumber.eq(Decimal.from(that)._bigNumber);\n    }\n    gt(that) {\n        return this._bigNumber.gt(Decimal.from(that)._bigNumber);\n    }\n    gte(that) {\n        return this._bigNumber.gte(Decimal.from(that)._bigNumber);\n    }\n    lte(that) {\n        return this._bigNumber.lte(Decimal.from(that)._bigNumber);\n    }\n    static min(a, b) {\n        a = Decimal.from(a);\n        b = Decimal.from(b);\n        return a.lt(b) ? a : b;\n    }\n    static max(a, b) {\n        a = Decimal.from(a);\n        b = Decimal.from(b);\n        return a.gt(b) ? a : b;\n    }\n}\nexports.Decimal = Decimal;\nDecimal.INFINITY = Decimal.fromBigNumberString(MAX_UINT_256);\nDecimal.ZERO = Decimal.from(0);\nDecimal.HALF = Decimal.from(0.5);\nDecimal.ONE = Decimal.from(1);\n/** @alpha */\nclass Difference {\n    constructor(number) {\n        this._number = number;\n    }\n    static between(d1, d2) {\n        if (d1 === undefined || d2 === undefined) {\n            return new Difference(undefined);\n        }\n        d1 = Decimal.from(d1);\n        d2 = Decimal.from(d2);\n        if (d1.infinite && d2.infinite) {\n            return new Difference(undefined);\n        }\n        else if (d1.infinite) {\n            return new Difference({ sign: \"+\", absoluteValue: d1 });\n        }\n        else if (d2.infinite) {\n            return new Difference({ sign: \"-\", absoluteValue: d2 });\n        }\n        else if (d1.gt(d2)) {\n            return new Difference({ sign: \"+\", absoluteValue: Decimal.from(d1).sub(d2) });\n        }\n        else if (d2.gt(d1)) {\n            return new Difference({ sign: \"-\", absoluteValue: Decimal.from(d2).sub(d1) });\n        }\n        else {\n            return new Difference({ sign: \"\", absoluteValue: Decimal.ZERO });\n        }\n    }\n    toString(precision) {\n        if (!this._number) {\n            return \"N/A\";\n        }\n        return this._number.sign + this._number.absoluteValue.toString(precision);\n    }\n    prettify(precision) {\n        if (!this._number) {\n            return this.toString();\n        }\n        return this._number.sign + this._number.absoluteValue.prettify(precision);\n    }\n    mul(multiplier) {\n        return new Difference(this._number && {\n            sign: this._number.sign,\n            absoluteValue: this._number.absoluteValue.mul(multiplier)\n        });\n    }\n    get nonZero() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.nonZero) && this;\n    }\n    get positive() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.sign) === \"+\" ? this : undefined;\n    }\n    get negative() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.sign) === \"-\" ? this : undefined;\n    }\n    get absoluteValue() {\n        var _a;\n        return (_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue;\n    }\n    get infinite() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.infinite) && this;\n    }\n    get finite() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.finite) && this;\n    }\n}\nexports.Difference = Difference;\n/** @alpha */\nclass Percent {\n    constructor(ratio) {\n        this._percent = ratio.infinite || (ratio.mul && ratio.mul(100)) || ratio;\n    }\n    nonZeroish(precision) {\n        var _a;\n        const zeroish = `0.${\"0\".repeat(precision)}5`;\n        if ((_a = this._percent.absoluteValue) === null || _a === void 0 ? void 0 : _a.gte(zeroish)) {\n            return this;\n        }\n    }\n    toString(precision) {\n        return (this._percent.toString(precision) +\n            (this._percent.absoluteValue && !this._percent.infinite ? \"%\" : \"\"));\n    }\n    prettify() {\n        var _a, _b;\n        if ((_a = this._percent.absoluteValue) === null || _a === void 0 ? void 0 : _a.gte(\"1000\")) {\n            return this.toString(0);\n        }\n        else if ((_b = this._percent.absoluteValue) === null || _b === void 0 ? void 0 : _b.gte(\"10\")) {\n            return this.toString(1);\n        }\n        else {\n            return this.toString(2);\n        }\n    }\n}\nexports.Percent = Percent;\n//# sourceMappingURL=Decimal.js.map"]},"metadata":{},"sourceType":"script"}