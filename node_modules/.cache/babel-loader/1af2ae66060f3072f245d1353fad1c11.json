{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Stability/Yield.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Paragraph, Text } from \"theme-ui\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { InfoIcon } from \"../InfoIcon\";\nimport { useLiquity } from \"../../hooks/LiquityContext\";\nimport { Badge } from \"../Badge\";\nimport { fetchLqtyPrice } from \"./context/fetchLqtyPrice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst selector = ({\n  lusdInStabilityPool,\n  remainingStabilityPoolLQTYReward\n}) => ({\n  lusdInStabilityPool,\n  remainingStabilityPoolLQTYReward\n});\n\nexport const Yield = () => {\n  _s();\n\n  const {\n    liquity: {\n      connection: {\n        addresses\n      }\n    }\n  } = useLiquity();\n  const {\n    lusdInStabilityPool,\n    remainingStabilityPoolLQTYReward\n  } = useLiquitySelector(selector);\n  const [lqtyPrice, setLqtyPrice] = useState(undefined);\n  const hasZeroValue = remainingStabilityPoolLQTYReward.isZero || lusdInStabilityPool.isZero;\n  const lqtyTokenAddress = addresses[\"lqtyToken\"];\n  useEffect(() => {\n    (async () => {\n      try {\n        const {\n          lqtyPriceUSD\n        } = await fetchLqtyPrice(lqtyTokenAddress);\n        setLqtyPrice(lqtyPriceUSD);\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }, [lqtyTokenAddress]);\n  if (hasZeroValue || lqtyPrice === undefined) return null;\n  const yearlyHalvingSchedule = 0.5; // 50% see LQTY distribution schedule for more info\n\n  const remainingLqtyOneYear = remainingStabilityPoolLQTYReward.mul(yearlyHalvingSchedule);\n  const remainingLqtyOneYearInUSD = remainingLqtyOneYear.mul(lqtyPrice);\n  const aprPercentage = remainingLqtyOneYearInUSD.div(lusdInStabilityPool).mul(100);\n  const remainingLqtyInUSD = remainingStabilityPoolLQTYReward.mul(lqtyPrice);\n  if (aprPercentage.isZero) return null;\n  return /*#__PURE__*/_jsxDEV(Badge, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      children: [\"LQTY APR \", aprPercentage.toString(2), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoIcon, {\n      tooltip: /*#__PURE__*/_jsxDEV(Card, {\n        variant: \"tooltip\",\n        sx: {\n          width: [\"220px\", \"518px\"]\n        },\n        children: [/*#__PURE__*/_jsxDEV(Paragraph, {\n          children: [\"An \", /*#__PURE__*/_jsxDEV(Text, {\n            sx: {\n              fontWeight: \"bold\"\n            },\n            children: \"estimate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 18\n          }, this), \" of the LQTY return on the LUSD deposited to the Stability Pool over the next year, not including your ETH gains from liquidations.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n          sx: {\n            fontSize: \"12px\",\n            fontFamily: \"monospace\",\n            mt: 2\n          },\n          children: [\"(($LQTY_REWARDS * YEARLY_DISTRIBUTION%) / DEPOSITED_LUSD) * 100 =\", \" \", /*#__PURE__*/_jsxDEV(Text, {\n            sx: {\n              fontWeight: \"bold\"\n            },\n            children: \" APR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n          sx: {\n            fontSize: \"12px\",\n            fontFamily: \"monospace\"\n          },\n          children: [\"($\", remainingLqtyInUSD.shorten(), \" * 50% / $\", lusdInStabilityPool.shorten(), \") * 100 =\", /*#__PURE__*/_jsxDEV(Text, {\n            sx: {\n              fontWeight: \"bold\"\n            },\n            children: [\" \", aprPercentage.toString(2), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Yield, \"6Y+im8gOSx57sZeysRJa8sIGp9o=\", false, function () {\n  return [useLiquity, useLiquitySelector];\n});\n\n_c = Yield;\n\nvar _c;\n\n$RefreshReg$(_c, \"Yield\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Stability/Yield.tsx"],"names":["React","useEffect","useState","Card","Paragraph","Text","useLiquitySelector","InfoIcon","useLiquity","Badge","fetchLqtyPrice","selector","lusdInStabilityPool","remainingStabilityPoolLQTYReward","Yield","liquity","connection","addresses","lqtyPrice","setLqtyPrice","undefined","hasZeroValue","isZero","lqtyTokenAddress","lqtyPriceUSD","error","console","yearlyHalvingSchedule","remainingLqtyOneYear","mul","remainingLqtyOneYearInUSD","aprPercentage","div","remainingLqtyInUSD","toString","width","fontWeight","fontSize","fontFamily","mt","shorten"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Card, Paragraph, Text } from \"theme-ui\";\nimport { Decimal, LiquityStoreState } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { InfoIcon } from \"../InfoIcon\";\nimport { useLiquity } from \"../../hooks/LiquityContext\";\nimport { Badge } from \"../Badge\";\nimport { fetchLqtyPrice } from \"./context/fetchLqtyPrice\";\n\nconst selector = ({ lusdInStabilityPool, remainingStabilityPoolLQTYReward }: LiquityStoreState) => ({\n  lusdInStabilityPool,\n  remainingStabilityPoolLQTYReward\n});\n\nexport const Yield: React.FC = () => {\n  const {\n    liquity: {\n      connection: { addresses }\n    }\n  } = useLiquity();\n  const { lusdInStabilityPool, remainingStabilityPoolLQTYReward } = useLiquitySelector(selector);\n\n  const [lqtyPrice, setLqtyPrice] = useState<Decimal | undefined>(undefined);\n  const hasZeroValue = remainingStabilityPoolLQTYReward.isZero || lusdInStabilityPool.isZero;\n  const lqtyTokenAddress = addresses[\"lqtyToken\"];\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { lqtyPriceUSD } = await fetchLqtyPrice(lqtyTokenAddress);\n        setLqtyPrice(lqtyPriceUSD);\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }, [lqtyTokenAddress]);\n\n  if (hasZeroValue || lqtyPrice === undefined) return null;\n\n  const yearlyHalvingSchedule = 0.5; // 50% see LQTY distribution schedule for more info\n  const remainingLqtyOneYear = remainingStabilityPoolLQTYReward.mul(yearlyHalvingSchedule);\n  const remainingLqtyOneYearInUSD = remainingLqtyOneYear.mul(lqtyPrice);\n  const aprPercentage = remainingLqtyOneYearInUSD.div(lusdInStabilityPool).mul(100);\n  const remainingLqtyInUSD = remainingStabilityPoolLQTYReward.mul(lqtyPrice);\n\n  if (aprPercentage.isZero) return null;\n\n  return (\n    <Badge>\n      <Text>LQTY APR {aprPercentage.toString(2)}%</Text>\n      <InfoIcon\n        tooltip={\n          <Card variant=\"tooltip\" sx={{ width: [\"220px\", \"518px\"] }}>\n            <Paragraph>\n              An <Text sx={{ fontWeight: \"bold\" }}>estimate</Text> of the LQTY return on the LUSD\n              deposited to the Stability Pool over the next year, not including your ETH gains from\n              liquidations.\n            </Paragraph>\n            <Paragraph sx={{ fontSize: \"12px\", fontFamily: \"monospace\", mt: 2 }}>\n              (($LQTY_REWARDS * YEARLY_DISTRIBUTION%) / DEPOSITED_LUSD) * 100 ={\" \"}\n              <Text sx={{ fontWeight: \"bold\" }}> APR</Text>\n            </Paragraph>\n            <Paragraph sx={{ fontSize: \"12px\", fontFamily: \"monospace\" }}>\n              ($\n              {remainingLqtyInUSD.shorten()} * 50% / ${lusdInStabilityPool.shorten()}) * 100 =\n              <Text sx={{ fontWeight: \"bold\" }}> {aprPercentage.toString(2)}%</Text>\n            </Paragraph>\n          </Card>\n        }\n      ></InfoIcon>\n    </Badge>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}