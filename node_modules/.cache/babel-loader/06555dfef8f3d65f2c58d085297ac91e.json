{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/views/Adjusting/Adjusting.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\nimport { Heading, Box, Flex, Card, Button } from \"theme-ui\";\nimport { Decimal, Difference } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { LP, GT } from \"../../../../strings\";\nimport { Icon } from \"../../../Icon\";\nimport { EditableRow, StaticRow } from \"../../../Trove/Editor\";\nimport { LoadingOverlay } from \"../../../LoadingOverlay\";\nimport { useFarmView } from \"../../context/FarmViewContext\";\nimport { useMyTransactionState } from \"../../../Transaction\";\nimport { Confirm } from \"../Confirm\";\nimport { Description } from \"../Description\";\nimport { Approve } from \"../Approve\";\nimport { Validation } from \"../Validation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst selector = ({\n  liquidityMiningStake,\n  liquidityMiningLQTYReward,\n  uniTokenBalance,\n  totalStakedUniTokens\n}) => ({\n  liquidityMiningStake,\n  liquidityMiningLQTYReward,\n  uniTokenBalance,\n  totalStakedUniTokens\n});\n\nconst transactionId = /farm-/;\nexport const Adjusting = () => {\n  _s();\n\n  const {\n    dispatchEvent\n  } = useFarmView();\n  const {\n    liquidityMiningStake,\n    liquidityMiningLQTYReward,\n    uniTokenBalance,\n    totalStakedUniTokens\n  } = useLiquitySelector(selector);\n  const [amount, setAmount] = useState(liquidityMiningStake);\n  const editingState = useState();\n  const transactionState = useMyTransactionState(transactionId);\n  const isTransactionPending = transactionState.type === \"waitingForApproval\" || transactionState.type === \"waitingForConfirmation\";\n  const isDirty = !amount.eq(liquidityMiningStake);\n  const maximumAmount = liquidityMiningStake.add(uniTokenBalance);\n  const hasSetMaximumAmount = amount.eq(maximumAmount);\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_PRESSED\");\n  }, [dispatchEvent]);\n  const nextTotalStakedUniTokens = isDirty ? totalStakedUniTokens.sub(liquidityMiningStake).add(amount) : totalStakedUniTokens;\n  const originalPoolShare = liquidityMiningStake.mulDiv(100, totalStakedUniTokens);\n  const poolShare = amount.mulDiv(100, nextTotalStakedUniTokens);\n  const poolShareChange = liquidityMiningStake.nonZero && Difference.between(poolShare, originalPoolShare).nonZero;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      children: [\"Uniswap Liquidity Farm\", isDirty && !isTransactionPending && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"titleIcon\",\n        sx: {\n          \":enabled:hover\": {\n            color: \"danger\"\n          }\n        },\n        onClick: () => setAmount(liquidityMiningStake),\n        children: /*#__PURE__*/_jsxDEV(Icon, {\n          name: \"history\",\n          size: \"lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: [2, 3]\n      },\n      children: [/*#__PURE__*/_jsxDEV(EditableRow, {\n        label: \"Stake\",\n        inputId: \"farm-stake-amount\",\n        amount: isDirty ? amount.prettify(4) : liquidityMiningStake.prettify(4),\n        unit: LP,\n        editingState: editingState,\n        editedAmount: amount.toString(4),\n        setEditedAmount: amount => setAmount(Decimal.from(amount)),\n        maxAmount: maximumAmount.toString(),\n        maxedOut: hasSetMaximumAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), poolShare.infinite ? /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Pool share\",\n        inputId: \"farm-share\",\n        amount: \"N/A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Pool share\",\n        inputId: \"farm-share\",\n        amount: poolShare.prettify(4),\n        unit: \"%\",\n        pendingAmount: poolShareChange === null || poolShareChange === void 0 ? void 0 : poolShareChange.prettify(4).concat(\"%\"),\n        pendingColor: (poolShareChange === null || poolShareChange === void 0 ? void 0 : poolShareChange.positive) ? \"success\" : \"danger\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Reward\",\n        inputId: \"farm-reward-amount\",\n        amount: liquidityMiningLQTYReward.prettify(4),\n        color: liquidityMiningLQTYReward.nonZero && \"success\",\n        unit: GT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), isDirty && /*#__PURE__*/_jsxDEV(Validation, {\n        amount: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this), isDirty && /*#__PURE__*/_jsxDEV(Description, {\n        amount: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        variant: \"layout.actions\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"cancel\",\n          onClick: handleCancelPressed,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Approve, {\n          amount: amount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Confirm, {\n          amount: amount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), isTransactionPending && /*#__PURE__*/_jsxDEV(LoadingOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Adjusting, \"1mRRjW2yl19eyo9vXBTeMjBLVGc=\", false, function () {\n  return [useFarmView, useLiquitySelector, useMyTransactionState];\n});\n\n_c = Adjusting;\n\nvar _c;\n\n$RefreshReg$(_c, \"Adjusting\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/views/Adjusting/Adjusting.tsx"],"names":["React","useCallback","useState","Heading","Box","Flex","Card","Button","Decimal","Difference","useLiquitySelector","LP","GT","Icon","EditableRow","StaticRow","LoadingOverlay","useFarmView","useMyTransactionState","Confirm","Description","Approve","Validation","selector","liquidityMiningStake","liquidityMiningLQTYReward","uniTokenBalance","totalStakedUniTokens","transactionId","Adjusting","dispatchEvent","amount","setAmount","editingState","transactionState","isTransactionPending","type","isDirty","eq","maximumAmount","add","hasSetMaximumAmount","handleCancelPressed","nextTotalStakedUniTokens","sub","originalPoolShare","mulDiv","poolShare","poolShareChange","nonZero","between","color","p","prettify","toString","from","infinite","concat","positive"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport { Heading, Box, Flex, Card, Button } from \"theme-ui\";\nimport { Decimal, Difference, LiquityStoreState } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\n\nimport { LP, GT } from \"../../../../strings\";\nimport { Icon } from \"../../../Icon\";\nimport { EditableRow, StaticRow } from \"../../../Trove/Editor\";\nimport { LoadingOverlay } from \"../../../LoadingOverlay\";\nimport { useFarmView } from \"../../context/FarmViewContext\";\nimport { useMyTransactionState } from \"../../../Transaction\";\nimport { Confirm } from \"../Confirm\";\nimport { Description } from \"../Description\";\nimport { Approve } from \"../Approve\";\nimport { Validation } from \"../Validation\";\n\nconst selector = ({\n  liquidityMiningStake,\n  liquidityMiningLQTYReward,\n  uniTokenBalance,\n  totalStakedUniTokens\n}: LiquityStoreState) => ({\n  liquidityMiningStake,\n  liquidityMiningLQTYReward,\n  uniTokenBalance,\n  totalStakedUniTokens\n});\n\nconst transactionId = /farm-/;\n\nexport const Adjusting: React.FC = () => {\n  const { dispatchEvent } = useFarmView();\n  const {\n    liquidityMiningStake,\n    liquidityMiningLQTYReward,\n    uniTokenBalance,\n    totalStakedUniTokens\n  } = useLiquitySelector(selector);\n  const [amount, setAmount] = useState<Decimal>(liquidityMiningStake);\n  const editingState = useState<string>();\n\n  const transactionState = useMyTransactionState(transactionId);\n  const isTransactionPending =\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\";\n  const isDirty = !amount.eq(liquidityMiningStake);\n  const maximumAmount = liquidityMiningStake.add(uniTokenBalance);\n  const hasSetMaximumAmount = amount.eq(maximumAmount);\n\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_PRESSED\");\n  }, [dispatchEvent]);\n\n  const nextTotalStakedUniTokens = isDirty\n    ? totalStakedUniTokens.sub(liquidityMiningStake).add(amount)\n    : totalStakedUniTokens;\n\n  const originalPoolShare = liquidityMiningStake.mulDiv(100, totalStakedUniTokens);\n  const poolShare = amount.mulDiv(100, nextTotalStakedUniTokens);\n\n  const poolShareChange =\n    liquidityMiningStake.nonZero && Difference.between(poolShare, originalPoolShare).nonZero;\n\n  return (\n    <Card>\n      <Heading>\n        Uniswap Liquidity Farm\n        {isDirty && !isTransactionPending && (\n          <Button\n            variant=\"titleIcon\"\n            sx={{ \":enabled:hover\": { color: \"danger\" } }}\n            onClick={() => setAmount(liquidityMiningStake)}\n          >\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Stake\"\n          inputId=\"farm-stake-amount\"\n          amount={isDirty ? amount.prettify(4) : liquidityMiningStake.prettify(4)}\n          unit={LP}\n          editingState={editingState}\n          editedAmount={amount.toString(4)}\n          setEditedAmount={amount => setAmount(Decimal.from(amount))}\n          maxAmount={maximumAmount.toString()}\n          maxedOut={hasSetMaximumAmount}\n        ></EditableRow>\n\n        {poolShare.infinite ? (\n          <StaticRow label=\"Pool share\" inputId=\"farm-share\" amount=\"N/A\" />\n        ) : (\n          <StaticRow\n            label=\"Pool share\"\n            inputId=\"farm-share\"\n            amount={poolShare.prettify(4)}\n            unit=\"%\"\n            pendingAmount={poolShareChange?.prettify(4).concat(\"%\")}\n            pendingColor={poolShareChange?.positive ? \"success\" : \"danger\"}\n          />\n        )}\n\n        <StaticRow\n          label=\"Reward\"\n          inputId=\"farm-reward-amount\"\n          amount={liquidityMiningLQTYReward.prettify(4)}\n          color={liquidityMiningLQTYReward.nonZero && \"success\"}\n          unit={GT}\n        />\n\n        {isDirty && <Validation amount={amount} />}\n        {isDirty && <Description amount={amount} />}\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"cancel\" onClick={handleCancelPressed}>\n            Cancel\n          </Button>\n          <Approve amount={amount} />\n          <Confirm amount={amount} />\n        </Flex>\n      </Box>\n      {isTransactionPending && <LoadingOverlay />}\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}