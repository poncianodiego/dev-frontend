{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/context/TroveViewProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { TroveViewContext } from \"./TroveViewContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst transitions = {\n  NONE: {\n    OPEN_TROVE_PRESSED: \"OPENING\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  LIQUIDATED: {\n    OPEN_TROVE_PRESSED: \"OPENING\",\n    TROVE_SURPLUS_COLLATERAL_CLAIMED: \"NONE\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  REDEEMED: {\n    OPEN_TROVE_PRESSED: \"OPENING\",\n    TROVE_SURPLUS_COLLATERAL_CLAIMED: \"NONE\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  OPENING: {\n    CANCEL_ADJUST_TROVE_PRESSED: \"NONE\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  ADJUSTING: {\n    CANCEL_ADJUST_TROVE_PRESSED: \"ACTIVE\",\n    TROVE_ADJUSTED: \"ACTIVE\",\n    TROVE_CLOSED: \"NONE\",\n    TROVE_LIQUIDATED: \"LIQUIDATED\",\n    TROVE_REDEEMED: \"REDEEMED\"\n  },\n  CLOSING: {\n    CANCEL_ADJUST_TROVE_PRESSED: \"ACTIVE\",\n    TROVE_CLOSED: \"NONE\",\n    TROVE_ADJUSTED: \"ACTIVE\",\n    TROVE_LIQUIDATED: \"LIQUIDATED\",\n    TROVE_REDEEMED: \"REDEEMED\"\n  },\n  ACTIVE: {\n    ADJUST_TROVE_PRESSED: \"ADJUSTING\",\n    CLOSE_TROVE_PRESSED: \"CLOSING\",\n    TROVE_CLOSED: \"NONE\",\n    TROVE_LIQUIDATED: \"LIQUIDATED\",\n    TROVE_REDEEMED: \"REDEEMED\"\n  }\n};\nconst troveStatusEvents = {\n  open: \"TROVE_OPENED\",\n  closedByOwner: \"TROVE_CLOSED\",\n  closedByLiquidation: \"TROVE_LIQUIDATED\",\n  closedByRedemption: \"TROVE_REDEEMED\"\n};\n\nconst transition = (view, event) => {\n  var _transitions$view$eve;\n\n  const nextView = (_transitions$view$eve = transitions[view][event]) !== null && _transitions$view$eve !== void 0 ? _transitions$view$eve : view;\n  return nextView;\n};\n\nconst getInitialView = troveStatus => {\n  if (troveStatus === \"closedByLiquidation\") {\n    return \"LIQUIDATED\";\n  }\n\n  if (troveStatus === \"closedByRedemption\") {\n    return \"REDEEMED\";\n  }\n\n  if (troveStatus === \"open\") {\n    return \"ACTIVE\";\n  }\n\n  return \"NONE\";\n};\n\nconst select = ({\n  trove: {\n    status\n  }\n}) => status;\n\nexport const TroveViewProvider = props => {\n  _s();\n\n  const {\n    children\n  } = props;\n  const troveStatus = useLiquitySelector(select);\n  const [view, setView] = useState(getInitialView(troveStatus));\n  const viewRef = useRef(view);\n  const dispatchEvent = useCallback(event => {\n    const nextView = transition(viewRef.current, event);\n    console.log(\"dispatchEvent() [current-view, event, next-view]\", viewRef.current, event, nextView);\n    setView(nextView);\n  }, []);\n  useEffect(() => {\n    viewRef.current = view;\n  }, [view]);\n  useEffect(() => {\n    var _troveStatusEvents$tr;\n\n    const event = (_troveStatusEvents$tr = troveStatusEvents[troveStatus]) !== null && _troveStatusEvents$tr !== void 0 ? _troveStatusEvents$tr : null;\n\n    if (event !== null) {\n      dispatchEvent(event);\n    }\n  }, [troveStatus, dispatchEvent]);\n  const provider = {\n    view,\n    dispatchEvent\n  };\n  return /*#__PURE__*/_jsxDEV(TroveViewContext.Provider, {\n    value: provider,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TroveViewProvider, \"VqwUBVQyZwZoghYurWwq7CGVcJo=\", false, function () {\n  return [useLiquitySelector];\n});\n\n_c = TroveViewProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TroveViewProvider\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/context/TroveViewProvider.tsx"],"names":["React","useState","useCallback","useEffect","useRef","useLiquitySelector","TroveViewContext","transitions","NONE","OPEN_TROVE_PRESSED","TROVE_OPENED","LIQUIDATED","TROVE_SURPLUS_COLLATERAL_CLAIMED","REDEEMED","OPENING","CANCEL_ADJUST_TROVE_PRESSED","ADJUSTING","TROVE_ADJUSTED","TROVE_CLOSED","TROVE_LIQUIDATED","TROVE_REDEEMED","CLOSING","ACTIVE","ADJUST_TROVE_PRESSED","CLOSE_TROVE_PRESSED","troveStatusEvents","open","closedByOwner","closedByLiquidation","closedByRedemption","transition","view","event","nextView","getInitialView","troveStatus","select","trove","status","TroveViewProvider","props","children","setView","viewRef","dispatchEvent","current","console","log","provider"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,EAAkDC,MAAlD,QAAgE,OAAhE;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;;AAKA,MAAMC,WAAkC,GAAG;AACzCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,kBAAkB,EAAE,SADhB;AAEJC,IAAAA,YAAY,EAAE;AAFV,GADmC;AAKzCC,EAAAA,UAAU,EAAE;AACVF,IAAAA,kBAAkB,EAAE,SADV;AAEVG,IAAAA,gCAAgC,EAAE,MAFxB;AAGVF,IAAAA,YAAY,EAAE;AAHJ,GAL6B;AAUzCG,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,kBAAkB,EAAE,SADZ;AAERG,IAAAA,gCAAgC,EAAE,MAF1B;AAGRF,IAAAA,YAAY,EAAE;AAHN,GAV+B;AAezCI,EAAAA,OAAO,EAAE;AACPC,IAAAA,2BAA2B,EAAE,MADtB;AAEPL,IAAAA,YAAY,EAAE;AAFP,GAfgC;AAmBzCM,EAAAA,SAAS,EAAE;AACTD,IAAAA,2BAA2B,EAAE,QADpB;AAETE,IAAAA,cAAc,EAAE,QAFP;AAGTC,IAAAA,YAAY,EAAE,MAHL;AAITC,IAAAA,gBAAgB,EAAE,YAJT;AAKTC,IAAAA,cAAc,EAAE;AALP,GAnB8B;AA0BzCC,EAAAA,OAAO,EAAE;AACPN,IAAAA,2BAA2B,EAAE,QADtB;AAEPG,IAAAA,YAAY,EAAE,MAFP;AAGPD,IAAAA,cAAc,EAAE,QAHT;AAIPE,IAAAA,gBAAgB,EAAE,YAJX;AAKPC,IAAAA,cAAc,EAAE;AALT,GA1BgC;AAiCzCE,EAAAA,MAAM,EAAE;AACNC,IAAAA,oBAAoB,EAAE,WADhB;AAENC,IAAAA,mBAAmB,EAAE,SAFf;AAGNN,IAAAA,YAAY,EAAE,MAHR;AAINC,IAAAA,gBAAgB,EAAE,YAJZ;AAKNC,IAAAA,cAAc,EAAE;AALV;AAjCiC,CAA3C;AA4CA,MAAMK,iBAAmC,GAAG;AAC1CC,EAAAA,IAAI,EAAE,cADoC;AAE1CC,EAAAA,aAAa,EAAE,cAF2B;AAG1CC,EAAAA,mBAAmB,EAAE,kBAHqB;AAI1CC,EAAAA,kBAAkB,EAAE;AAJsB,CAA5C;;AAOA,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAkBC,KAAlB,KAAmD;AAAA;;AACpE,QAAMC,QAAQ,4BAAG1B,WAAW,CAACwB,IAAD,CAAX,CAAkBC,KAAlB,CAAH,yEAA+BD,IAA7C;AACA,SAAOE,QAAP;AACD,CAHD;;AAKA,MAAMC,cAAc,GAAIC,WAAD,IAA6C;AAClE,MAAIA,WAAW,KAAK,qBAApB,EAA2C;AACzC,WAAO,YAAP;AACD;;AACD,MAAIA,WAAW,KAAK,oBAApB,EAA0C;AACxC,WAAO,UAAP;AACD;;AACD,MAAIA,WAAW,KAAK,MAApB,EAA4B;AAC1B,WAAO,QAAP;AACD;;AACD,SAAO,MAAP;AACD,CAXD;;AAaA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF;AAAT,CAAD,KAA8CA,MAA7D;;AAEA,OAAO,MAAMC,iBAA2B,GAAGC,KAAK,IAAI;AAAA;;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAML,WAAW,GAAG9B,kBAAkB,CAAC+B,MAAD,CAAtC;AAEA,QAAM,CAACL,IAAD,EAAOW,OAAP,IAAkBzC,QAAQ,CAAYiC,cAAc,CAACC,WAAD,CAA1B,CAAhC;AACA,QAAMQ,OAAO,GAAGvC,MAAM,CAAY2B,IAAZ,CAAtB;AAEA,QAAMa,aAAa,GAAG1C,WAAW,CAAE8B,KAAD,IAAuB;AACvD,UAAMC,QAAQ,GAAGH,UAAU,CAACa,OAAO,CAACE,OAAT,EAAkBb,KAAlB,CAA3B;AAEAc,IAAAA,OAAO,CAACC,GAAR,CACE,kDADF,EAEEJ,OAAO,CAACE,OAFV,EAGEb,KAHF,EAIEC,QAJF;AAMAS,IAAAA,OAAO,CAACT,QAAD,CAAP;AACD,GAVgC,EAU9B,EAV8B,CAAjC;AAYA9B,EAAAA,SAAS,CAAC,MAAM;AACdwC,IAAAA,OAAO,CAACE,OAAR,GAAkBd,IAAlB;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIA5B,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,UAAM6B,KAAK,4BAAGP,iBAAiB,CAACU,WAAD,CAApB,yEAAqC,IAAhD;;AACA,QAAIH,KAAK,KAAK,IAAd,EAAoB;AAClBY,MAAAA,aAAa,CAACZ,KAAD,CAAb;AACD;AACF,GALQ,EAKN,CAACG,WAAD,EAAcS,aAAd,CALM,CAAT;AAOA,QAAMI,QAAQ,GAAG;AACfjB,IAAAA,IADe;AAEfa,IAAAA;AAFe,GAAjB;AAIA,sBAAO,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEI,QAAlC;AAAA,cAA6CP;AAA7C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAnCM;;GAAMF,iB;UAESlC,kB;;;KAFTkC,iB","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { LiquityStoreState, UserTroveStatus } from \"@liquity/lib-base\";\nimport { TroveViewContext } from \"./TroveViewContext\";\nimport type { TroveView, TroveEvent } from \"./types\";\n\ntype TroveEventTransitions = Record<TroveView, Partial<Record<TroveEvent, TroveView>>>;\n\nconst transitions: TroveEventTransitions = {\n  NONE: {\n    OPEN_TROVE_PRESSED: \"OPENING\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  LIQUIDATED: {\n    OPEN_TROVE_PRESSED: \"OPENING\",\n    TROVE_SURPLUS_COLLATERAL_CLAIMED: \"NONE\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  REDEEMED: {\n    OPEN_TROVE_PRESSED: \"OPENING\",\n    TROVE_SURPLUS_COLLATERAL_CLAIMED: \"NONE\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  OPENING: {\n    CANCEL_ADJUST_TROVE_PRESSED: \"NONE\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  ADJUSTING: {\n    CANCEL_ADJUST_TROVE_PRESSED: \"ACTIVE\",\n    TROVE_ADJUSTED: \"ACTIVE\",\n    TROVE_CLOSED: \"NONE\",\n    TROVE_LIQUIDATED: \"LIQUIDATED\",\n    TROVE_REDEEMED: \"REDEEMED\"\n  },\n  CLOSING: {\n    CANCEL_ADJUST_TROVE_PRESSED: \"ACTIVE\",\n    TROVE_CLOSED: \"NONE\",\n    TROVE_ADJUSTED: \"ACTIVE\",\n    TROVE_LIQUIDATED: \"LIQUIDATED\",\n    TROVE_REDEEMED: \"REDEEMED\"\n  },\n  ACTIVE: {\n    ADJUST_TROVE_PRESSED: \"ADJUSTING\",\n    CLOSE_TROVE_PRESSED: \"CLOSING\",\n    TROVE_CLOSED: \"NONE\",\n    TROVE_LIQUIDATED: \"LIQUIDATED\",\n    TROVE_REDEEMED: \"REDEEMED\"\n  }\n};\n\ntype TroveStateEvents = Partial<Record<UserTroveStatus, TroveEvent>>;\n\nconst troveStatusEvents: TroveStateEvents = {\n  open: \"TROVE_OPENED\",\n  closedByOwner: \"TROVE_CLOSED\",\n  closedByLiquidation: \"TROVE_LIQUIDATED\",\n  closedByRedemption: \"TROVE_REDEEMED\"\n};\n\nconst transition = (view: TroveView, event: TroveEvent): TroveView => {\n  const nextView = transitions[view][event] ?? view;\n  return nextView;\n};\n\nconst getInitialView = (troveStatus: UserTroveStatus): TroveView => {\n  if (troveStatus === \"closedByLiquidation\") {\n    return \"LIQUIDATED\";\n  }\n  if (troveStatus === \"closedByRedemption\") {\n    return \"REDEEMED\";\n  }\n  if (troveStatus === \"open\") {\n    return \"ACTIVE\";\n  }\n  return \"NONE\";\n};\n\nconst select = ({ trove: { status } }: LiquityStoreState) => status;\n\nexport const TroveViewProvider: React.FC = props => {\n  const { children } = props;\n  const troveStatus = useLiquitySelector(select);\n\n  const [view, setView] = useState<TroveView>(getInitialView(troveStatus));\n  const viewRef = useRef<TroveView>(view);\n\n  const dispatchEvent = useCallback((event: TroveEvent) => {\n    const nextView = transition(viewRef.current, event);\n\n    console.log(\n      \"dispatchEvent() [current-view, event, next-view]\",\n      viewRef.current,\n      event,\n      nextView\n    );\n    setView(nextView);\n  }, []);\n\n  useEffect(() => {\n    viewRef.current = view;\n  }, [view]);\n\n  useEffect(() => {\n    const event = troveStatusEvents[troveStatus] ?? null;\n    if (event !== null) {\n      dispatchEvent(event);\n    }\n  }, [troveStatus, dispatchEvent]);\n\n  const provider = {\n    view,\n    dispatchEvent\n  };\n  return <TroveViewContext.Provider value={provider}>{children}</TroveViewContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}