{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/Adjusting.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport { Flex, Button, Box, Card, Heading } from \"theme-ui\";\nimport { Decimal, Trove, LUSD_LIQUIDATION_RESERVE, Percent, Difference } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { ActionDescription } from \"../ActionDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\nimport { TroveAction } from \"./TroveAction\";\nimport { useTroveView } from \"./context/TroveViewContext\";\nimport { COIN } from \"../../strings\";\nimport { Icon } from \"../Icon\";\nimport { InfoIcon } from \"../InfoIcon\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { CollateralRatio } from \"./CollateralRatio\";\nimport { EditableRow, StaticRow } from \"./Editor\";\nimport { selectForTroveChangeValidation, validateTroveChange } from \"./validation/validateTroveChange\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst selector = state => {\n  const {\n    trove,\n    fees,\n    price,\n    accountBalance\n  } = state;\n  return {\n    trove,\n    fees,\n    price,\n    accountBalance,\n    validationContext: selectForTroveChangeValidation(state)\n  };\n};\n\nconst TRANSACTION_ID = \"trove-adjustment\";\nconst GAS_ROOM_ETH = Decimal.from(0.1);\n\nconst feeFrom = (original, edited, borrowingRate) => {\n  const change = original.whatChanged(edited, borrowingRate);\n\n  if (change && change.type !== \"invalidCreation\" && change.params.borrowLUSD) {\n    return change.params.borrowLUSD.mul(borrowingRate);\n  } else {\n    return Decimal.ZERO;\n  }\n};\n\nconst applyUnsavedCollateralChanges = (unsavedChanges, trove) => {\n  if (unsavedChanges.absoluteValue) {\n    if (unsavedChanges.positive) {\n      return trove.collateral.add(unsavedChanges.absoluteValue);\n    }\n\n    if (unsavedChanges.negative) {\n      if (unsavedChanges.absoluteValue.lt(trove.collateral)) {\n        return trove.collateral.sub(unsavedChanges.absoluteValue);\n      }\n    }\n\n    return trove.collateral;\n  }\n\n  return trove.collateral;\n};\n\nconst applyUnsavedNetDebtChanges = (unsavedChanges, trove) => {\n  if (unsavedChanges.absoluteValue) {\n    if (unsavedChanges.positive) {\n      return trove.netDebt.add(unsavedChanges.absoluteValue);\n    }\n\n    if (unsavedChanges.negative) {\n      if (unsavedChanges.absoluteValue.lt(trove.netDebt)) {\n        return trove.netDebt.sub(unsavedChanges.absoluteValue);\n      }\n    }\n\n    return trove.netDebt;\n  }\n\n  return trove.netDebt;\n};\n\nexport const Adjusting = () => {\n  _s();\n\n  const {\n    dispatchEvent\n  } = useTroveView();\n  const {\n    trove,\n    fees,\n    price,\n    accountBalance,\n    validationContext\n  } = useLiquitySelector(selector);\n  const editingState = useState();\n  const previousTrove = useRef(trove);\n  const [collateral, setCollateral] = useState(trove.collateral);\n  const [netDebt, setNetDebt] = useState(trove.netDebt);\n  const transactionState = useMyTransactionState(TRANSACTION_ID);\n  const borrowingRate = fees.borrowingRate();\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"TROVE_ADJUSTED\");\n    }\n  }, [transactionState.type, dispatchEvent]);\n  useEffect(() => {\n    if (!previousTrove.current.collateral.eq(trove.collateral)) {\n      const unsavedChanges = Difference.between(collateral, previousTrove.current.collateral);\n      const nextCollateral = applyUnsavedCollateralChanges(unsavedChanges, trove);\n      setCollateral(nextCollateral);\n    }\n\n    if (!previousTrove.current.netDebt.eq(trove.netDebt)) {\n      const unsavedChanges = Difference.between(netDebt, previousTrove.current.netDebt);\n      const nextNetDebt = applyUnsavedNetDebtChanges(unsavedChanges, trove);\n      setNetDebt(nextNetDebt);\n    }\n\n    previousTrove.current = trove;\n  }, [trove, collateral, netDebt]);\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n  const reset = useCallback(() => {\n    setCollateral(trove.collateral);\n    setNetDebt(trove.netDebt);\n  }, [trove.collateral, trove.netDebt]);\n\n  if (trove.status !== \"open\") {\n    return null;\n  }\n\n  const isDirty = !collateral.eq(trove.collateral) || !netDebt.eq(trove.netDebt);\n  const isDebtIncrease = netDebt.gt(trove.netDebt);\n  const debtIncreaseAmount = isDebtIncrease ? netDebt.sub(trove.netDebt) : Decimal.ZERO;\n  const fee = isDebtIncrease ? feeFrom(trove, new Trove(trove.collateral, trove.debt.add(debtIncreaseAmount)), borrowingRate) : Decimal.ZERO;\n  const totalDebt = netDebt.add(LUSD_LIQUIDATION_RESERVE).add(fee);\n  const maxBorrowingRate = borrowingRate.add(0.005);\n  const updatedTrove = isDirty ? new Trove(collateral, totalDebt) : trove;\n  const feePct = new Percent(borrowingRate);\n  const maxEth = accountBalance.gt(GAS_ROOM_ETH) ? accountBalance.sub(GAS_ROOM_ETH) : Decimal.ZERO;\n  const maxCollateral = collateral.add(maxEth);\n  const collateralMaxedOut = collateral.eq(maxCollateral);\n  const collateralRatio = !collateral.isZero && !netDebt.isZero ? updatedTrove.collateralRatio(price) : undefined;\n  const collateralRatioChange = Difference.between(collateralRatio, trove.collateralRatio(price));\n  const [troveChange, description] = validateTroveChange(trove, updatedTrove, borrowingRate, validationContext);\n  const isTransactionPending = transactionState.type === \"waitingForApproval\" || transactionState.type === \"waitingForConfirmation\";\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      children: [\"Trove\", isDirty && !isTransactionPending && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"titleIcon\",\n        sx: {\n          \":enabled:hover\": {\n            color: \"danger\"\n          }\n        },\n        onClick: reset,\n        children: /*#__PURE__*/_jsxDEV(Icon, {\n          name: \"history\",\n          size: \"lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: [2, 3]\n      },\n      children: [/*#__PURE__*/_jsxDEV(EditableRow, {\n        label: \"Collateral\",\n        inputId: \"trove-collateral\",\n        amount: collateral.prettify(4),\n        maxAmount: maxCollateral.toString(),\n        maxedOut: collateralMaxedOut,\n        editingState: editingState,\n        unit: \"ETH\",\n        editedAmount: collateral.toString(4),\n        setEditedAmount: amount => setCollateral(Decimal.from(amount))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditableRow, {\n        label: \"Net debt\",\n        inputId: \"trove-net-debt-amount\",\n        amount: netDebt.prettify(),\n        unit: COIN,\n        editingState: editingState,\n        editedAmount: netDebt.toString(2),\n        setEditedAmount: amount => setNetDebt(Decimal.from(amount))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Liquidation Reserve\",\n        inputId: \"trove-liquidation-reserve\",\n        amount: `${LUSD_LIQUIDATION_RESERVE}`,\n        unit: COIN,\n        infoIcon: /*#__PURE__*/_jsxDEV(InfoIcon, {\n          tooltip: /*#__PURE__*/_jsxDEV(Card, {\n            variant: \"tooltip\",\n            sx: {\n              width: \"200px\"\n            },\n            children: \"An amount set aside to cover the liquidator\\u2019s gas costs if your Trove needs to be liquidated. The amount increases your debt and is refunded if you close your Trove by fully paying off its net debt.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Borrowing Fee\",\n        inputId: \"trove-borrowing-fee\",\n        amount: fee.prettify(2),\n        pendingAmount: feePct.toString(2),\n        unit: COIN,\n        infoIcon: /*#__PURE__*/_jsxDEV(InfoIcon, {\n          tooltip: /*#__PURE__*/_jsxDEV(Card, {\n            variant: \"tooltip\",\n            sx: {\n              width: \"240px\"\n            },\n            children: \"This amount is deducted from the borrowed amount as a one-time fee. There are no recurring fees for borrowing, which is thus interest-free.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Total debt\",\n        inputId: \"trove-total-debt\",\n        amount: totalDebt.prettify(2),\n        unit: COIN,\n        infoIcon: /*#__PURE__*/_jsxDEV(InfoIcon, {\n          tooltip: /*#__PURE__*/_jsxDEV(Card, {\n            variant: \"tooltip\",\n            sx: {\n              width: \"240px\"\n            },\n            children: [\"The total amount of LUSD your Trove will hold.\", \" \", isDirty && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"You will need to repay \", totalDebt.sub(LUSD_LIQUIDATION_RESERVE).prettify(2), \" \", \"LUSD to reclaim your collateral (\", LUSD_LIQUIDATION_RESERVE.toString(), \" LUSD Liquidation Reserve excluded).\"]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CollateralRatio, {\n        value: collateralRatio,\n        change: collateralRatioChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), description !== null && description !== void 0 ? description : /*#__PURE__*/_jsxDEV(ActionDescription, {\n        children: \"Adjust your Trove by modifying its collateral, debt, or both.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        variant: \"layout.actions\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"cancel\",\n          onClick: handleCancelPressed,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), troveChange ? /*#__PURE__*/_jsxDEV(TroveAction, {\n          transactionId: TRANSACTION_ID,\n          change: troveChange,\n          maxBorrowingRate: maxBorrowingRate,\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          disabled: true,\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), isTransactionPending && /*#__PURE__*/_jsxDEV(LoadingOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Adjusting, \"YfTkQSv8Ik1bWAT0w3do37s43cw=\", false, function () {\n  return [useTroveView, useLiquitySelector, useMyTransactionState];\n});\n\n_c = Adjusting;\n\nvar _c;\n\n$RefreshReg$(_c, \"Adjusting\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/Adjusting.tsx"],"names":["React","useCallback","useEffect","useState","useRef","Flex","Button","Box","Card","Heading","Decimal","Trove","LUSD_LIQUIDATION_RESERVE","Percent","Difference","useLiquitySelector","ActionDescription","useMyTransactionState","TroveAction","useTroveView","COIN","Icon","InfoIcon","LoadingOverlay","CollateralRatio","EditableRow","StaticRow","selectForTroveChangeValidation","validateTroveChange","selector","state","trove","fees","price","accountBalance","validationContext","TRANSACTION_ID","GAS_ROOM_ETH","from","feeFrom","original","edited","borrowingRate","change","whatChanged","type","params","borrowLUSD","mul","ZERO","applyUnsavedCollateralChanges","unsavedChanges","absoluteValue","positive","collateral","add","negative","lt","sub","applyUnsavedNetDebtChanges","netDebt","Adjusting","dispatchEvent","editingState","previousTrove","setCollateral","setNetDebt","transactionState","current","eq","between","nextCollateral","nextNetDebt","handleCancelPressed","reset","status","isDirty","isDebtIncrease","gt","debtIncreaseAmount","fee","debt","totalDebt","maxBorrowingRate","updatedTrove","feePct","maxEth","maxCollateral","collateralMaxedOut","collateralRatio","isZero","undefined","collateralRatioChange","troveChange","description","isTransactionPending","color","p","prettify","toString","amount","width"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,EAAkDC,MAAlD,QAAgE,OAAhE;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkCC,OAAlC,QAAiD,UAAjD;AACA,SAEEC,OAFF,EAGEC,KAHF,EAIEC,wBAJF,EAKEC,OALF,EAMEC,UANF,QAOO,mBAPP;AAQA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,qBAAT,QAAsC,gBAAtC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,UAAvC;AACA,SACEC,8BADF,EAEEC,mBAFF,QAGO,kCAHP;;;;AAKA,MAAMC,QAAQ,GAAIC,KAAD,IAA8B;AAC7C,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA;AAAtB,MAAyCJ,KAA/C;AACA,SAAO;AACLC,IAAAA,KADK;AAELC,IAAAA,IAFK;AAGLC,IAAAA,KAHK;AAILC,IAAAA,cAJK;AAKLC,IAAAA,iBAAiB,EAAER,8BAA8B,CAACG,KAAD;AAL5C,GAAP;AAOD,CATD;;AAWA,MAAMM,cAAc,GAAG,kBAAvB;AACA,MAAMC,YAAY,GAAG3B,OAAO,CAAC4B,IAAR,CAAa,GAAb,CAArB;;AAEA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAkBC,MAAlB,EAAiCC,aAAjC,KAAqE;AACnF,QAAMC,MAAM,GAAGH,QAAQ,CAACI,WAAT,CAAqBH,MAArB,EAA6BC,aAA7B,CAAf;;AAEA,MAAIC,MAAM,IAAIA,MAAM,CAACE,IAAP,KAAgB,iBAA1B,IAA+CF,MAAM,CAACG,MAAP,CAAcC,UAAjE,EAA6E;AAC3E,WAAOJ,MAAM,CAACG,MAAP,CAAcC,UAAd,CAAyBC,GAAzB,CAA6BN,aAA7B,CAAP;AACD,GAFD,MAEO;AACL,WAAOhC,OAAO,CAACuC,IAAf;AACD;AACF,CARD;;AAUA,MAAMC,6BAA6B,GAAG,CAACC,cAAD,EAA6BpB,KAA7B,KAA8C;AAClF,MAAIoB,cAAc,CAACC,aAAnB,EAAkC;AAChC,QAAID,cAAc,CAACE,QAAnB,EAA6B;AAC3B,aAAOtB,KAAK,CAACuB,UAAN,CAAiBC,GAAjB,CAAqBJ,cAAc,CAACC,aAApC,CAAP;AACD;;AACD,QAAID,cAAc,CAACK,QAAnB,EAA6B;AAC3B,UAAIL,cAAc,CAACC,aAAf,CAA6BK,EAA7B,CAAgC1B,KAAK,CAACuB,UAAtC,CAAJ,EAAuD;AACrD,eAAOvB,KAAK,CAACuB,UAAN,CAAiBI,GAAjB,CAAqBP,cAAc,CAACC,aAApC,CAAP;AACD;AACF;;AACD,WAAOrB,KAAK,CAACuB,UAAb;AACD;;AACD,SAAOvB,KAAK,CAACuB,UAAb;AACD,CAbD;;AAeA,MAAMK,0BAA0B,GAAG,CAACR,cAAD,EAA6BpB,KAA7B,KAA8C;AAC/E,MAAIoB,cAAc,CAACC,aAAnB,EAAkC;AAChC,QAAID,cAAc,CAACE,QAAnB,EAA6B;AAC3B,aAAOtB,KAAK,CAAC6B,OAAN,CAAcL,GAAd,CAAkBJ,cAAc,CAACC,aAAjC,CAAP;AACD;;AACD,QAAID,cAAc,CAACK,QAAnB,EAA6B;AAC3B,UAAIL,cAAc,CAACC,aAAf,CAA6BK,EAA7B,CAAgC1B,KAAK,CAAC6B,OAAtC,CAAJ,EAAoD;AAClD,eAAO7B,KAAK,CAAC6B,OAAN,CAAcF,GAAd,CAAkBP,cAAc,CAACC,aAAjC,CAAP;AACD;AACF;;AACD,WAAOrB,KAAK,CAAC6B,OAAb;AACD;;AACD,SAAO7B,KAAK,CAAC6B,OAAb;AACD,CAbD;;AAeA,OAAO,MAAMC,SAAmB,GAAG,MAAM;AAAA;;AACvC,QAAM;AAAEC,IAAAA;AAAF,MAAoB3C,YAAY,EAAtC;AACA,QAAM;AAAEY,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA,cAAtB;AAAsCC,IAAAA;AAAtC,MAA4DpB,kBAAkB,CAACc,QAAD,CAApF;AACA,QAAMkC,YAAY,GAAG5D,QAAQ,EAA7B;AACA,QAAM6D,aAAa,GAAG5D,MAAM,CAAQ2B,KAAR,CAA5B;AACA,QAAM,CAACuB,UAAD,EAAaW,aAAb,IAA8B9D,QAAQ,CAAU4B,KAAK,CAACuB,UAAhB,CAA5C;AACA,QAAM,CAACM,OAAD,EAAUM,UAAV,IAAwB/D,QAAQ,CAAU4B,KAAK,CAAC6B,OAAhB,CAAtC;AAEA,QAAMO,gBAAgB,GAAGlD,qBAAqB,CAACmB,cAAD,CAA9C;AACA,QAAMM,aAAa,GAAGV,IAAI,CAACU,aAAL,EAAtB;AAEAxC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiE,gBAAgB,CAACtB,IAAjB,KAA0B,kBAA9B,EAAkD;AAChDiB,MAAAA,aAAa,CAAC,gBAAD,CAAb;AACD;AACF,GAJQ,EAIN,CAACK,gBAAgB,CAACtB,IAAlB,EAAwBiB,aAAxB,CAJM,CAAT;AAMA5D,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC8D,aAAa,CAACI,OAAd,CAAsBd,UAAtB,CAAiCe,EAAjC,CAAoCtC,KAAK,CAACuB,UAA1C,CAAL,EAA4D;AAC1D,YAAMH,cAAc,GAAGrC,UAAU,CAACwD,OAAX,CAAmBhB,UAAnB,EAA+BU,aAAa,CAACI,OAAd,CAAsBd,UAArD,CAAvB;AACA,YAAMiB,cAAc,GAAGrB,6BAA6B,CAACC,cAAD,EAAiBpB,KAAjB,CAApD;AACAkC,MAAAA,aAAa,CAACM,cAAD,CAAb;AACD;;AACD,QAAI,CAACP,aAAa,CAACI,OAAd,CAAsBR,OAAtB,CAA8BS,EAA9B,CAAiCtC,KAAK,CAAC6B,OAAvC,CAAL,EAAsD;AACpD,YAAMT,cAAc,GAAGrC,UAAU,CAACwD,OAAX,CAAmBV,OAAnB,EAA4BI,aAAa,CAACI,OAAd,CAAsBR,OAAlD,CAAvB;AACA,YAAMY,WAAW,GAAGb,0BAA0B,CAACR,cAAD,EAAiBpB,KAAjB,CAA9C;AACAmC,MAAAA,UAAU,CAACM,WAAD,CAAV;AACD;;AACDR,IAAAA,aAAa,CAACI,OAAd,GAAwBrC,KAAxB;AACD,GAZQ,EAYN,CAACA,KAAD,EAAQuB,UAAR,EAAoBM,OAApB,CAZM,CAAT;AAcA,QAAMa,mBAAmB,GAAGxE,WAAW,CAAC,MAAM;AAC5C6D,IAAAA,aAAa,CAAC,6BAAD,CAAb;AACD,GAFsC,EAEpC,CAACA,aAAD,CAFoC,CAAvC;AAIA,QAAMY,KAAK,GAAGzE,WAAW,CAAC,MAAM;AAC9BgE,IAAAA,aAAa,CAAClC,KAAK,CAACuB,UAAP,CAAb;AACAY,IAAAA,UAAU,CAACnC,KAAK,CAAC6B,OAAP,CAAV;AACD,GAHwB,EAGtB,CAAC7B,KAAK,CAACuB,UAAP,EAAmBvB,KAAK,CAAC6B,OAAzB,CAHsB,CAAzB;;AAKA,MAAI7B,KAAK,CAAC4C,MAAN,KAAiB,MAArB,EAA6B;AAC3B,WAAO,IAAP;AACD;;AAED,QAAMC,OAAO,GAAG,CAACtB,UAAU,CAACe,EAAX,CAActC,KAAK,CAACuB,UAApB,CAAD,IAAoC,CAACM,OAAO,CAACS,EAAR,CAAWtC,KAAK,CAAC6B,OAAjB,CAArD;AACA,QAAMiB,cAAc,GAAGjB,OAAO,CAACkB,EAAR,CAAW/C,KAAK,CAAC6B,OAAjB,CAAvB;AACA,QAAMmB,kBAAkB,GAAGF,cAAc,GAAGjB,OAAO,CAACF,GAAR,CAAY3B,KAAK,CAAC6B,OAAlB,CAAH,GAAgClD,OAAO,CAACuC,IAAjF;AAEA,QAAM+B,GAAG,GAAGH,cAAc,GACtBtC,OAAO,CAACR,KAAD,EAAQ,IAAIpB,KAAJ,CAAUoB,KAAK,CAACuB,UAAhB,EAA4BvB,KAAK,CAACkD,IAAN,CAAW1B,GAAX,CAAewB,kBAAf,CAA5B,CAAR,EAAyErC,aAAzE,CADe,GAEtBhC,OAAO,CAACuC,IAFZ;AAGA,QAAMiC,SAAS,GAAGtB,OAAO,CAACL,GAAR,CAAY3C,wBAAZ,EAAsC2C,GAAtC,CAA0CyB,GAA1C,CAAlB;AACA,QAAMG,gBAAgB,GAAGzC,aAAa,CAACa,GAAd,CAAkB,KAAlB,CAAzB;AACA,QAAM6B,YAAY,GAAGR,OAAO,GAAG,IAAIjE,KAAJ,CAAU2C,UAAV,EAAsB4B,SAAtB,CAAH,GAAsCnD,KAAlE;AACA,QAAMsD,MAAM,GAAG,IAAIxE,OAAJ,CAAY6B,aAAZ,CAAf;AACA,QAAM4C,MAAM,GAAGpD,cAAc,CAAC4C,EAAf,CAAkBzC,YAAlB,IAAkCH,cAAc,CAACwB,GAAf,CAAmBrB,YAAnB,CAAlC,GAAqE3B,OAAO,CAACuC,IAA5F;AACA,QAAMsC,aAAa,GAAGjC,UAAU,CAACC,GAAX,CAAe+B,MAAf,CAAtB;AACA,QAAME,kBAAkB,GAAGlC,UAAU,CAACe,EAAX,CAAckB,aAAd,CAA3B;AACA,QAAME,eAAe,GACnB,CAACnC,UAAU,CAACoC,MAAZ,IAAsB,CAAC9B,OAAO,CAAC8B,MAA/B,GAAwCN,YAAY,CAACK,eAAb,CAA6BxD,KAA7B,CAAxC,GAA8E0D,SADhF;AAEA,QAAMC,qBAAqB,GAAG9E,UAAU,CAACwD,OAAX,CAAmBmB,eAAnB,EAAoC1D,KAAK,CAAC0D,eAAN,CAAsBxD,KAAtB,CAApC,CAA9B;AAEA,QAAM,CAAC4D,WAAD,EAAcC,WAAd,IAA6BlE,mBAAmB,CACpDG,KADoD,EAEpDqD,YAFoD,EAGpD1C,aAHoD,EAIpDP,iBAJoD,CAAtD;AAOA,QAAM4D,oBAAoB,GACxB5B,gBAAgB,CAACtB,IAAjB,KAA0B,oBAA1B,IACAsB,gBAAgB,CAACtB,IAAjB,KAA0B,wBAF5B;AAIA,sBACE,QAAC,IAAD;AAAA,4BACE,QAAC,OAAD;AAAA,0BAEG+B,OAAO,IAAI,CAACmB,oBAAZ,iBACC,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,EAAE,EAAE;AAAE,4BAAkB;AAAEC,YAAAA,KAAK,EAAE;AAAT;AAApB,SAAhC;AAA2E,QAAA,OAAO,EAAEtB,KAApF;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAC,SAAX;AAAqB,UAAA,IAAI,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAUE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAEuB,QAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAL,OAAT;AAAA,8BACE,QAAC,WAAD;AACE,QAAA,KAAK,EAAC,YADR;AAEE,QAAA,OAAO,EAAC,kBAFV;AAGE,QAAA,MAAM,EAAE3C,UAAU,CAAC4C,QAAX,CAAoB,CAApB,CAHV;AAIE,QAAA,SAAS,EAAEX,aAAa,CAACY,QAAd,EAJb;AAKE,QAAA,QAAQ,EAAEX,kBALZ;AAME,QAAA,YAAY,EAAEzB,YANhB;AAOE,QAAA,IAAI,EAAC,KAPP;AAQE,QAAA,YAAY,EAAET,UAAU,CAAC6C,QAAX,CAAoB,CAApB,CARhB;AASE,QAAA,eAAe,EAAGC,MAAD,IAAoBnC,aAAa,CAACvD,OAAO,CAAC4B,IAAR,CAAa8D,MAAb,CAAD;AATpD;AAAA;AAAA;AAAA;AAAA,cADF,eAaE,QAAC,WAAD;AACE,QAAA,KAAK,EAAC,UADR;AAEE,QAAA,OAAO,EAAC,uBAFV;AAGE,QAAA,MAAM,EAAExC,OAAO,CAACsC,QAAR,EAHV;AAIE,QAAA,IAAI,EAAE9E,IAJR;AAKE,QAAA,YAAY,EAAE2C,YALhB;AAME,QAAA,YAAY,EAAEH,OAAO,CAACuC,QAAR,CAAiB,CAAjB,CANhB;AAOE,QAAA,eAAe,EAAGC,MAAD,IAAoBlC,UAAU,CAACxD,OAAO,CAAC4B,IAAR,CAAa8D,MAAb,CAAD;AAPjD;AAAA;AAAA;AAAA;AAAA,cAbF,eAuBE,QAAC,SAAD;AACE,QAAA,KAAK,EAAC,qBADR;AAEE,QAAA,OAAO,EAAC,2BAFV;AAGE,QAAA,MAAM,EAAG,GAAExF,wBAAyB,EAHtC;AAIE,QAAA,IAAI,EAAEQ,IAJR;AAKE,QAAA,QAAQ,eACN,QAAC,QAAD;AACE,UAAA,OAAO,eACL,QAAC,IAAD;AAAM,YAAA,OAAO,EAAC,SAAd;AAAwB,YAAA,EAAE,EAAE;AAAEiF,cAAAA,KAAK,EAAE;AAAT,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,cAvBF,eAyCE,QAAC,SAAD;AACE,QAAA,KAAK,EAAC,eADR;AAEE,QAAA,OAAO,EAAC,qBAFV;AAGE,QAAA,MAAM,EAAErB,GAAG,CAACkB,QAAJ,CAAa,CAAb,CAHV;AAIE,QAAA,aAAa,EAAEb,MAAM,CAACc,QAAP,CAAgB,CAAhB,CAJjB;AAKE,QAAA,IAAI,EAAE/E,IALR;AAME,QAAA,QAAQ,eACN,QAAC,QAAD;AACE,UAAA,OAAO,eACL,QAAC,IAAD;AAAM,YAAA,OAAO,EAAC,SAAd;AAAwB,YAAA,EAAE,EAAE;AAAEiF,cAAAA,KAAK,EAAE;AAAT,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,cAzCF,eA2DE,QAAC,SAAD;AACE,QAAA,KAAK,EAAC,YADR;AAEE,QAAA,OAAO,EAAC,kBAFV;AAGE,QAAA,MAAM,EAAEnB,SAAS,CAACgB,QAAV,CAAmB,CAAnB,CAHV;AAIE,QAAA,IAAI,EAAE9E,IAJR;AAKE,QAAA,QAAQ,eACN,QAAC,QAAD;AACE,UAAA,OAAO,eACL,QAAC,IAAD;AAAM,YAAA,OAAO,EAAC,SAAd;AAAwB,YAAA,EAAE,EAAE;AAAEiF,cAAAA,KAAK,EAAE;AAAT,aAA5B;AAAA,yEACiD,GADjD,EAEGzB,OAAO,iBACN;AAAA,oDAC0BM,SAAS,CAACxB,GAAV,CAAc9C,wBAAd,EAAwCsF,QAAxC,CAAiD,CAAjD,CAD1B,EAC+E,GAD/E,uCAEoCtF,wBAAwB,CAACuF,QAAzB,EAFpC;AAAA,4BAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,cA3DF,eAkFE,QAAC,eAAD;AAAiB,QAAA,KAAK,EAAEV,eAAxB;AAAyC,QAAA,MAAM,EAAEG;AAAjD;AAAA;AAAA;AAAA;AAAA,cAlFF,EAoFGE,WApFH,aAoFGA,WApFH,cAoFGA,WApFH,gBAqFI,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArFJ,eA0FE,QAAC,IAAD;AAAM,QAAA,OAAO,EAAC,gBAAd;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,QAAhB;AAAyB,UAAA,OAAO,EAAErB,mBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAKGoB,WAAW,gBACV,QAAC,WAAD;AACE,UAAA,aAAa,EAAEzD,cADjB;AAEE,UAAA,MAAM,EAAEyD,WAFV;AAGE,UAAA,gBAAgB,EAAEV,gBAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADU,gBASV,QAAC,MAAD;AAAQ,UAAA,QAAQ,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,cA1FF;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,EAsHGY,oBAAoB,iBAAI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAtH3B;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0HD,CAnMM;;GAAMlC,S;UACe1C,Y,EACwCJ,kB,EAMzCE,qB;;;KARd4C,S","sourcesContent":["import React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport { Flex, Button, Box, Card, Heading } from \"theme-ui\";\nimport {\n  LiquityStoreState,\n  Decimal,\n  Trove,\n  LUSD_LIQUIDATION_RESERVE,\n  Percent,\n  Difference\n} from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { ActionDescription } from \"../ActionDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\nimport { TroveAction } from \"./TroveAction\";\nimport { useTroveView } from \"./context/TroveViewContext\";\nimport { COIN } from \"../../strings\";\nimport { Icon } from \"../Icon\";\nimport { InfoIcon } from \"../InfoIcon\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { CollateralRatio } from \"./CollateralRatio\";\nimport { EditableRow, StaticRow } from \"./Editor\";\nimport {\n  selectForTroveChangeValidation,\n  validateTroveChange\n} from \"./validation/validateTroveChange\";\n\nconst selector = (state: LiquityStoreState) => {\n  const { trove, fees, price, accountBalance } = state;\n  return {\n    trove,\n    fees,\n    price,\n    accountBalance,\n    validationContext: selectForTroveChangeValidation(state)\n  };\n};\n\nconst TRANSACTION_ID = \"trove-adjustment\";\nconst GAS_ROOM_ETH = Decimal.from(0.1);\n\nconst feeFrom = (original: Trove, edited: Trove, borrowingRate: Decimal): Decimal => {\n  const change = original.whatChanged(edited, borrowingRate);\n\n  if (change && change.type !== \"invalidCreation\" && change.params.borrowLUSD) {\n    return change.params.borrowLUSD.mul(borrowingRate);\n  } else {\n    return Decimal.ZERO;\n  }\n};\n\nconst applyUnsavedCollateralChanges = (unsavedChanges: Difference, trove: Trove) => {\n  if (unsavedChanges.absoluteValue) {\n    if (unsavedChanges.positive) {\n      return trove.collateral.add(unsavedChanges.absoluteValue);\n    }\n    if (unsavedChanges.negative) {\n      if (unsavedChanges.absoluteValue.lt(trove.collateral)) {\n        return trove.collateral.sub(unsavedChanges.absoluteValue);\n      }\n    }\n    return trove.collateral;\n  }\n  return trove.collateral;\n};\n\nconst applyUnsavedNetDebtChanges = (unsavedChanges: Difference, trove: Trove) => {\n  if (unsavedChanges.absoluteValue) {\n    if (unsavedChanges.positive) {\n      return trove.netDebt.add(unsavedChanges.absoluteValue);\n    }\n    if (unsavedChanges.negative) {\n      if (unsavedChanges.absoluteValue.lt(trove.netDebt)) {\n        return trove.netDebt.sub(unsavedChanges.absoluteValue);\n      }\n    }\n    return trove.netDebt;\n  }\n  return trove.netDebt;\n};\n\nexport const Adjusting: React.FC = () => {\n  const { dispatchEvent } = useTroveView();\n  const { trove, fees, price, accountBalance, validationContext } = useLiquitySelector(selector);\n  const editingState = useState<string>();\n  const previousTrove = useRef<Trove>(trove);\n  const [collateral, setCollateral] = useState<Decimal>(trove.collateral);\n  const [netDebt, setNetDebt] = useState<Decimal>(trove.netDebt);\n\n  const transactionState = useMyTransactionState(TRANSACTION_ID);\n  const borrowingRate = fees.borrowingRate();\n\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"TROVE_ADJUSTED\");\n    }\n  }, [transactionState.type, dispatchEvent]);\n\n  useEffect(() => {\n    if (!previousTrove.current.collateral.eq(trove.collateral)) {\n      const unsavedChanges = Difference.between(collateral, previousTrove.current.collateral);\n      const nextCollateral = applyUnsavedCollateralChanges(unsavedChanges, trove);\n      setCollateral(nextCollateral);\n    }\n    if (!previousTrove.current.netDebt.eq(trove.netDebt)) {\n      const unsavedChanges = Difference.between(netDebt, previousTrove.current.netDebt);\n      const nextNetDebt = applyUnsavedNetDebtChanges(unsavedChanges, trove);\n      setNetDebt(nextNetDebt);\n    }\n    previousTrove.current = trove;\n  }, [trove, collateral, netDebt]);\n\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n\n  const reset = useCallback(() => {\n    setCollateral(trove.collateral);\n    setNetDebt(trove.netDebt);\n  }, [trove.collateral, trove.netDebt]);\n\n  if (trove.status !== \"open\") {\n    return null;\n  }\n\n  const isDirty = !collateral.eq(trove.collateral) || !netDebt.eq(trove.netDebt);\n  const isDebtIncrease = netDebt.gt(trove.netDebt);\n  const debtIncreaseAmount = isDebtIncrease ? netDebt.sub(trove.netDebt) : Decimal.ZERO;\n\n  const fee = isDebtIncrease\n    ? feeFrom(trove, new Trove(trove.collateral, trove.debt.add(debtIncreaseAmount)), borrowingRate)\n    : Decimal.ZERO;\n  const totalDebt = netDebt.add(LUSD_LIQUIDATION_RESERVE).add(fee);\n  const maxBorrowingRate = borrowingRate.add(0.005);\n  const updatedTrove = isDirty ? new Trove(collateral, totalDebt) : trove;\n  const feePct = new Percent(borrowingRate);\n  const maxEth = accountBalance.gt(GAS_ROOM_ETH) ? accountBalance.sub(GAS_ROOM_ETH) : Decimal.ZERO;\n  const maxCollateral = collateral.add(maxEth);\n  const collateralMaxedOut = collateral.eq(maxCollateral);\n  const collateralRatio =\n    !collateral.isZero && !netDebt.isZero ? updatedTrove.collateralRatio(price) : undefined;\n  const collateralRatioChange = Difference.between(collateralRatio, trove.collateralRatio(price));\n\n  const [troveChange, description] = validateTroveChange(\n    trove,\n    updatedTrove,\n    borrowingRate,\n    validationContext\n  );\n\n  const isTransactionPending =\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\";\n\n  return (\n    <Card>\n      <Heading>\n        Trove\n        {isDirty && !isTransactionPending && (\n          <Button variant=\"titleIcon\" sx={{ \":enabled:hover\": { color: \"danger\" } }} onClick={reset}>\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Collateral\"\n          inputId=\"trove-collateral\"\n          amount={collateral.prettify(4)}\n          maxAmount={maxCollateral.toString()}\n          maxedOut={collateralMaxedOut}\n          editingState={editingState}\n          unit=\"ETH\"\n          editedAmount={collateral.toString(4)}\n          setEditedAmount={(amount: string) => setCollateral(Decimal.from(amount))}\n        />\n\n        <EditableRow\n          label=\"Net debt\"\n          inputId=\"trove-net-debt-amount\"\n          amount={netDebt.prettify()}\n          unit={COIN}\n          editingState={editingState}\n          editedAmount={netDebt.toString(2)}\n          setEditedAmount={(amount: string) => setNetDebt(Decimal.from(amount))}\n        />\n\n        <StaticRow\n          label=\"Liquidation Reserve\"\n          inputId=\"trove-liquidation-reserve\"\n          amount={`${LUSD_LIQUIDATION_RESERVE}`}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"200px\" }}>\n                  An amount set aside to cover the liquidator’s gas costs if your Trove needs to be\n                  liquidated. The amount increases your debt and is refunded if you close your Trove\n                  by fully paying off its net debt.\n                </Card>\n              }\n            />\n          }\n        />\n\n        <StaticRow\n          label=\"Borrowing Fee\"\n          inputId=\"trove-borrowing-fee\"\n          amount={fee.prettify(2)}\n          pendingAmount={feePct.toString(2)}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                  This amount is deducted from the borrowed amount as a one-time fee. There are no\n                  recurring fees for borrowing, which is thus interest-free.\n                </Card>\n              }\n            />\n          }\n        />\n\n        <StaticRow\n          label=\"Total debt\"\n          inputId=\"trove-total-debt\"\n          amount={totalDebt.prettify(2)}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                  The total amount of LUSD your Trove will hold.{\" \"}\n                  {isDirty && (\n                    <>\n                      You will need to repay {totalDebt.sub(LUSD_LIQUIDATION_RESERVE).prettify(2)}{\" \"}\n                      LUSD to reclaim your collateral ({LUSD_LIQUIDATION_RESERVE.toString()} LUSD\n                      Liquidation Reserve excluded).\n                    </>\n                  )}\n                </Card>\n              }\n            />\n          }\n        />\n\n        <CollateralRatio value={collateralRatio} change={collateralRatioChange} />\n\n        {description ?? (\n          <ActionDescription>\n            Adjust your Trove by modifying its collateral, debt, or both.\n          </ActionDescription>\n        )}\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"cancel\" onClick={handleCancelPressed}>\n            Cancel\n          </Button>\n\n          {troveChange ? (\n            <TroveAction\n              transactionId={TRANSACTION_ID}\n              change={troveChange}\n              maxBorrowingRate={maxBorrowingRate}\n            >\n              Confirm\n            </TroveAction>\n          ) : (\n            <Button disabled>Confirm</Button>\n          )}\n        </Flex>\n      </Box>\n      {isTransactionPending && <LoadingOverlay />}\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}