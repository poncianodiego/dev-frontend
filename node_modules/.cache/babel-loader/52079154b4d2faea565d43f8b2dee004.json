{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Staking/StakingEditor.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Heading, Box, Card, Button } from \"theme-ui\";\nimport { Difference } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { COIN, GT } from \"../../strings\";\nimport { Icon } from \"../Icon\";\nimport { EditableRow, StaticRow } from \"../Trove/Editor\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { useStakingView } from \"./context/StakingViewContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst select = ({\n  lqtyBalance,\n  totalStakedLQTY\n}) => ({\n  lqtyBalance,\n  totalStakedLQTY\n});\n\nexport const StakingEditor = ({\n  children,\n  title,\n  originalStake,\n  editedLQTY,\n  dispatch\n}) => {\n  _s();\n\n  const {\n    lqtyBalance,\n    totalStakedLQTY\n  } = useLiquitySelector(select);\n  const {\n    changePending\n  } = useStakingView();\n  const editingState = useState();\n  const edited = !editedLQTY.eq(originalStake.stakedLQTY);\n  const maxAmount = originalStake.stakedLQTY.add(lqtyBalance);\n  const maxedOut = editedLQTY.eq(maxAmount);\n  const totalStakedLQTYAfterChange = totalStakedLQTY.sub(originalStake.stakedLQTY).add(editedLQTY);\n  const originalPoolShare = originalStake.stakedLQTY.mulDiv(100, totalStakedLQTY);\n  const newPoolShare = editedLQTY.mulDiv(100, totalStakedLQTYAfterChange);\n  const poolShareChange = originalStake.stakedLQTY.nonZero && Difference.between(newPoolShare, originalPoolShare).nonZero;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      children: [title, edited && !changePending && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"titleIcon\",\n        sx: {\n          \":enabled:hover\": {\n            color: \"danger\"\n          }\n        },\n        onClick: () => dispatch({\n          type: \"revert\"\n        }),\n        children: /*#__PURE__*/_jsxDEV(Icon, {\n          name: \"history\",\n          size: \"lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: [2, 3]\n      },\n      children: [/*#__PURE__*/_jsxDEV(EditableRow, {\n        label: \"Stake\",\n        inputId: \"stake-lqty\",\n        amount: editedLQTY.prettify(),\n        maxAmount: maxAmount.toString(),\n        maxedOut: maxedOut,\n        unit: GT,\n        editingState,\n        editedAmount: editedLQTY.toString(2),\n        setEditedAmount: newValue => dispatch({\n          type: \"setStake\",\n          newValue\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), newPoolShare.infinite ? /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Pool share\",\n        inputId: \"stake-share\",\n        amount: \"N/A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Pool share\",\n        inputId: \"stake-share\",\n        amount: newPoolShare.prettify(4),\n        pendingAmount: poolShareChange === null || poolShareChange === void 0 ? void 0 : poolShareChange.prettify(4).concat(\"%\"),\n        pendingColor: (poolShareChange === null || poolShareChange === void 0 ? void 0 : poolShareChange.positive) ? \"success\" : \"danger\",\n        unit: \"%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), !originalStake.isEmpty && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(StaticRow, {\n          label: \"Redemption gain\",\n          inputId: \"stake-gain-eth\",\n          amount: originalStake.collateralGain.prettify(4),\n          color: originalStake.collateralGain.nonZero && \"success\",\n          unit: \"ETH\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StaticRow, {\n          label: \"Issuance gain\",\n          inputId: \"stake-gain-lusd\",\n          amount: originalStake.lusdGain.prettify(),\n          color: originalStake.lusdGain.nonZero && \"success\",\n          unit: COIN\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), changePending && /*#__PURE__*/_jsxDEV(LoadingOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StakingEditor, \"TgoeDByPYaHXhzu8r/DlxdWV2pM=\", false, function () {\n  return [useLiquitySelector, useStakingView];\n});\n\n_c = StakingEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakingEditor\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Staking/StakingEditor.tsx"],"names":["React","useState","Heading","Box","Card","Button","Difference","useLiquitySelector","COIN","GT","Icon","EditableRow","StaticRow","LoadingOverlay","useStakingView","select","lqtyBalance","totalStakedLQTY","StakingEditor","children","title","originalStake","editedLQTY","dispatch","changePending","editingState","edited","eq","stakedLQTY","maxAmount","add","maxedOut","totalStakedLQTYAfterChange","sub","originalPoolShare","mulDiv","newPoolShare","poolShareChange","nonZero","between","color","type","p","prettify","toString","newValue","infinite","concat","positive","isEmpty","collateralGain","lusdGain"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Heading, Box, Card, Button } from \"theme-ui\";\n\nimport { Decimal, Decimalish, Difference, LiquityStoreState, LQTYStake } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\n\nimport { COIN, GT } from \"../../strings\";\n\nimport { Icon } from \"../Icon\";\nimport { EditableRow, StaticRow } from \"../Trove/Editor\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\n\nimport { useStakingView } from \"./context/StakingViewContext\";\n\nconst select = ({ lqtyBalance, totalStakedLQTY }: LiquityStoreState) => ({\n  lqtyBalance,\n  totalStakedLQTY\n});\n\ntype StakingEditorProps = {\n  title: string;\n  originalStake: LQTYStake;\n  editedLQTY: Decimal;\n  dispatch: (action: { type: \"setStake\"; newValue: Decimalish } | { type: \"revert\" }) => void;\n};\n\nexport const StakingEditor: React.FC<StakingEditorProps> = ({\n  children,\n  title,\n  originalStake,\n  editedLQTY,\n  dispatch\n}) => {\n  const { lqtyBalance, totalStakedLQTY } = useLiquitySelector(select);\n  const { changePending } = useStakingView();\n  const editingState = useState<string>();\n\n  const edited = !editedLQTY.eq(originalStake.stakedLQTY);\n\n  const maxAmount = originalStake.stakedLQTY.add(lqtyBalance);\n  const maxedOut = editedLQTY.eq(maxAmount);\n\n  const totalStakedLQTYAfterChange = totalStakedLQTY.sub(originalStake.stakedLQTY).add(editedLQTY);\n\n  const originalPoolShare = originalStake.stakedLQTY.mulDiv(100, totalStakedLQTY);\n  const newPoolShare = editedLQTY.mulDiv(100, totalStakedLQTYAfterChange);\n  const poolShareChange =\n    originalStake.stakedLQTY.nonZero && Difference.between(newPoolShare, originalPoolShare).nonZero;\n\n  return (\n    <Card>\n      <Heading>\n        {title}\n        {edited && !changePending && (\n          <Button\n            variant=\"titleIcon\"\n            sx={{ \":enabled:hover\": { color: \"danger\" } }}\n            onClick={() => dispatch({ type: \"revert\" })}\n          >\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Stake\"\n          inputId=\"stake-lqty\"\n          amount={editedLQTY.prettify()}\n          maxAmount={maxAmount.toString()}\n          maxedOut={maxedOut}\n          unit={GT}\n          {...{ editingState }}\n          editedAmount={editedLQTY.toString(2)}\n          setEditedAmount={newValue => dispatch({ type: \"setStake\", newValue })}\n        />\n\n        {newPoolShare.infinite ? (\n          <StaticRow label=\"Pool share\" inputId=\"stake-share\" amount=\"N/A\" />\n        ) : (\n          <StaticRow\n            label=\"Pool share\"\n            inputId=\"stake-share\"\n            amount={newPoolShare.prettify(4)}\n            pendingAmount={poolShareChange?.prettify(4).concat(\"%\")}\n            pendingColor={poolShareChange?.positive ? \"success\" : \"danger\"}\n            unit=\"%\"\n          />\n        )}\n\n        {!originalStake.isEmpty && (\n          <>\n            <StaticRow\n              label=\"Redemption gain\"\n              inputId=\"stake-gain-eth\"\n              amount={originalStake.collateralGain.prettify(4)}\n              color={originalStake.collateralGain.nonZero && \"success\"}\n              unit=\"ETH\"\n            />\n\n            <StaticRow\n              label=\"Issuance gain\"\n              inputId=\"stake-gain-lusd\"\n              amount={originalStake.lusdGain.prettify()}\n              color={originalStake.lusdGain.nonZero && \"success\"}\n              unit={COIN}\n            />\n          </>\n        )}\n\n        {children}\n      </Box>\n\n      {changePending && <LoadingOverlay />}\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}