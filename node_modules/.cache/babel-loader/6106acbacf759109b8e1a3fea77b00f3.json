{"ast":null,"code":"import{Decimal}from\"@liquity/lib-base\";import{useLiquitySelector}from\"@liquity/lib-react\";var selector=function selector(_ref){var uniTokenBalance=_ref.uniTokenBalance,uniTokenAllowance=_ref.uniTokenAllowance,liquidityMiningStake=_ref.liquidityMiningStake;return{uniTokenBalance:uniTokenBalance,uniTokenAllowance:uniTokenAllowance,liquidityMiningStake:liquidityMiningStake};};export var useValidationState=function useValidationState(amount){var _useLiquitySelector=useLiquitySelector(selector),uniTokenBalance=_useLiquitySelector.uniTokenBalance,uniTokenAllowance=_useLiquitySelector.uniTokenAllowance,liquidityMiningStake=_useLiquitySelector.liquidityMiningStake;var isWithdrawing=liquidityMiningStake.gt(amount);var amountChanged=isWithdrawing?liquidityMiningStake.sub(amount):Decimal.from(amount).sub(liquidityMiningStake);var maximumStake=liquidityMiningStake.add(uniTokenBalance);var hasSetMaximumStake=amount.eq(maximumStake);if(isWithdrawing){return{isValid:true,hasApproved:true,hasEnoughUniToken:true,isWithdrawing:isWithdrawing,amountChanged:amountChanged,maximumStake:maximumStake,hasSetMaximumStake:hasSetMaximumStake};}var hasApproved=!uniTokenAllowance.isZero&&uniTokenAllowance.gte(amountChanged);var hasEnoughUniToken=!uniTokenBalance.isZero&&uniTokenBalance.gte(amountChanged);return{isValid:hasApproved&&hasEnoughUniToken,hasApproved:hasApproved,hasEnoughUniToken:hasEnoughUniToken,isWithdrawing:isWithdrawing,amountChanged:amountChanged,maximumStake:maximumStake,hasSetMaximumStake:hasSetMaximumStake};};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Farm/context/useValidationState.ts"],"names":["Decimal","useLiquitySelector","selector","uniTokenBalance","uniTokenAllowance","liquidityMiningStake","useValidationState","amount","isWithdrawing","gt","amountChanged","sub","from","maximumStake","add","hasSetMaximumStake","eq","isValid","hasApproved","hasEnoughUniToken","isZero","gte"],"mappings":"AAAA,OAASA,OAAT,KAA2C,mBAA3C,CACA,OAASC,kBAAT,KAAmC,oBAAnC,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,UACfC,CAAAA,eADe,MACfA,eADe,CAEfC,iBAFe,MAEfA,iBAFe,CAGfC,oBAHe,MAGfA,oBAHe,OAIS,CACxBF,eAAe,CAAfA,eADwB,CAExBC,iBAAiB,CAAjBA,iBAFwB,CAGxBC,oBAAoB,CAApBA,oBAHwB,CAJT,EAAjB,CAoBA,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,MAAD,CAA0C,yBACLN,kBAAkB,CAACC,QAAD,CADb,CAClEC,eADkE,qBAClEA,eADkE,CACjDC,iBADiD,qBACjDA,iBADiD,CAC9BC,oBAD8B,qBAC9BA,oBAD8B,CAE1E,GAAMG,CAAAA,aAAa,CAAGH,oBAAoB,CAACI,EAArB,CAAwBF,MAAxB,CAAtB,CACA,GAAMG,CAAAA,aAAa,CAAGF,aAAa,CAC/BH,oBAAoB,CAACM,GAArB,CAAyBJ,MAAzB,CAD+B,CAE/BP,OAAO,CAACY,IAAR,CAAaL,MAAb,EAAqBI,GAArB,CAAyBN,oBAAzB,CAFJ,CAGA,GAAMQ,CAAAA,YAAY,CAAGR,oBAAoB,CAACS,GAArB,CAAyBX,eAAzB,CAArB,CACA,GAAMY,CAAAA,kBAAkB,CAAGR,MAAM,CAACS,EAAP,CAAUH,YAAV,CAA3B,CAEA,GAAIL,aAAJ,CAAmB,CACjB,MAAO,CACLS,OAAO,CAAE,IADJ,CAELC,WAAW,CAAE,IAFR,CAGLC,iBAAiB,CAAE,IAHd,CAILX,aAAa,CAAbA,aAJK,CAKLE,aAAa,CAAbA,aALK,CAMLG,YAAY,CAAZA,YANK,CAOLE,kBAAkB,CAAlBA,kBAPK,CAAP,CASD,CAED,GAAMG,CAAAA,WAAW,CAAG,CAACd,iBAAiB,CAACgB,MAAnB,EAA6BhB,iBAAiB,CAACiB,GAAlB,CAAsBX,aAAtB,CAAjD,CACA,GAAMS,CAAAA,iBAAiB,CAAG,CAAChB,eAAe,CAACiB,MAAjB,EAA2BjB,eAAe,CAACkB,GAAhB,CAAoBX,aAApB,CAArD,CAEA,MAAO,CACLO,OAAO,CAAEC,WAAW,EAAIC,iBADnB,CAELD,WAAW,CAAXA,WAFK,CAGLC,iBAAiB,CAAjBA,iBAHK,CAILX,aAAa,CAAbA,aAJK,CAKLE,aAAa,CAAbA,aALK,CAMLG,YAAY,CAAZA,YANK,CAOLE,kBAAkB,CAAlBA,kBAPK,CAAP,CASD,CAjCM","sourcesContent":["import { Decimal, LiquityStoreState } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\n\nconst selector = ({\n  uniTokenBalance,\n  uniTokenAllowance,\n  liquidityMiningStake\n}: LiquityStoreState) => ({\n  uniTokenBalance,\n  uniTokenAllowance,\n  liquidityMiningStake\n});\n\ntype FarmStakeValidation = {\n  isValid: boolean;\n  hasApproved: boolean;\n  hasEnoughUniToken: boolean;\n  isWithdrawing: boolean;\n  amountChanged: Decimal;\n  maximumStake: Decimal;\n  hasSetMaximumStake: boolean;\n};\n\nexport const useValidationState = (amount: Decimal): FarmStakeValidation => {\n  const { uniTokenBalance, uniTokenAllowance, liquidityMiningStake } = useLiquitySelector(selector);\n  const isWithdrawing = liquidityMiningStake.gt(amount);\n  const amountChanged = isWithdrawing\n    ? liquidityMiningStake.sub(amount)\n    : Decimal.from(amount).sub(liquidityMiningStake);\n  const maximumStake = liquidityMiningStake.add(uniTokenBalance);\n  const hasSetMaximumStake = amount.eq(maximumStake);\n\n  if (isWithdrawing) {\n    return {\n      isValid: true,\n      hasApproved: true,\n      hasEnoughUniToken: true,\n      isWithdrawing,\n      amountChanged,\n      maximumStake,\n      hasSetMaximumStake\n    };\n  }\n\n  const hasApproved = !uniTokenAllowance.isZero && uniTokenAllowance.gte(amountChanged);\n  const hasEnoughUniToken = !uniTokenBalance.isZero && uniTokenBalance.gte(amountChanged);\n\n  return {\n    isValid: hasApproved && hasEnoughUniToken,\n    hasApproved,\n    hasEnoughUniToken,\n    isWithdrawing,\n    amountChanged,\n    maximumStake,\n    hasSetMaximumStake\n  };\n};\n"]},"metadata":{},"sourceType":"module"}