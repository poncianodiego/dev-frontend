{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StabilityDeposit = void 0;\n\nconst Decimal_1 = require(\"./Decimal\");\n/**\n * A Stability Deposit and its accrued gains.\n *\n * @public\n */\n\n\nclass StabilityDeposit {\n  /** @internal */\n  constructor(initialLUSD, currentLUSD, collateralGain, lqtyReward, frontendTag) {\n    this.initialLUSD = initialLUSD;\n    this.currentLUSD = currentLUSD;\n    this.collateralGain = collateralGain;\n    this.lqtyReward = lqtyReward;\n    this.frontendTag = frontendTag;\n\n    if (this.currentLUSD.gt(this.initialLUSD)) {\n      throw new Error(\"currentLUSD can't be greater than initialLUSD\");\n    }\n  }\n\n  get isEmpty() {\n    return this.initialLUSD.isZero && this.currentLUSD.isZero && this.collateralGain.isZero && this.lqtyReward.isZero;\n  }\n  /** @internal */\n\n\n  toString() {\n    return `{ initialLUSD: ${this.initialLUSD}` + `, currentLUSD: ${this.currentLUSD}` + `, collateralGain: ${this.collateralGain}` + `, lqtyReward: ${this.lqtyReward}` + `, frontendTag: \"${this.frontendTag}\" }`;\n  }\n  /**\n   * Compare to another instance of `StabilityDeposit`.\n   */\n\n\n  equals(that) {\n    return this.initialLUSD.eq(that.initialLUSD) && this.currentLUSD.eq(that.currentLUSD) && this.collateralGain.eq(that.collateralGain) && this.lqtyReward.eq(that.lqtyReward) && this.frontendTag === that.frontendTag;\n  }\n  /**\n   * Calculate the difference between the `currentLUSD` in this Stability Deposit and `thatLUSD`.\n   *\n   * @returns An object representing the change, or `undefined` if the deposited amounts are equal.\n   */\n\n\n  whatChanged(thatLUSD) {\n    thatLUSD = Decimal_1.Decimal.from(thatLUSD);\n\n    if (thatLUSD.lt(this.currentLUSD)) {\n      return {\n        withdrawLUSD: this.currentLUSD.sub(thatLUSD),\n        withdrawAllLUSD: thatLUSD.isZero\n      };\n    }\n\n    if (thatLUSD.gt(this.currentLUSD)) {\n      return {\n        depositLUSD: thatLUSD.sub(this.currentLUSD)\n      };\n    }\n  }\n  /**\n   * Apply a {@link StabilityDepositChange} to this Stability Deposit.\n   *\n   * @returns The new deposited LUSD amount.\n   */\n\n\n  apply(change) {\n    if (!change) {\n      return this.currentLUSD;\n    }\n\n    if (change.withdrawLUSD !== undefined) {\n      return change.withdrawAllLUSD || this.currentLUSD.lte(change.withdrawLUSD) ? Decimal_1.Decimal.ZERO : this.currentLUSD.sub(change.withdrawLUSD);\n    } else {\n      return this.currentLUSD.add(change.depositLUSD);\n    }\n  }\n\n}\n\nexports.StabilityDeposit = StabilityDeposit;","map":{"version":3,"sources":["../../src/StabilityDeposit.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAWA;;;;AAIG;;;AACH,MAAa,gBAAb,CAA6B;AAsB3B;AACA,EAAA,WAAA,CACE,WADF,EAEE,WAFF,EAGE,cAHF,EAIE,UAJF,EAKE,WALF,EAKqB;AAEnB,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,cAAL,GAAsB,cAAtB;AACA,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,WAAL,GAAmB,WAAnB;;AAEA,QAAI,KAAK,WAAL,CAAiB,EAAjB,CAAoB,KAAK,WAAzB,CAAJ,EAA2C;AACzC,YAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACD;AACF;;AAEU,MAAP,OAAO,GAAA;AACT,WACE,KAAK,WAAL,CAAiB,MAAjB,IACA,KAAK,WAAL,CAAiB,MADjB,IAEA,KAAK,cAAL,CAAoB,MAFpB,IAGA,KAAK,UAAL,CAAgB,MAJlB;AAMD;AAED;;;AACA,EAAA,QAAQ,GAAA;AACN,WACE,kBAAkB,KAAK,WAAW,EAAlC,GACA,kBAAkB,KAAK,WAAW,EADlC,GAEA,qBAAqB,KAAK,cAAc,EAFxC,GAGA,iBAAiB,KAAK,UAAU,EAHhC,GAIA,mBAAmB,KAAK,WAAW,KALrC;AAOD;AAED;;AAEG;;;AACH,EAAA,MAAM,CAAC,IAAD,EAAuB;AAC3B,WACE,KAAK,WAAL,CAAiB,EAAjB,CAAoB,IAAI,CAAC,WAAzB,KACA,KAAK,WAAL,CAAiB,EAAjB,CAAoB,IAAI,CAAC,WAAzB,CADA,IAEA,KAAK,cAAL,CAAoB,EAApB,CAAuB,IAAI,CAAC,cAA5B,CAFA,IAGA,KAAK,UAAL,CAAgB,EAAhB,CAAmB,IAAI,CAAC,UAAxB,CAHA,IAIA,KAAK,WAAL,KAAqB,IAAI,CAAC,WAL5B;AAOD;AAED;;;;AAIG;;;AACH,EAAA,WAAW,CAAC,QAAD,EAAqB;AAC9B,IAAA,QAAQ,GAAG,SAAA,CAAA,OAAA,CAAQ,IAAR,CAAa,QAAb,CAAX;;AAEA,QAAI,QAAQ,CAAC,EAAT,CAAY,KAAK,WAAjB,CAAJ,EAAmC;AACjC,aAAO;AAAE,QAAA,YAAY,EAAE,KAAK,WAAL,CAAiB,GAAjB,CAAqB,QAArB,CAAhB;AAAgD,QAAA,eAAe,EAAE,QAAQ,CAAC;AAA1E,OAAP;AACD;;AAED,QAAI,QAAQ,CAAC,EAAT,CAAY,KAAK,WAAjB,CAAJ,EAAmC;AACjC,aAAO;AAAE,QAAA,WAAW,EAAE,QAAQ,CAAC,GAAT,CAAa,KAAK,WAAlB;AAAf,OAAP;AACD;AACF;AAED;;;;AAIG;;;AACH,EAAA,KAAK,CAAC,MAAD,EAAuD;AAC1D,QAAI,CAAC,MAAL,EAAa;AACX,aAAO,KAAK,WAAZ;AACD;;AAED,QAAI,MAAM,CAAC,YAAP,KAAwB,SAA5B,EAAuC;AACrC,aAAO,MAAM,CAAC,eAAP,IAA0B,KAAK,WAAL,CAAiB,GAAjB,CAAqB,MAAM,CAAC,YAA5B,CAA1B,GACH,SAAA,CAAA,OAAA,CAAQ,IADL,GAEH,KAAK,WAAL,CAAiB,GAAjB,CAAqB,MAAM,CAAC,YAA5B,CAFJ;AAGD,KAJD,MAIO;AACL,aAAO,KAAK,WAAL,CAAiB,GAAjB,CAAqB,MAAM,CAAC,WAA5B,CAAP;AACD;AACF;;AA5G0B;;AAA7B,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StabilityDeposit = void 0;\nconst Decimal_1 = require(\"./Decimal\");\n/**\n * A Stability Deposit and its accrued gains.\n *\n * @public\n */\nclass StabilityDeposit {\n    /** @internal */\n    constructor(initialLUSD, currentLUSD, collateralGain, lqtyReward, frontendTag) {\n        this.initialLUSD = initialLUSD;\n        this.currentLUSD = currentLUSD;\n        this.collateralGain = collateralGain;\n        this.lqtyReward = lqtyReward;\n        this.frontendTag = frontendTag;\n        if (this.currentLUSD.gt(this.initialLUSD)) {\n            throw new Error(\"currentLUSD can't be greater than initialLUSD\");\n        }\n    }\n    get isEmpty() {\n        return (this.initialLUSD.isZero &&\n            this.currentLUSD.isZero &&\n            this.collateralGain.isZero &&\n            this.lqtyReward.isZero);\n    }\n    /** @internal */\n    toString() {\n        return (`{ initialLUSD: ${this.initialLUSD}` +\n            `, currentLUSD: ${this.currentLUSD}` +\n            `, collateralGain: ${this.collateralGain}` +\n            `, lqtyReward: ${this.lqtyReward}` +\n            `, frontendTag: \"${this.frontendTag}\" }`);\n    }\n    /**\n     * Compare to another instance of `StabilityDeposit`.\n     */\n    equals(that) {\n        return (this.initialLUSD.eq(that.initialLUSD) &&\n            this.currentLUSD.eq(that.currentLUSD) &&\n            this.collateralGain.eq(that.collateralGain) &&\n            this.lqtyReward.eq(that.lqtyReward) &&\n            this.frontendTag === that.frontendTag);\n    }\n    /**\n     * Calculate the difference between the `currentLUSD` in this Stability Deposit and `thatLUSD`.\n     *\n     * @returns An object representing the change, or `undefined` if the deposited amounts are equal.\n     */\n    whatChanged(thatLUSD) {\n        thatLUSD = Decimal_1.Decimal.from(thatLUSD);\n        if (thatLUSD.lt(this.currentLUSD)) {\n            return { withdrawLUSD: this.currentLUSD.sub(thatLUSD), withdrawAllLUSD: thatLUSD.isZero };\n        }\n        if (thatLUSD.gt(this.currentLUSD)) {\n            return { depositLUSD: thatLUSD.sub(this.currentLUSD) };\n        }\n    }\n    /**\n     * Apply a {@link StabilityDepositChange} to this Stability Deposit.\n     *\n     * @returns The new deposited LUSD amount.\n     */\n    apply(change) {\n        if (!change) {\n            return this.currentLUSD;\n        }\n        if (change.withdrawLUSD !== undefined) {\n            return change.withdrawAllLUSD || this.currentLUSD.lte(change.withdrawLUSD)\n                ? Decimal_1.Decimal.ZERO\n                : this.currentLUSD.sub(change.withdrawLUSD);\n        }\n        else {\n            return this.currentLUSD.add(change.depositLUSD);\n        }\n    }\n}\nexports.StabilityDeposit = StabilityDeposit;\n//# sourceMappingURL=StabilityDeposit.js.map"]},"metadata":{},"sourceType":"script"}