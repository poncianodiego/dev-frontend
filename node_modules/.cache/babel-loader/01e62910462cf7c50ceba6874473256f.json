{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Staking/StakingManager.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button, Flex } from \"theme-ui\";\nimport { Decimal } from \"@liquity/lib-base\";\nimport { useLiquityReducer, useLiquitySelector } from \"@liquity/lib-react\";\nimport { GT, COIN } from \"../../strings\";\nimport { useStakingView } from \"./context/StakingViewContext\";\nimport { StakingEditor } from \"./StakingEditor\";\nimport { StakingManagerAction } from \"./StakingManagerAction\";\nimport { ActionDescription, Amount } from \"../ActionDescription\";\nimport { ErrorDescription } from \"../ErrorDescription\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst init = ({\n  lqtyStake\n}) => ({\n  originalStake: lqtyStake,\n  editedLQTY: lqtyStake.stakedLQTY\n});\n\nconst reduce = (state, action) => {\n  // console.log(state);\n  // console.log(action);\n  const {\n    originalStake,\n    editedLQTY\n  } = state;\n\n  switch (action.type) {\n    case \"setStake\":\n      return { ...state,\n        editedLQTY: Decimal.from(action.newValue)\n      };\n\n    case \"revert\":\n      return { ...state,\n        editedLQTY: originalStake.stakedLQTY\n      };\n\n    case \"updateStore\":\n      {\n        const {\n          stateChange: {\n            lqtyStake: updatedStake\n          }\n        } = action;\n\n        if (updatedStake) {\n          return {\n            originalStake: updatedStake,\n            editedLQTY: updatedStake.apply(originalStake.whatChanged(editedLQTY))\n          };\n        }\n      }\n  }\n\n  return state;\n};\n\nconst selectLQTYBalance = ({\n  lqtyBalance\n}) => lqtyBalance;\n\nconst StakingManagerActionDescription = ({\n  originalStake,\n  change\n}) => {\n  var _change$stakeLQTY, _change$unstakeLQTY, _originalStake$collat, _originalStake$lusdGa;\n\n  const stakeLQTY = (_change$stakeLQTY = change.stakeLQTY) === null || _change$stakeLQTY === void 0 ? void 0 : _change$stakeLQTY.prettify().concat(\" \", GT);\n  const unstakeLQTY = (_change$unstakeLQTY = change.unstakeLQTY) === null || _change$unstakeLQTY === void 0 ? void 0 : _change$unstakeLQTY.prettify().concat(\" \", GT);\n  const collateralGain = (_originalStake$collat = originalStake.collateralGain.nonZero) === null || _originalStake$collat === void 0 ? void 0 : _originalStake$collat.prettify(4).concat(\" ETH\");\n  const lusdGain = (_originalStake$lusdGa = originalStake.lusdGain.nonZero) === null || _originalStake$lusdGa === void 0 ? void 0 : _originalStake$lusdGa.prettify().concat(\" \", COIN);\n\n  if (originalStake.isEmpty && stakeLQTY) {\n    return /*#__PURE__*/_jsxDEV(ActionDescription, {\n      children: [\"You are staking \", /*#__PURE__*/_jsxDEV(Amount, {\n        children: stakeLQTY\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ActionDescription, {\n    children: [stakeLQTY && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"You are adding \", /*#__PURE__*/_jsxDEV(Amount, {\n        children: stakeLQTY\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 26\n      }, this), \" to your stake\"]\n    }, void 0, true), unstakeLQTY && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"You are withdrawing \", /*#__PURE__*/_jsxDEV(Amount, {\n        children: unstakeLQTY\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 31\n      }, this), \" to your wallet\"]\n    }, void 0, true), (collateralGain || lusdGain) && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", \"and claiming\", \" \", collateralGain && lusdGain ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Amount, {\n          children: collateralGain\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(Amount, {\n          children: lusdGain\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 53\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Amount, {\n          children: collateralGain !== null && collateralGain !== void 0 ? collateralGain : lusdGain\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)]\n    }, void 0, true), \".\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_c = StakingManagerActionDescription;\nexport const StakingManager = () => {\n  _s();\n\n  var _change$stakeLQTY2;\n\n  const {\n    dispatch: dispatchStakingViewAction\n  } = useStakingView();\n  const [{\n    originalStake,\n    editedLQTY\n  }, dispatch] = useLiquityReducer(reduce, init);\n  const lqtyBalance = useLiquitySelector(selectLQTYBalance);\n  const change = originalStake.whatChanged(editedLQTY);\n  const [validChange, description] = !change ? [undefined, undefined] : ((_change$stakeLQTY2 = change.stakeLQTY) === null || _change$stakeLQTY2 === void 0 ? void 0 : _change$stakeLQTY2.gt(lqtyBalance)) ? [undefined, /*#__PURE__*/_jsxDEV(ErrorDescription, {\n    children: [\"The amount you're trying to stake exceeds your balance by\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [change.stakeLQTY.sub(lqtyBalance).prettify(), \" \", GT]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }, this), \".\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this)] : [change, /*#__PURE__*/_jsxDEV(StakingManagerActionDescription, {\n    originalStake: originalStake,\n    change: change\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 16\n  }, this)];\n  const makingNewStake = originalStake.isEmpty;\n  return /*#__PURE__*/_jsxDEV(StakingEditor, {\n    title: \"Staking\",\n    originalStake,\n    editedLQTY,\n    dispatch,\n    children: [description !== null && description !== void 0 ? description : makingNewStake ? /*#__PURE__*/_jsxDEV(ActionDescription, {\n      children: [\"Enter the amount of \", GT, \" you'd like to stake.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(ActionDescription, {\n      children: [\"Adjust the \", GT, \" amount to stake or withdraw.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      variant: \"layout.actions\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"cancel\",\n        onClick: () => dispatchStakingViewAction({\n          type: \"cancelAdjusting\"\n        }),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), validChange ? /*#__PURE__*/_jsxDEV(StakingManagerAction, {\n        change: validChange,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        disabled: true,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StakingManager, \"qlh9Cpz1laRzG6dmbhRDHSRzs5o=\", false, function () {\n  return [useStakingView, useLiquityReducer, useLiquitySelector];\n});\n\n_c2 = StakingManager;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StakingManagerActionDescription\");\n$RefreshReg$(_c2, \"StakingManager\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Staking/StakingManager.tsx"],"names":["React","Button","Flex","Decimal","useLiquityReducer","useLiquitySelector","GT","COIN","useStakingView","StakingEditor","StakingManagerAction","ActionDescription","Amount","ErrorDescription","init","lqtyStake","originalStake","editedLQTY","stakedLQTY","reduce","state","action","type","from","newValue","stateChange","updatedStake","apply","whatChanged","selectLQTYBalance","lqtyBalance","StakingManagerActionDescription","change","stakeLQTY","prettify","concat","unstakeLQTY","collateralGain","nonZero","lusdGain","isEmpty","StakingManager","dispatch","dispatchStakingViewAction","validChange","description","undefined","gt","sub","makingNewStake"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Flex } from \"theme-ui\";\n\nimport {\n  Decimal,\n  Decimalish,\n  LiquityStoreState,\n  LQTYStake,\n  LQTYStakeChange\n} from \"@liquity/lib-base\";\n\nimport { LiquityStoreUpdate, useLiquityReducer, useLiquitySelector } from \"@liquity/lib-react\";\n\nimport { GT, COIN } from \"../../strings\";\n\nimport { useStakingView } from \"./context/StakingViewContext\";\nimport { StakingEditor } from \"./StakingEditor\";\nimport { StakingManagerAction } from \"./StakingManagerAction\";\nimport { ActionDescription, Amount } from \"../ActionDescription\";\nimport { ErrorDescription } from \"../ErrorDescription\";\n\nconst init = ({ lqtyStake }: LiquityStoreState) => ({\n  originalStake: lqtyStake,\n  editedLQTY: lqtyStake.stakedLQTY\n});\n\ntype StakeManagerState = ReturnType<typeof init>;\ntype StakeManagerAction =\n  | LiquityStoreUpdate\n  | { type: \"revert\" }\n  | { type: \"setStake\"; newValue: Decimalish };\n\nconst reduce = (state: StakeManagerState, action: StakeManagerAction): StakeManagerState => {\n  // console.log(state);\n  // console.log(action);\n\n  const { originalStake, editedLQTY } = state;\n\n  switch (action.type) {\n    case \"setStake\":\n      return { ...state, editedLQTY: Decimal.from(action.newValue) };\n\n    case \"revert\":\n      return { ...state, editedLQTY: originalStake.stakedLQTY };\n\n    case \"updateStore\": {\n      const {\n        stateChange: { lqtyStake: updatedStake }\n      } = action;\n\n      if (updatedStake) {\n        return {\n          originalStake: updatedStake,\n          editedLQTY: updatedStake.apply(originalStake.whatChanged(editedLQTY))\n        };\n      }\n    }\n  }\n\n  return state;\n};\n\nconst selectLQTYBalance = ({ lqtyBalance }: LiquityStoreState) => lqtyBalance;\n\ntype StakingManagerActionDescriptionProps = {\n  originalStake: LQTYStake;\n  change: LQTYStakeChange<Decimal>;\n};\n\nconst StakingManagerActionDescription: React.FC<StakingManagerActionDescriptionProps> = ({\n  originalStake,\n  change\n}) => {\n  const stakeLQTY = change.stakeLQTY?.prettify().concat(\" \", GT);\n  const unstakeLQTY = change.unstakeLQTY?.prettify().concat(\" \", GT);\n  const collateralGain = originalStake.collateralGain.nonZero?.prettify(4).concat(\" ETH\");\n  const lusdGain = originalStake.lusdGain.nonZero?.prettify().concat(\" \", COIN);\n\n  if (originalStake.isEmpty && stakeLQTY) {\n    return (\n      <ActionDescription>\n        You are staking <Amount>{stakeLQTY}</Amount>.\n      </ActionDescription>\n    );\n  }\n\n  return (\n    <ActionDescription>\n      {stakeLQTY && (\n        <>\n          You are adding <Amount>{stakeLQTY}</Amount> to your stake\n        </>\n      )}\n      {unstakeLQTY && (\n        <>\n          You are withdrawing <Amount>{unstakeLQTY}</Amount> to your wallet\n        </>\n      )}\n      {(collateralGain || lusdGain) && (\n        <>\n          {\" \"}\n          and claiming{\" \"}\n          {collateralGain && lusdGain ? (\n            <>\n              <Amount>{collateralGain}</Amount> and <Amount>{lusdGain}</Amount>\n            </>\n          ) : (\n            <>\n              <Amount>{collateralGain ?? lusdGain}</Amount>\n            </>\n          )}\n        </>\n      )}\n      .\n    </ActionDescription>\n  );\n};\n\nexport const StakingManager: React.FC = () => {\n  const { dispatch: dispatchStakingViewAction } = useStakingView();\n  const [{ originalStake, editedLQTY }, dispatch] = useLiquityReducer(reduce, init);\n  const lqtyBalance = useLiquitySelector(selectLQTYBalance);\n\n  const change = originalStake.whatChanged(editedLQTY);\n  const [validChange, description] = !change\n    ? [undefined, undefined]\n    : change.stakeLQTY?.gt(lqtyBalance)\n    ? [\n        undefined,\n        <ErrorDescription>\n          The amount you're trying to stake exceeds your balance by{\" \"}\n          <Amount>\n            {change.stakeLQTY.sub(lqtyBalance).prettify()} {GT}\n          </Amount>\n          .\n        </ErrorDescription>\n      ]\n    : [change, <StakingManagerActionDescription originalStake={originalStake} change={change} />];\n\n  const makingNewStake = originalStake.isEmpty;\n\n  return (\n    <StakingEditor title={\"Staking\"} {...{ originalStake, editedLQTY, dispatch }}>\n      {description ??\n        (makingNewStake ? (\n          <ActionDescription>Enter the amount of {GT} you'd like to stake.</ActionDescription>\n        ) : (\n          <ActionDescription>Adjust the {GT} amount to stake or withdraw.</ActionDescription>\n        ))}\n\n      <Flex variant=\"layout.actions\">\n        <Button\n          variant=\"cancel\"\n          onClick={() => dispatchStakingViewAction({ type: \"cancelAdjusting\" })}\n        >\n          Cancel\n        </Button>\n\n        {validChange ? (\n          <StakingManagerAction change={validChange}>Confirm</StakingManagerAction>\n        ) : (\n          <Button disabled>Confirm</Button>\n        )}\n      </Flex>\n    </StakingEditor>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}