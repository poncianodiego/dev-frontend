{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injectedConnector } from \"../connectors/injectedConnector\";\n/**\n * React hook that tries to activate the InjectedConnector if the app's already authorized in the\n * browser's wallet (in the case of dApp-enabled browsers) or its wallet extension (e.g. MetaMask).\n *\n * Example: user has a browser with the MetaMask extension. MetaMask injects an Ethereum provider\n * into the window object. We check via InjectedConnector if our app is already authorized to use\n * the wallet through this provider, and in that case we try to activate the connector.\n *\n * @returns true when finished trying to activate the InjectedConnector, false otherwise\n */\n\nexport function useAuthorizedConnection() {\n  _s();\n\n  const {\n    activate,\n    active\n  } = useWeb3React();\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    const tryToActivateIfAuthorized = async () => {\n      try {\n        if (await injectedConnector.isAuthorized()) {\n          await activate(injectedConnector, undefined, true);\n        } else {\n          throw new Error(\"Unauthorized\");\n        }\n      } catch {\n        setTried(true);\n      }\n    };\n\n    tryToActivateIfAuthorized();\n  }, [activate]);\n  useEffect(() => {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n  return tried;\n}\n\n_s(useAuthorizedConnection, \"GLh+9ege4oFDiozdAF2n3i5tC+o=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/hooks/useAuthorizedConnection.ts"],"names":["useState","useEffect","useWeb3React","injectedConnector","useAuthorizedConnection","activate","active","tried","setTried","tryToActivateIfAuthorized","isAuthorized","undefined","Error"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAASC,iBAAT,QAAkC,iCAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,uBAAT,GAA4C;AAAA;;AACjD,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuBJ,YAAY,EAAzC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,yBAAyB,GAAG,YAAY;AAC5C,UAAI;AACF,YAAI,MAAMN,iBAAiB,CAACO,YAAlB,EAAV,EAA4C;AAC1C,gBAAML,QAAQ,CAACF,iBAAD,EAAoBQ,SAApB,EAA+B,IAA/B,CAAd;AACD,SAFD,MAEO;AACL,gBAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AACD;AACF,OAND,CAME,MAAM;AACNJ,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,KAVD;;AAWAC,IAAAA,yBAAyB;AAC1B,GAbQ,EAaN,CAACJ,QAAD,CAbM,CAAT;AAeAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,MAAJ,EAAY;AACVE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACF,MAAD,CAJM,CAAT;AAMA,SAAOC,KAAP;AACD;;GA1BeH,uB;UACeF,Y","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { injectedConnector } from \"../connectors/injectedConnector\";\n\n/**\n * React hook that tries to activate the InjectedConnector if the app's already authorized in the\n * browser's wallet (in the case of dApp-enabled browsers) or its wallet extension (e.g. MetaMask).\n *\n * Example: user has a browser with the MetaMask extension. MetaMask injects an Ethereum provider\n * into the window object. We check via InjectedConnector if our app is already authorized to use\n * the wallet through this provider, and in that case we try to activate the connector.\n *\n * @returns true when finished trying to activate the InjectedConnector, false otherwise\n */\n\nexport function useAuthorizedConnection(): boolean {\n  const { activate, active } = useWeb3React<unknown>();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    const tryToActivateIfAuthorized = async () => {\n      try {\n        if (await injectedConnector.isAuthorized()) {\n          await activate(injectedConnector, undefined, true);\n        } else {\n          throw new Error(\"Unauthorized\");\n        }\n      } catch {\n        setTried(true);\n      }\n    };\n    tryToActivateIfAuthorized();\n  }, [activate]);\n\n  useEffect(() => {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n\n  return tried;\n}\n"]},"metadata":{},"sourceType":"module"}