{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Redemption/RedemptionManager.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Box, Flex, Card, Heading } from \"theme-ui\";\nimport { Decimal, Percent, MINIMUM_COLLATERAL_RATIO } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { COIN } from \"../../strings\";\nimport { Icon } from \"../Icon\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { EditableRow, StaticRow } from \"../Trove/Editor\";\nimport { ActionDescription, Amount } from \"../ActionDescription\";\nimport { ErrorDescription } from \"../ErrorDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\nimport { RedemptionAction } from \"./RedemptionAction\";\nimport { InfoIcon } from \"../InfoIcon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mcrPercent = new Percent(MINIMUM_COLLATERAL_RATIO).toString(0);\n\nconst select = ({\n  price,\n  fees,\n  total,\n  lusdBalance\n}) => ({\n  price,\n  fees,\n  total,\n  lusdBalance\n});\n\nconst transactionId = \"redemption\";\nexport const RedemptionManager = () => {\n  _s();\n\n  const {\n    price,\n    fees,\n    total,\n    lusdBalance\n  } = useLiquitySelector(select);\n  const [lusdAmount, setLUSDAmount] = useState(Decimal.ZERO);\n  const [changePending, setChangePending] = useState(false);\n  const editingState = useState();\n  const dirty = !lusdAmount.isZero;\n  const ethAmount = lusdAmount.div(price);\n  const redemptionRate = fees.redemptionRate(lusdAmount.div(total.debt));\n  const feePct = new Percent(redemptionRate);\n  const ethFee = ethAmount.mul(redemptionRate);\n  const maxRedemptionRate = redemptionRate.add(0.001); // TODO slippage tolerance\n\n  const myTransactionState = useMyTransactionState(transactionId);\n  useEffect(() => {\n    if (myTransactionState.type === \"waitingForApproval\" || myTransactionState.type === \"waitingForConfirmation\") {\n      setChangePending(true);\n    } else if (myTransactionState.type === \"failed\" || myTransactionState.type === \"cancelled\") {\n      setChangePending(false);\n    } else if (myTransactionState.type === \"confirmed\") {\n      setLUSDAmount(Decimal.ZERO);\n      setChangePending(false);\n    }\n  }, [myTransactionState.type, setChangePending, setLUSDAmount]);\n  const [canRedeem, description] = total.collateralRatioIsBelowMinimum(price) ? [false, /*#__PURE__*/_jsxDEV(ErrorDescription, {\n    children: [\"You can't redeem LUSD when the total collateral ratio is less than\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: mcrPercent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }, this), \". Please try again later.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this)] : lusdAmount.gt(lusdBalance) ? [false, /*#__PURE__*/_jsxDEV(ErrorDescription, {\n    children: [\"The amount you're trying to redeem exceeds your balance by\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [lusdAmount.sub(lusdBalance).prettify(), \" \", COIN]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this), \".\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this)] : [true, /*#__PURE__*/_jsxDEV(ActionDescription, {\n    children: [\"You will receive \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [ethAmount.sub(ethFee).prettify(4), \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 28\n    }, this), \" in exchange for\", \" \", /*#__PURE__*/_jsxDEV(Amount, {\n      children: [lusdAmount.prettify(), \" \", COIN]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }, this), \".\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this)];\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      children: [\"Redeem\", dirty && !changePending && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"titleIcon\",\n        sx: {\n          \":enabled:hover\": {\n            color: \"danger\"\n          }\n        },\n        onClick: () => setLUSDAmount(Decimal.ZERO),\n        children: /*#__PURE__*/_jsxDEV(Icon, {\n          name: \"history\",\n          size: \"lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: [2, 3]\n      },\n      children: [/*#__PURE__*/_jsxDEV(EditableRow, {\n        label: \"Redeem\",\n        inputId: \"redeem-lusd\",\n        amount: lusdAmount.prettify(),\n        maxAmount: lusdBalance.toString(),\n        maxedOut: lusdAmount.eq(lusdBalance),\n        unit: COIN,\n        editingState,\n        editedAmount: lusdAmount.toString(2),\n        setEditedAmount: amount => setLUSDAmount(Decimal.from(amount))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StaticRow, {\n        label: \"Redemption Fee\",\n        inputId: \"redeem-fee\",\n        amount: ethFee.toString(4),\n        pendingAmount: feePct.toString(2),\n        unit: \"ETH\",\n        infoIcon: /*#__PURE__*/_jsxDEV(InfoIcon, {\n          tooltip: /*#__PURE__*/_jsxDEV(Card, {\n            variant: \"tooltip\",\n            sx: {\n              minWidth: \"240px\"\n            },\n            children: \"The Redemption Fee is charged as a percentage of the redeemed Ether. The Redemption Fee depends on LUSD redemption volumes and is 0.5% at minimum.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), (dirty || !canRedeem) && description || /*#__PURE__*/_jsxDEV(ActionDescription, {\n        children: [\"Enter the amount of \", COIN, \" you'd like to redeem.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        variant: \"layout.actions\",\n        children: /*#__PURE__*/_jsxDEV(RedemptionAction, {\n          transactionId: transactionId,\n          disabled: !dirty || !canRedeem,\n          lusdAmount: lusdAmount,\n          maxRedemptionRate: maxRedemptionRate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), changePending && /*#__PURE__*/_jsxDEV(LoadingOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RedemptionManager, \"Ju+U6TIvN6uclNEnfkiRorxHTOQ=\", false, function () {\n  return [useLiquitySelector, useMyTransactionState];\n});\n\n_c = RedemptionManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"RedemptionManager\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Redemption/RedemptionManager.tsx"],"names":["React","useEffect","useState","Button","Box","Flex","Card","Heading","Decimal","Percent","MINIMUM_COLLATERAL_RATIO","useLiquitySelector","COIN","Icon","LoadingOverlay","EditableRow","StaticRow","ActionDescription","Amount","ErrorDescription","useMyTransactionState","RedemptionAction","InfoIcon","mcrPercent","toString","select","price","fees","total","lusdBalance","transactionId","RedemptionManager","lusdAmount","setLUSDAmount","ZERO","changePending","setChangePending","editingState","dirty","isZero","ethAmount","div","redemptionRate","debt","feePct","ethFee","mul","maxRedemptionRate","add","myTransactionState","type","canRedeem","description","collateralRatioIsBelowMinimum","gt","sub","prettify","color","p","eq","amount","from","minWidth"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCC,OAAlC,QAAiD,UAAjD;AAEA,SAASC,OAAT,EAAkBC,OAAlB,EAA8CC,wBAA9C,QAA8E,mBAA9E;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AAEA,SAASC,IAAT,QAAqB,eAArB;AAEA,SAASC,IAAT,QAAqB,SAArB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,iBAAvC;AACA,SAASC,iBAAT,EAA4BC,MAA5B,QAA0C,sBAA1C;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,qBAAT,QAAsC,gBAAtC;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,MAAMC,UAAU,GAAG,IAAId,OAAJ,CAAYC,wBAAZ,EAAsCc,QAAtC,CAA+C,CAA/C,CAAnB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA,KAAf;AAAsBC,EAAAA;AAAtB,CAAD,MAA6D;AAC1EH,EAAAA,KAD0E;AAE1EC,EAAAA,IAF0E;AAG1EC,EAAAA,KAH0E;AAI1EC,EAAAA;AAJ0E,CAA7D,CAAf;;AAOA,MAAMC,aAAa,GAAG,YAAtB;AAEA,OAAO,MAAMC,iBAA2B,GAAG,MAAM;AAAA;;AAC/C,QAAM;AAAEL,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA;AAAtB,MAAsClB,kBAAkB,CAACc,MAAD,CAA9D;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8B/B,QAAQ,CAACM,OAAO,CAAC0B,IAAT,CAA5C;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoClC,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAMmC,YAAY,GAAGnC,QAAQ,EAA7B;AAEA,QAAMoC,KAAK,GAAG,CAACN,UAAU,CAACO,MAA1B;AACA,QAAMC,SAAS,GAAGR,UAAU,CAACS,GAAX,CAAef,KAAf,CAAlB;AACA,QAAMgB,cAAc,GAAGf,IAAI,CAACe,cAAL,CAAoBV,UAAU,CAACS,GAAX,CAAeb,KAAK,CAACe,IAArB,CAApB,CAAvB;AACA,QAAMC,MAAM,GAAG,IAAInC,OAAJ,CAAYiC,cAAZ,CAAf;AACA,QAAMG,MAAM,GAAGL,SAAS,CAACM,GAAV,CAAcJ,cAAd,CAAf;AACA,QAAMK,iBAAiB,GAAGL,cAAc,CAACM,GAAf,CAAmB,KAAnB,CAA1B,CAX+C,CAWM;;AAErD,QAAMC,kBAAkB,GAAG7B,qBAAqB,CAACU,aAAD,CAAhD;AAEA7B,EAAAA,SAAS,CAAC,MAAM;AACd,QACEgD,kBAAkB,CAACC,IAAnB,KAA4B,oBAA5B,IACAD,kBAAkB,CAACC,IAAnB,KAA4B,wBAF9B,EAGE;AACAd,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KALD,MAKO,IAAIa,kBAAkB,CAACC,IAAnB,KAA4B,QAA5B,IAAwCD,kBAAkB,CAACC,IAAnB,KAA4B,WAAxE,EAAqF;AAC1Fd,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,KAFM,MAEA,IAAIa,kBAAkB,CAACC,IAAnB,KAA4B,WAAhC,EAA6C;AAClDjB,MAAAA,aAAa,CAACzB,OAAO,CAAC0B,IAAT,CAAb;AACAE,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD;AACF,GAZQ,EAYN,CAACa,kBAAkB,CAACC,IAApB,EAA0Bd,gBAA1B,EAA4CH,aAA5C,CAZM,CAAT;AAcA,QAAM,CAACkB,SAAD,EAAYC,WAAZ,IAA2BxB,KAAK,CAACyB,6BAAN,CAAoC3B,KAApC,IAC7B,CACE,KADF,eAEE,QAAC,gBAAD;AAAA,qFACqE,GADrE,eAEE,QAAC,MAAD;AAAA,gBAASH;AAAT;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CAD6B,GAQ7BS,UAAU,CAACsB,EAAX,CAAczB,WAAd,IACA,CACE,KADF,eAEE,QAAC,gBAAD;AAAA,6EAC6D,GAD7D,eAEE,QAAC,MAAD;AAAA,iBACGG,UAAU,CAACuB,GAAX,CAAe1B,WAAf,EAA4B2B,QAA5B,EADH,OAC4C5C,IAD5C;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADA,GAWA,CACE,IADF,eAEE,QAAC,iBAAD;AAAA,iDACmB,QAAC,MAAD;AAAA,iBAAS4B,SAAS,CAACe,GAAV,CAAcV,MAAd,EAAsBW,QAAtB,CAA+B,CAA/B,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA,YADnB,sBAC4F,GAD5F,eAEE,QAAC,MAAD;AAAA,iBACGxB,UAAU,CAACwB,QAAX,EADH,OAC2B5C,IAD3B;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CAnBJ;AA8BA,sBACE,QAAC,IAAD;AAAA,4BACE,QAAC,OAAD;AAAA,2BAEG0B,KAAK,IAAI,CAACH,aAAV,iBACC,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,EAAE,EAAE;AAAE,4BAAkB;AAAEsB,YAAAA,KAAK,EAAE;AAAT;AAApB,SAFN;AAGE,QAAA,OAAO,EAAE,MAAMxB,aAAa,CAACzB,OAAO,CAAC0B,IAAT,CAH9B;AAAA,+BAKE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAC,SAAX;AAAqB,UAAA,IAAI,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAcE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAEwB,QAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAL,OAAT;AAAA,8BACE,QAAC,WAAD;AACE,QAAA,KAAK,EAAC,QADR;AAEE,QAAA,OAAO,EAAC,aAFV;AAGE,QAAA,MAAM,EAAE1B,UAAU,CAACwB,QAAX,EAHV;AAIE,QAAA,SAAS,EAAE3B,WAAW,CAACL,QAAZ,EAJb;AAKE,QAAA,QAAQ,EAAEQ,UAAU,CAAC2B,EAAX,CAAc9B,WAAd,CALZ;AAME,QAAA,IAAI,EAAEjB,IANR;AAOQyB,QAAAA,YAPR;AAQE,QAAA,YAAY,EAAEL,UAAU,CAACR,QAAX,CAAoB,CAApB,CARhB;AASE,QAAA,eAAe,EAAEoC,MAAM,IAAI3B,aAAa,CAACzB,OAAO,CAACqD,IAAR,CAAaD,MAAb,CAAD;AAT1C;AAAA;AAAA;AAAA;AAAA,cADF,eAaE,QAAC,SAAD;AACE,QAAA,KAAK,EAAC,gBADR;AAEE,QAAA,OAAO,EAAC,YAFV;AAGE,QAAA,MAAM,EAAEf,MAAM,CAACrB,QAAP,CAAgB,CAAhB,CAHV;AAIE,QAAA,aAAa,EAAEoB,MAAM,CAACpB,QAAP,CAAgB,CAAhB,CAJjB;AAKE,QAAA,IAAI,EAAC,KALP;AAME,QAAA,QAAQ,eACN,QAAC,QAAD;AACE,UAAA,OAAO,eACL,QAAC,IAAD;AAAM,YAAA,OAAO,EAAC,SAAd;AAAwB,YAAA,EAAE,EAAE;AAAEsC,cAAAA,QAAQ,EAAE;AAAZ,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,cAbF,EA+BI,CAACxB,KAAK,IAAI,CAACa,SAAX,KAAyBC,WAA1B,iBACC,QAAC,iBAAD;AAAA,2CAAwCxC,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,cAhCJ,eAmCE,QAAC,IAAD;AAAM,QAAA,OAAO,EAAC,gBAAd;AAAA,+BACE,QAAC,gBAAD;AACE,UAAA,aAAa,EAAEkB,aADjB;AAEE,UAAA,QAAQ,EAAE,CAACQ,KAAD,IAAU,CAACa,SAFvB;AAGE,UAAA,UAAU,EAAEnB,UAHd;AAIE,UAAA,iBAAiB,EAAEe;AAJrB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAnCF;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF,EA2DGZ,aAAa,iBAAI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YA3DpB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+DD,CA1HM;;GAAMJ,iB;UACiCpB,kB,EAYjBS,qB;;;KAbhBW,iB","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Box, Flex, Card, Heading } from \"theme-ui\";\n\nimport { Decimal, Percent, LiquityStoreState, MINIMUM_COLLATERAL_RATIO } from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\n\nimport { COIN } from \"../../strings\";\n\nimport { Icon } from \"../Icon\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { EditableRow, StaticRow } from \"../Trove/Editor\";\nimport { ActionDescription, Amount } from \"../ActionDescription\";\nimport { ErrorDescription } from \"../ErrorDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\n\nimport { RedemptionAction } from \"./RedemptionAction\";\nimport { InfoIcon } from \"../InfoIcon\";\n\nconst mcrPercent = new Percent(MINIMUM_COLLATERAL_RATIO).toString(0);\n\nconst select = ({ price, fees, total, lusdBalance }: LiquityStoreState) => ({\n  price,\n  fees,\n  total,\n  lusdBalance\n});\n\nconst transactionId = \"redemption\";\n\nexport const RedemptionManager: React.FC = () => {\n  const { price, fees, total, lusdBalance } = useLiquitySelector(select);\n  const [lusdAmount, setLUSDAmount] = useState(Decimal.ZERO);\n  const [changePending, setChangePending] = useState(false);\n  const editingState = useState<string>();\n\n  const dirty = !lusdAmount.isZero;\n  const ethAmount = lusdAmount.div(price);\n  const redemptionRate = fees.redemptionRate(lusdAmount.div(total.debt));\n  const feePct = new Percent(redemptionRate);\n  const ethFee = ethAmount.mul(redemptionRate);\n  const maxRedemptionRate = redemptionRate.add(0.001); // TODO slippage tolerance\n\n  const myTransactionState = useMyTransactionState(transactionId);\n\n  useEffect(() => {\n    if (\n      myTransactionState.type === \"waitingForApproval\" ||\n      myTransactionState.type === \"waitingForConfirmation\"\n    ) {\n      setChangePending(true);\n    } else if (myTransactionState.type === \"failed\" || myTransactionState.type === \"cancelled\") {\n      setChangePending(false);\n    } else if (myTransactionState.type === \"confirmed\") {\n      setLUSDAmount(Decimal.ZERO);\n      setChangePending(false);\n    }\n  }, [myTransactionState.type, setChangePending, setLUSDAmount]);\n\n  const [canRedeem, description] = total.collateralRatioIsBelowMinimum(price)\n    ? [\n        false,\n        <ErrorDescription>\n          You can't redeem LUSD when the total collateral ratio is less than{\" \"}\n          <Amount>{mcrPercent}</Amount>. Please try again later.\n        </ErrorDescription>\n      ]\n    : lusdAmount.gt(lusdBalance)\n    ? [\n        false,\n        <ErrorDescription>\n          The amount you're trying to redeem exceeds your balance by{\" \"}\n          <Amount>\n            {lusdAmount.sub(lusdBalance).prettify()} {COIN}\n          </Amount>\n          .\n        </ErrorDescription>\n      ]\n    : [\n        true,\n        <ActionDescription>\n          You will receive <Amount>{ethAmount.sub(ethFee).prettify(4)} ETH</Amount> in exchange for{\" \"}\n          <Amount>\n            {lusdAmount.prettify()} {COIN}\n          </Amount>\n          .\n        </ActionDescription>\n      ];\n\n  return (\n    <Card>\n      <Heading>\n        Redeem\n        {dirty && !changePending && (\n          <Button\n            variant=\"titleIcon\"\n            sx={{ \":enabled:hover\": { color: \"danger\" } }}\n            onClick={() => setLUSDAmount(Decimal.ZERO)}\n          >\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Redeem\"\n          inputId=\"redeem-lusd\"\n          amount={lusdAmount.prettify()}\n          maxAmount={lusdBalance.toString()}\n          maxedOut={lusdAmount.eq(lusdBalance)}\n          unit={COIN}\n          {...{ editingState }}\n          editedAmount={lusdAmount.toString(2)}\n          setEditedAmount={amount => setLUSDAmount(Decimal.from(amount))}\n        />\n\n        <StaticRow\n          label=\"Redemption Fee\"\n          inputId=\"redeem-fee\"\n          amount={ethFee.toString(4)}\n          pendingAmount={feePct.toString(2)}\n          unit=\"ETH\"\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ minWidth: \"240px\" }}>\n                  The Redemption Fee is charged as a percentage of the redeemed Ether. The Redemption\n                  Fee depends on LUSD redemption volumes and is 0.5% at minimum.\n                </Card>\n              }\n            />\n          }\n        />\n\n        {((dirty || !canRedeem) && description) || (\n          <ActionDescription>Enter the amount of {COIN} you'd like to redeem.</ActionDescription>\n        )}\n\n        <Flex variant=\"layout.actions\">\n          <RedemptionAction\n            transactionId={transactionId}\n            disabled={!dirty || !canRedeem}\n            lusdAmount={lusdAmount}\n            maxRedemptionRate={maxRedemptionRate}\n          />\n        </Flex>\n      </Box>\n\n      {changePending && <LoadingOverlay />}\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}