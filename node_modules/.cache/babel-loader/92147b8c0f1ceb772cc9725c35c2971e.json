{"ast":null,"code":"import _regeneratorRuntime from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{AddressZero}from\"@ethersproject/constants\";import{isAddress,getAddress}from\"@ethersproject/address\";var defaultConfig={frontendTag:AddressZero};function hasKey(o,k){return k in o;}var parseConfig=function parseConfig(json){var config=_objectSpread({},defaultConfig);if(typeof json===\"object\"&&json!==null){if(hasKey(json,\"frontendTag\")&&json.frontendTag!==\"\"){var frontendTag=json.frontendTag;if(typeof frontendTag===\"string\"&&isAddress(frontendTag)){config.frontendTag=getAddress(frontendTag);}else{console.error(\"Malformed frontendTag:\");console.log(frontendTag);}}if(hasKey(json,\"infuraApiKey\")&&json.infuraApiKey!==\"\"){var infuraApiKey=json.infuraApiKey;if(typeof infuraApiKey===\"string\"){config.infuraApiKey=infuraApiKey;}else{console.error(\"Malformed infuraApiKey:\");console.log(infuraApiKey);}}if(hasKey(json,\"testnetOnly\")){var testnetOnly=json.testnetOnly;if(typeof testnetOnly===\"boolean\"){config.testnetOnly=testnetOnly;}else{console.error(\"Malformed testnetOnly:\");console.log(testnetOnly);}}}else{console.error(\"Malformed config:\");console.log(json);}return config;};var configPromise=undefined;var fetchConfig=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"config.json\");case 3:response=_context.sent;if(response.ok){_context.next=6;break;}throw new Error(\"Failed to fetch config.json (status \".concat(response.status,\")\"));case 6:_context.t0=parseConfig;_context.next=9;return response.json();case 9:_context.t1=_context.sent;return _context.abrupt(\"return\",(0,_context.t0)(_context.t1));case 13:_context.prev=13;_context.t2=_context[\"catch\"](0);console.error(_context.t2);return _context.abrupt(\"return\",_objectSpread({},defaultConfig));case 17:case\"end\":return _context.stop();}}},_callee,null,[[0,13]]);}));return function fetchConfig(){return _ref.apply(this,arguments);};}();export var getConfig=function getConfig(){if(!configPromise){configPromise=fetchConfig();}return configPromise;};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/config/index.ts"],"names":["AddressZero","isAddress","getAddress","defaultConfig","frontendTag","hasKey","o","k","parseConfig","json","config","console","error","log","infuraApiKey","testnetOnly","configPromise","undefined","fetchConfig","fetch","response","ok","Error","status","getConfig"],"mappings":"yjBAAA,OAASA,WAAT,KAA4B,0BAA5B,CACA,OAASC,SAAT,CAAoBC,UAApB,KAAsC,wBAAtC,CAQA,GAAMC,CAAAA,aAAoC,CAAG,CAC3CC,WAAW,CAAEJ,WAD8B,CAA7C,CAIA,QAASK,CAAAA,MAAT,CAAkCC,CAAlC,CAA6CC,CAA7C,CAA4E,CAC1E,MAAOA,CAAAA,CAAC,GAAID,CAAAA,CAAZ,CACD,CAED,GAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,IAAD,CAA0C,CAC5D,GAAMC,CAAAA,MAAM,kBAAQP,aAAR,CAAZ,CAEA,GAAI,MAAOM,CAAAA,IAAP,GAAgB,QAAhB,EAA4BA,IAAI,GAAK,IAAzC,CAA+C,CAC7C,GAAIJ,MAAM,CAACI,IAAD,CAAO,aAAP,CAAN,EAA+BA,IAAI,CAACL,WAAL,GAAqB,EAAxD,CAA4D,IAClDA,CAAAA,WADkD,CAClCK,IADkC,CAClDL,WADkD,CAG1D,GAAI,MAAOA,CAAAA,WAAP,GAAuB,QAAvB,EAAmCH,SAAS,CAACG,WAAD,CAAhD,CAA+D,CAC7DM,MAAM,CAACN,WAAP,CAAqBF,UAAU,CAACE,WAAD,CAA/B,CACD,CAFD,IAEO,CACLO,OAAO,CAACC,KAAR,CAAc,wBAAd,EACAD,OAAO,CAACE,GAAR,CAAYT,WAAZ,EACD,CACF,CAED,GAAIC,MAAM,CAACI,IAAD,CAAO,cAAP,CAAN,EAAgCA,IAAI,CAACK,YAAL,GAAsB,EAA1D,CAA8D,IACpDA,CAAAA,YADoD,CACnCL,IADmC,CACpDK,YADoD,CAG5D,GAAI,MAAOA,CAAAA,YAAP,GAAwB,QAA5B,CAAsC,CACpCJ,MAAM,CAACI,YAAP,CAAsBA,YAAtB,CACD,CAFD,IAEO,CACLH,OAAO,CAACC,KAAR,CAAc,yBAAd,EACAD,OAAO,CAACE,GAAR,CAAYC,YAAZ,EACD,CACF,CAED,GAAIT,MAAM,CAACI,IAAD,CAAO,aAAP,CAAV,CAAiC,IACvBM,CAAAA,WADuB,CACPN,IADO,CACvBM,WADuB,CAG/B,GAAI,MAAOA,CAAAA,WAAP,GAAuB,SAA3B,CAAsC,CACpCL,MAAM,CAACK,WAAP,CAAqBA,WAArB,CACD,CAFD,IAEO,CACLJ,OAAO,CAACC,KAAR,CAAc,wBAAd,EACAD,OAAO,CAACE,GAAR,CAAYE,WAAZ,EACD,CACF,CACF,CAjCD,IAiCO,CACLJ,OAAO,CAACC,KAAR,CAAc,mBAAd,EACAD,OAAO,CAACE,GAAR,CAAYJ,IAAZ,EACD,CAED,MAAOC,CAAAA,MAAP,CACD,CA1CD,CA4CA,GAAIM,CAAAA,aAAyD,CAAGC,SAAhE,CAEA,GAAMC,CAAAA,WAAW,0FAAG,sLAEOC,CAAAA,KAAK,CAAC,aAAD,CAFZ,QAEVC,QAFU,kBAIXA,QAAQ,CAACC,EAJE,8BAKR,IAAIC,CAAAA,KAAJ,+CAAiDF,QAAQ,CAACG,MAA1D,MALQ,oBAQTf,WARS,uBAQSY,CAAAA,QAAQ,CAACX,IAAT,EART,0JAUhBE,OAAO,CAACC,KAAR,cAVgB,iDAWJT,aAXI,wEAAH,kBAAXe,CAAAA,WAAW,0CAAjB,CAeA,MAAO,IAAMM,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAsC,CAC7D,GAAI,CAACR,aAAL,CAAoB,CAClBA,aAAa,CAAGE,WAAW,EAA3B,CACD,CAED,MAAOF,CAAAA,aAAP,CACD,CANM","sourcesContent":["import { AddressZero } from \"@ethersproject/constants\";\nimport { isAddress, getAddress } from \"@ethersproject/address\";\n\nexport type LiquityFrontendConfig = {\n  frontendTag: string;\n  infuraApiKey?: string;\n  testnetOnly?: boolean;\n};\n\nconst defaultConfig: LiquityFrontendConfig = {\n  frontendTag: AddressZero\n};\n\nfunction hasKey<K extends string>(o: object, k: K): o is Record<K, unknown> {\n  return k in o;\n}\n\nconst parseConfig = (json: unknown): LiquityFrontendConfig => {\n  const config = { ...defaultConfig };\n\n  if (typeof json === \"object\" && json !== null) {\n    if (hasKey(json, \"frontendTag\") && json.frontendTag !== \"\") {\n      const { frontendTag } = json;\n\n      if (typeof frontendTag === \"string\" && isAddress(frontendTag)) {\n        config.frontendTag = getAddress(frontendTag);\n      } else {\n        console.error(\"Malformed frontendTag:\");\n        console.log(frontendTag);\n      }\n    }\n\n    if (hasKey(json, \"infuraApiKey\") && json.infuraApiKey !== \"\") {\n      const { infuraApiKey } = json;\n\n      if (typeof infuraApiKey === \"string\") {\n        config.infuraApiKey = infuraApiKey;\n      } else {\n        console.error(\"Malformed infuraApiKey:\");\n        console.log(infuraApiKey);\n      }\n    }\n\n    if (hasKey(json, \"testnetOnly\")) {\n      const { testnetOnly } = json;\n\n      if (typeof testnetOnly === \"boolean\") {\n        config.testnetOnly = testnetOnly;\n      } else {\n        console.error(\"Malformed testnetOnly:\");\n        console.log(testnetOnly);\n      }\n    }\n  } else {\n    console.error(\"Malformed config:\");\n    console.log(json);\n  }\n\n  return config;\n};\n\nlet configPromise: Promise<LiquityFrontendConfig> | undefined = undefined;\n\nconst fetchConfig = async () => {\n  try {\n    const response = await fetch(\"config.json\");\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch config.json (status ${response.status})`);\n    }\n\n    return parseConfig(await response.json());\n  } catch (err) {\n    console.error(err);\n    return { ...defaultConfig };\n  }\n};\n\nexport const getConfig = (): Promise<LiquityFrontendConfig> => {\n  if (!configPromise) {\n    configPromise = fetchConfig();\n  }\n\n  return configPromise;\n};\n"]},"metadata":{},"sourceType":"module"}