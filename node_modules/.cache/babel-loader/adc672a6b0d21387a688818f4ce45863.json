{"ast":null,"code":"import _regeneratorRuntime from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Decimal}from\"@liquity/lib-base\";var uniswapQuery=function uniswapQuery(lqtyTokenAddress){return\"{\\n  token(id: \\\"\".concat(lqtyTokenAddress.toLowerCase(),\"\\\") {\\n    derivedETH\\n  },\\n  bundle(id: 1) {\\n    ethPrice\\n  },\\n}\");};export function fetchLqtyPrice(_x){return _fetchLqtyPrice.apply(this,arguments);}function _fetchLqtyPrice(){_fetchLqtyPrice=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(lqtyTokenAddress){var _data$token,_data$bundle;var response,_yield$response$json,data,errors,ethPriceUSD,lqtyPriceUSD;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return window.fetch(\"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",{method:\"POST\",headers:{\"content-type\":\"application/json\"},body:JSON.stringify({query:uniswapQuery(lqtyTokenAddress),variables:null})});case 2:response=_context.sent;if(response.ok){_context.next=5;break;}return _context.abrupt(\"return\",Promise.reject(\"Network error connecting to Uniswap subgraph\"));case 5:_context.next=7;return response.json();case 7:_yield$response$json=_context.sent;data=_yield$response$json.data;errors=_yield$response$json.errors;if(!errors){_context.next=12;break;}return _context.abrupt(\"return\",Promise.reject(errors));case 12:if(!(typeof(data===null||data===void 0?void 0:(_data$token=data.token)===null||_data$token===void 0?void 0:_data$token.derivedETH)===\"string\"&&typeof(data===null||data===void 0?void 0:(_data$bundle=data.bundle)===null||_data$bundle===void 0?void 0:_data$bundle.ethPrice)===\"string\")){_context.next=16;break;}ethPriceUSD=Decimal.from(data.bundle.ethPrice);lqtyPriceUSD=Decimal.from(data.token.derivedETH).mul(ethPriceUSD);return _context.abrupt(\"return\",{lqtyPriceUSD:lqtyPriceUSD});case 16:return _context.abrupt(\"return\",Promise.reject(\"Uniswap doesn't have the required data to calculate yield\"));case 17:case\"end\":return _context.stop();}}},_callee);}));return _fetchLqtyPrice.apply(this,arguments);}","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Stability/context/fetchLqtyPrice.ts"],"names":["Decimal","uniswapQuery","lqtyTokenAddress","toLowerCase","fetchLqtyPrice","window","fetch","method","headers","body","JSON","stringify","query","variables","response","ok","Promise","reject","json","data","errors","token","derivedETH","bundle","ethPrice","ethPriceUSD","from","lqtyPriceUSD","mul"],"mappings":"2XAAA,OAASA,OAAT,KAAwB,mBAAxB,CAcA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,gBAAD,mCACNA,gBAAgB,CAACC,WAAjB,EADM,2EAArB,CASA,eAAsBC,CAAAA,cAAtB,mD,mGAAO,iBAA8BF,gBAA9B,4OACkBG,CAAAA,MAAM,CAACC,KAAP,CAAa,4DAAb,CAA2E,CAChGC,MAAM,CAAE,MADwF,CAEhGC,OAAO,CAAE,CACP,eAAgB,kBADT,CAFuF,CAKhGC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACnBC,KAAK,CAAEX,YAAY,CAACC,gBAAD,CADA,CAEnBW,SAAS,CAAE,IAFQ,CAAf,CAL0F,CAA3E,CADlB,QACCC,QADD,kBAWAA,QAAQ,CAACC,EAXT,yDAYIC,OAAO,CAACC,MAAR,CAAe,8CAAf,CAZJ,+BAe2CH,CAAAA,QAAQ,CAACI,IAAT,EAf3C,2CAeGC,IAfH,sBAeGA,IAfH,CAeSC,MAfT,sBAeSA,MAfT,KAiBDA,MAjBC,0DAkBIJ,OAAO,CAACC,MAAR,CAAeG,MAAf,CAlBJ,eAqBD,OAAOD,IAAP,SAAOA,IAAP,8BAAOA,IAAI,CAAEE,KAAb,sCAAO,YAAaC,UAApB,IAAmC,QAAnC,EAA+C,OAAOH,IAAP,SAAOA,IAAP,+BAAOA,IAAI,CAAEI,MAAb,uCAAO,aAAcC,QAArB,IAAkC,QArBhF,2BAsBGC,WAtBH,CAsBiBzB,OAAO,CAAC0B,IAAR,CAAaP,IAAI,CAACI,MAAL,CAAYC,QAAzB,CAtBjB,CAuBGG,YAvBH,CAuBkB3B,OAAO,CAAC0B,IAAR,CAAaP,IAAI,CAACE,KAAL,CAAWC,UAAxB,EAAoCM,GAApC,CAAwCH,WAAxC,CAvBlB,iCAyBI,CAAEE,YAAY,CAAZA,YAAF,CAzBJ,0CA4BEX,OAAO,CAACC,MAAR,CAAe,2DAAf,CA5BF,yD","sourcesContent":["import { Decimal } from \"@liquity/lib-base\";\n\ntype UniswapResponse = {\n  data?: {\n    bundle: {\n      ethPrice: string;\n    } | null;\n    token: {\n      derivedETH: string;\n    } | null;\n  };\n  errors?: Array<{ message: string }>;\n};\n\nconst uniswapQuery = (lqtyTokenAddress: string) => `{\n  token(id: \"${lqtyTokenAddress.toLowerCase()}\") {\n    derivedETH\n  },\n  bundle(id: 1) {\n    ethPrice\n  },\n}`;\n\nexport async function fetchLqtyPrice(lqtyTokenAddress: string) {\n  const response = await window.fetch(\"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\", {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: uniswapQuery(lqtyTokenAddress),\n      variables: null\n    })\n  });\n  if (!response.ok) {\n    return Promise.reject(\"Network error connecting to Uniswap subgraph\");\n  }\n\n  const { data, errors }: UniswapResponse = await response.json();\n\n  if (errors) {\n    return Promise.reject(errors);\n  }\n\n  if (typeof data?.token?.derivedETH === \"string\" && typeof data?.bundle?.ethPrice === \"string\") {\n    const ethPriceUSD = Decimal.from(data.bundle.ethPrice);\n    const lqtyPriceUSD = Decimal.from(data.token.derivedETH).mul(ethPriceUSD);\n\n    return { lqtyPriceUSD };\n  }\n\n  return Promise.reject(\"Uniswap doesn't have the required data to calculate yield\");\n}\n"]},"metadata":{},"sourceType":"module"}