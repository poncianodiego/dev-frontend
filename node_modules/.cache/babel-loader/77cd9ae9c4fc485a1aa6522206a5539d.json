{"ast":null,"code":"import _slicedToArray from\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useCallback,useEffect,useState}from\"react\";import{Flex,Button,Box,Card,Heading}from\"theme-ui\";import{Decimal,Trove,LUSD_LIQUIDATION_RESERVE,LUSD_MINIMUM_NET_DEBT,Percent}from\"@liquity/lib-base\";import{useLiquitySelector}from\"@liquity/lib-react\";import{ActionDescription}from\"../ActionDescription\";import{useMyTransactionState}from\"../Transaction\";import{TroveAction}from\"./TroveAction\";import{useTroveView}from\"./context/TroveViewContext\";import{COIN}from\"../../strings\";import{Icon}from\"../Icon\";import{InfoIcon}from\"../InfoIcon\";import{LoadingOverlay}from\"../LoadingOverlay\";import{CollateralRatio}from\"./CollateralRatio\";import{EditableRow,StaticRow}from\"./Editor\";import{selectForTroveChangeValidation,validateTroveChange}from\"./validation/validateTroveChange\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var selector=function selector(state){var fees=state.fees,price=state.price,accountBalance=state.accountBalance;return{fees:fees,price:price,accountBalance:accountBalance,validationContext:selectForTroveChangeValidation(state)};};var EMPTY_TROVE=new Trove(Decimal.ZERO,Decimal.ZERO);var TRANSACTION_ID=\"trove-creation\";var GAS_ROOM_ETH=Decimal.from(0.1);export var Opening=function Opening(){var _useTroveView=useTroveView(),dispatchEvent=_useTroveView.dispatchEvent;var _useLiquitySelector=useLiquitySelector(selector),fees=_useLiquitySelector.fees,price=_useLiquitySelector.price,accountBalance=_useLiquitySelector.accountBalance,validationContext=_useLiquitySelector.validationContext;var borrowingRate=fees.borrowingRate();var editingState=useState();var _useState=useState(Decimal.ZERO),_useState2=_slicedToArray(_useState,2),collateral=_useState2[0],setCollateral=_useState2[1];var _useState3=useState(Decimal.ZERO),_useState4=_slicedToArray(_useState3,2),borrowAmount=_useState4[0],setBorrowAmount=_useState4[1];var maxBorrowingRate=borrowingRate.add(0.005);var fee=borrowAmount.mul(borrowingRate);var feePct=new Percent(borrowingRate);var totalDebt=borrowAmount.add(LUSD_LIQUIDATION_RESERVE).add(fee);var isDirty=!collateral.isZero||!borrowAmount.isZero;var trove=isDirty?new Trove(collateral,totalDebt):EMPTY_TROVE;var maxEth=accountBalance.gt(GAS_ROOM_ETH)?accountBalance.sub(GAS_ROOM_ETH):Decimal.ZERO;var maxCollateral=collateral.add(maxEth);var collateralMaxedOut=collateral.eq(maxCollateral);var collateralRatio=!collateral.isZero&&!borrowAmount.isZero?trove.collateralRatio(price):undefined;var _validateTroveChange=validateTroveChange(EMPTY_TROVE,trove,borrowingRate,validationContext),_validateTroveChange2=_slicedToArray(_validateTroveChange,2),troveChange=_validateTroveChange2[0],description=_validateTroveChange2[1];var transactionState=useMyTransactionState(TRANSACTION_ID);var isTransactionPending=transactionState.type===\"waitingForApproval\"||transactionState.type===\"waitingForConfirmation\";var handleCancelPressed=useCallback(function(){dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");},[dispatchEvent]);var reset=useCallback(function(){setCollateral(Decimal.ZERO);setBorrowAmount(Decimal.ZERO);},[]);useEffect(function(){if(!collateral.isZero&&borrowAmount.isZero){setBorrowAmount(LUSD_MINIMUM_NET_DEBT);}},[collateral,borrowAmount]);return/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsxs(Heading,{children:[\"Trove\",isDirty&&!isTransactionPending&&/*#__PURE__*/_jsx(Button,{variant:\"titleIcon\",sx:{\":enabled:hover\":{color:\"danger\"}},onClick:reset,children:/*#__PURE__*/_jsx(Icon,{name:\"history\",size:\"lg\"})})]}),/*#__PURE__*/_jsxs(Box,{sx:{p:[2,3]},children:[/*#__PURE__*/_jsx(EditableRow,{label:\"Collateral\",inputId:\"trove-collateral\",amount:collateral.prettify(4),maxAmount:maxCollateral.toString(),maxedOut:collateralMaxedOut,editingState:editingState,unit:\"ETH\",editedAmount:collateral.toString(4),setEditedAmount:function setEditedAmount(amount){return setCollateral(Decimal.from(amount));}}),/*#__PURE__*/_jsx(EditableRow,{label:\"Borrow\",inputId:\"trove-borrow-amount\",amount:borrowAmount.prettify(),unit:COIN,editingState:editingState,editedAmount:borrowAmount.toString(2),setEditedAmount:function setEditedAmount(amount){return setBorrowAmount(Decimal.from(amount));}}),/*#__PURE__*/_jsx(StaticRow,{label:\"Liquidation Reserve\",inputId:\"trove-liquidation-reserve\",amount:\"\".concat(LUSD_LIQUIDATION_RESERVE),unit:COIN,infoIcon:/*#__PURE__*/_jsx(InfoIcon,{tooltip:/*#__PURE__*/_jsx(Card,{variant:\"tooltip\",sx:{width:\"200px\"},children:\"An amount set aside to cover the liquidator\\u2019s gas costs if your Trove needs to be liquidated. The amount increases your debt and is refunded if you close your Trove by fully paying off its net debt.\"})})}),/*#__PURE__*/_jsx(StaticRow,{label:\"Borrowing Fee\",inputId:\"trove-borrowing-fee\",amount:fee.prettify(2),pendingAmount:feePct.toString(2),unit:COIN,infoIcon:/*#__PURE__*/_jsx(InfoIcon,{tooltip:/*#__PURE__*/_jsx(Card,{variant:\"tooltip\",sx:{width:\"240px\"},children:\"This amount is deducted from the borrowed amount as a one-time fee. There are no recurring fees for borrowing, which is thus interest-free.\"})})}),/*#__PURE__*/_jsx(StaticRow,{label:\"Total debt\",inputId:\"trove-total-debt\",amount:totalDebt.prettify(2),unit:COIN,infoIcon:/*#__PURE__*/_jsx(InfoIcon,{tooltip:/*#__PURE__*/_jsxs(Card,{variant:\"tooltip\",sx:{width:\"240px\"},children:[\"The total amount of LUSD your Trove will hold.\",\" \",isDirty&&/*#__PURE__*/_jsxs(_Fragment,{children:[\"You will need to repay \",totalDebt.sub(LUSD_LIQUIDATION_RESERVE).prettify(2),\" \",\"LUSD to reclaim your collateral (\",LUSD_LIQUIDATION_RESERVE.toString(),\" LUSD Liquidation Reserve excluded).\"]})]})})}),/*#__PURE__*/_jsx(CollateralRatio,{value:collateralRatio}),description!==null&&description!==void 0?description:/*#__PURE__*/_jsx(ActionDescription,{children:\"Start by entering the amount of ETH you'd like to deposit as collateral.\"}),/*#__PURE__*/_jsxs(Flex,{variant:\"layout.actions\",children:[/*#__PURE__*/_jsx(Button,{variant:\"cancel\",onClick:handleCancelPressed,children:\"Cancel\"}),troveChange?/*#__PURE__*/_jsx(TroveAction,{transactionId:TRANSACTION_ID,change:troveChange,maxBorrowingRate:maxBorrowingRate,children:\"Confirm\"}):/*#__PURE__*/_jsx(Button,{disabled:true,children:\"Confirm\"})]})]}),isTransactionPending&&/*#__PURE__*/_jsx(LoadingOverlay,{})]});};","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Trove/Opening.tsx"],"names":["React","useCallback","useEffect","useState","Flex","Button","Box","Card","Heading","Decimal","Trove","LUSD_LIQUIDATION_RESERVE","LUSD_MINIMUM_NET_DEBT","Percent","useLiquitySelector","ActionDescription","useMyTransactionState","TroveAction","useTroveView","COIN","Icon","InfoIcon","LoadingOverlay","CollateralRatio","EditableRow","StaticRow","selectForTroveChangeValidation","validateTroveChange","selector","state","fees","price","accountBalance","validationContext","EMPTY_TROVE","ZERO","TRANSACTION_ID","GAS_ROOM_ETH","from","Opening","dispatchEvent","borrowingRate","editingState","collateral","setCollateral","borrowAmount","setBorrowAmount","maxBorrowingRate","add","fee","mul","feePct","totalDebt","isDirty","isZero","trove","maxEth","gt","sub","maxCollateral","collateralMaxedOut","eq","collateralRatio","undefined","troveChange","description","transactionState","isTransactionPending","type","handleCancelPressed","reset","color","p","prettify","toString","amount","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Flex, Button, Box, Card, Heading } from \"theme-ui\";\nimport {\n  LiquityStoreState,\n  Decimal,\n  Trove,\n  LUSD_LIQUIDATION_RESERVE,\n  LUSD_MINIMUM_NET_DEBT,\n  Percent\n} from \"@liquity/lib-base\";\nimport { useLiquitySelector } from \"@liquity/lib-react\";\nimport { ActionDescription } from \"../ActionDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\nimport { TroveAction } from \"./TroveAction\";\nimport { useTroveView } from \"./context/TroveViewContext\";\nimport { COIN } from \"../../strings\";\nimport { Icon } from \"../Icon\";\nimport { InfoIcon } from \"../InfoIcon\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { CollateralRatio } from \"./CollateralRatio\";\nimport { EditableRow, StaticRow } from \"./Editor\";\nimport {\n  selectForTroveChangeValidation,\n  validateTroveChange\n} from \"./validation/validateTroveChange\";\n\nconst selector = (state: LiquityStoreState) => {\n  const { fees, price, accountBalance } = state;\n  return {\n    fees,\n    price,\n    accountBalance,\n    validationContext: selectForTroveChangeValidation(state)\n  };\n};\n\nconst EMPTY_TROVE = new Trove(Decimal.ZERO, Decimal.ZERO);\nconst TRANSACTION_ID = \"trove-creation\";\nconst GAS_ROOM_ETH = Decimal.from(0.1);\n\nexport const Opening: React.FC = () => {\n  const { dispatchEvent } = useTroveView();\n  const { fees, price, accountBalance, validationContext } = useLiquitySelector(selector);\n  const borrowingRate = fees.borrowingRate();\n  const editingState = useState<string>();\n\n  const [collateral, setCollateral] = useState<Decimal>(Decimal.ZERO);\n  const [borrowAmount, setBorrowAmount] = useState<Decimal>(Decimal.ZERO);\n\n  const maxBorrowingRate = borrowingRate.add(0.005);\n\n  const fee = borrowAmount.mul(borrowingRate);\n  const feePct = new Percent(borrowingRate);\n  const totalDebt = borrowAmount.add(LUSD_LIQUIDATION_RESERVE).add(fee);\n  const isDirty = !collateral.isZero || !borrowAmount.isZero;\n  const trove = isDirty ? new Trove(collateral, totalDebt) : EMPTY_TROVE;\n  const maxEth = accountBalance.gt(GAS_ROOM_ETH) ? accountBalance.sub(GAS_ROOM_ETH) : Decimal.ZERO;\n  const maxCollateral = collateral.add(maxEth);\n  const collateralMaxedOut = collateral.eq(maxCollateral);\n  const collateralRatio =\n    !collateral.isZero && !borrowAmount.isZero ? trove.collateralRatio(price) : undefined;\n\n  const [troveChange, description] = validateTroveChange(\n    EMPTY_TROVE,\n    trove,\n    borrowingRate,\n    validationContext\n  );\n\n  const transactionState = useMyTransactionState(TRANSACTION_ID);\n  const isTransactionPending =\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\";\n\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n\n  const reset = useCallback(() => {\n    setCollateral(Decimal.ZERO);\n    setBorrowAmount(Decimal.ZERO);\n  }, []);\n\n  useEffect(() => {\n    if (!collateral.isZero && borrowAmount.isZero) {\n      setBorrowAmount(LUSD_MINIMUM_NET_DEBT);\n    }\n  }, [collateral, borrowAmount]);\n\n  return (\n    <Card>\n      <Heading>\n        Trove\n        {isDirty && !isTransactionPending && (\n          <Button variant=\"titleIcon\" sx={{ \":enabled:hover\": { color: \"danger\" } }} onClick={reset}>\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Collateral\"\n          inputId=\"trove-collateral\"\n          amount={collateral.prettify(4)}\n          maxAmount={maxCollateral.toString()}\n          maxedOut={collateralMaxedOut}\n          editingState={editingState}\n          unit=\"ETH\"\n          editedAmount={collateral.toString(4)}\n          setEditedAmount={(amount: string) => setCollateral(Decimal.from(amount))}\n        />\n\n        <EditableRow\n          label=\"Borrow\"\n          inputId=\"trove-borrow-amount\"\n          amount={borrowAmount.prettify()}\n          unit={COIN}\n          editingState={editingState}\n          editedAmount={borrowAmount.toString(2)}\n          setEditedAmount={(amount: string) => setBorrowAmount(Decimal.from(amount))}\n        />\n\n        <StaticRow\n          label=\"Liquidation Reserve\"\n          inputId=\"trove-liquidation-reserve\"\n          amount={`${LUSD_LIQUIDATION_RESERVE}`}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"200px\" }}>\n                  An amount set aside to cover the liquidator’s gas costs if your Trove needs to be\n                  liquidated. The amount increases your debt and is refunded if you close your Trove\n                  by fully paying off its net debt.\n                </Card>\n              }\n            />\n          }\n        />\n\n        <StaticRow\n          label=\"Borrowing Fee\"\n          inputId=\"trove-borrowing-fee\"\n          amount={fee.prettify(2)}\n          pendingAmount={feePct.toString(2)}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                  This amount is deducted from the borrowed amount as a one-time fee. There are no\n                  recurring fees for borrowing, which is thus interest-free.\n                </Card>\n              }\n            />\n          }\n        />\n\n        <StaticRow\n          label=\"Total debt\"\n          inputId=\"trove-total-debt\"\n          amount={totalDebt.prettify(2)}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                  The total amount of LUSD your Trove will hold.{\" \"}\n                  {isDirty && (\n                    <>\n                      You will need to repay {totalDebt.sub(LUSD_LIQUIDATION_RESERVE).prettify(2)}{\" \"}\n                      LUSD to reclaim your collateral ({LUSD_LIQUIDATION_RESERVE.toString()} LUSD\n                      Liquidation Reserve excluded).\n                    </>\n                  )}\n                </Card>\n              }\n            />\n          }\n        />\n\n        <CollateralRatio value={collateralRatio} />\n\n        {description ?? (\n          <ActionDescription>\n            Start by entering the amount of ETH you'd like to deposit as collateral.\n          </ActionDescription>\n        )}\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"cancel\" onClick={handleCancelPressed}>\n            Cancel\n          </Button>\n\n          {troveChange ? (\n            <TroveAction\n              transactionId={TRANSACTION_ID}\n              change={troveChange}\n              maxBorrowingRate={maxBorrowingRate}\n            >\n              Confirm\n            </TroveAction>\n          ) : (\n            <Button disabled>Confirm</Button>\n          )}\n        </Flex>\n      </Box>\n      {isTransactionPending && <LoadingOverlay />}\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}