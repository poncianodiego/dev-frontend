{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _slicedToArray = require(\"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquityStore = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar strictEquals = function strictEquals(a, b) {\n  return a === b;\n};\n\nvar eq = function eq(a, b) {\n  return a.eq(b);\n};\n\nvar equals = function equals(a, b) {\n  return a.equals(b);\n};\n\nvar frontendStatusEquals = function frontendStatusEquals(a, b) {\n  return a.status === \"unregistered\" ? b.status === \"unregistered\" : b.status === \"registered\" && a.kickbackRate.eq(b.kickbackRate);\n};\n\nvar showFrontendStatus = function showFrontendStatus(x) {\n  return x.status === \"unregistered\" ? '{ status: \"unregistered\" }' : \"{ status: \\\"registered\\\", kickbackRate: \".concat(x.kickbackRate, \" }\");\n};\n\nvar wrap = function wrap(f) {\n  return function () {\n    return f.apply(void 0, arguments);\n  };\n};\n\nvar difference = function difference(a, b) {\n  return Object.fromEntries(Object.entries(a).filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return value !== b[key];\n  }));\n};\n/**\n * Abstract base class of Liquity data store implementations.\n *\n * @remarks\n * The type parameter `T` may be used to type extra state added to {@link LiquityStoreState} by the\n * subclass.\n *\n * Implemented by {@link @liquity/lib-ethers#BlockPolledLiquityStore}.\n *\n * @public\n */\n\n\nvar LiquityStore = /*#__PURE__*/function () {\n  function LiquityStore() {\n    _classCallCheck(this, LiquityStore);\n\n    /** Turn console logging on/off. */\n    this.logging = false;\n    /** @internal */\n\n    this._loaded = false;\n    this._listeners = new Set();\n  }\n  /**\n   * The current store state.\n   *\n   * @remarks\n   * Should not be accessed before the store is loaded. Assign a function to\n   * {@link LiquityStore.onLoaded | onLoaded} to get a callback when this happens.\n   *\n   * See {@link LiquityStoreState} for the list of properties returned.\n   */\n\n\n  _createClass(LiquityStore, [{\n    key: \"state\",\n    get: function get() {\n      return Object.assign({}, this._baseState, this._derivedState, this._extraState);\n    }\n    /**\n     * Start monitoring the blockchain for Liquity state changes.\n     *\n     * @remarks\n     * The {@link LiquityStore.onLoaded | onLoaded} callback will be called after the state is fetched\n     * for the first time.\n     *\n     * Use the {@link LiquityStore.subscribe | subscribe()} function to register listeners.\n     *\n     * @returns Function to stop the monitoring.\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n\n      var doStop = this._doStart();\n\n      return function () {\n        doStop();\n\n        _this._cancelUpdateIfScheduled();\n      };\n    }\n  }, {\n    key: \"_cancelUpdateIfScheduled\",\n    value: function _cancelUpdateIfScheduled() {\n      if (this._updateTimeoutId !== undefined) {\n        clearTimeout(this._updateTimeoutId);\n      }\n    }\n  }, {\n    key: \"_scheduleUpdate\",\n    value: function _scheduleUpdate() {\n      var _this2 = this;\n\n      this._cancelUpdateIfScheduled();\n\n      this._updateTimeoutId = setTimeout(function () {\n        _this2._updateTimeoutId = undefined;\n\n        _this2._update();\n      }, 30000);\n    }\n  }, {\n    key: \"_logUpdate\",\n    value: function _logUpdate(name, next, show) {\n      if (this.logging) {\n        console.log(\"\".concat(name, \" updated to \").concat(show ? show(next) : next));\n      }\n\n      return next;\n    }\n  }, {\n    key: \"_updateIfChanged\",\n    value: function _updateIfChanged(equals, name, prev, next, show) {\n      return next !== undefined && !equals(prev, next) ? this._logUpdate(name, next, show) : prev;\n    }\n  }, {\n    key: \"_silentlyUpdateIfChanged\",\n    value: function _silentlyUpdateIfChanged(equals, prev, next) {\n      return next !== undefined && !equals(prev, next) ? next : prev;\n    }\n  }, {\n    key: \"_updateFees\",\n    value: function _updateFees(name, prev, next) {\n      if (next && !next.equals(prev)) {\n        // Filter out fee update spam that happens on every new block by only logging when string\n        // representation changes.\n        if (\"\".concat(next) !== \"\".concat(prev)) {\n          this._logUpdate(name, next);\n        }\n\n        return next;\n      } else {\n        return prev;\n      }\n    }\n  }, {\n    key: \"_reduce\",\n    value: function _reduce(baseState, baseStateUpdate) {\n      return {\n        frontend: this._updateIfChanged(frontendStatusEquals, \"frontend\", baseState.frontend, baseStateUpdate.frontend, showFrontendStatus),\n        ownFrontend: this._updateIfChanged(frontendStatusEquals, \"ownFrontend\", baseState.ownFrontend, baseStateUpdate.ownFrontend, showFrontendStatus),\n        numberOfTroves: this._updateIfChanged(strictEquals, \"numberOfTroves\", baseState.numberOfTroves, baseStateUpdate.numberOfTroves),\n        accountBalance: this._updateIfChanged(eq, \"accountBalance\", baseState.accountBalance, baseStateUpdate.accountBalance),\n        lusdBalance: this._updateIfChanged(eq, \"lusdBalance\", baseState.lusdBalance, baseStateUpdate.lusdBalance),\n        lqtyBalance: this._updateIfChanged(eq, \"lqtyBalance\", baseState.lqtyBalance, baseStateUpdate.lqtyBalance),\n        uniTokenBalance: this._updateIfChanged(eq, \"uniTokenBalance\", baseState.uniTokenBalance, baseStateUpdate.uniTokenBalance),\n        uniTokenAllowance: this._updateIfChanged(eq, \"uniTokenAllowance\", baseState.uniTokenAllowance, baseStateUpdate.uniTokenAllowance),\n        remainingLiquidityMiningLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.remainingLiquidityMiningLQTYReward, baseStateUpdate.remainingLiquidityMiningLQTYReward),\n        liquidityMiningStake: this._updateIfChanged(eq, \"liquidityMiningStake\", baseState.liquidityMiningStake, baseStateUpdate.liquidityMiningStake),\n        totalStakedUniTokens: this._updateIfChanged(eq, \"totalStakedUniTokens\", baseState.totalStakedUniTokens, baseStateUpdate.totalStakedUniTokens),\n        liquidityMiningLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.liquidityMiningLQTYReward, baseStateUpdate.liquidityMiningLQTYReward),\n        collateralSurplusBalance: this._updateIfChanged(eq, \"collateralSurplusBalance\", baseState.collateralSurplusBalance, baseStateUpdate.collateralSurplusBalance),\n        price: this._updateIfChanged(eq, \"price\", baseState.price, baseStateUpdate.price),\n        lusdInStabilityPool: this._updateIfChanged(eq, \"lusdInStabilityPool\", baseState.lusdInStabilityPool, baseStateUpdate.lusdInStabilityPool),\n        total: this._updateIfChanged(equals, \"total\", baseState.total, baseStateUpdate.total),\n        totalRedistributed: this._updateIfChanged(equals, \"totalRedistributed\", baseState.totalRedistributed, baseStateUpdate.totalRedistributed),\n        troveBeforeRedistribution: this._updateIfChanged(equals, \"troveBeforeRedistribution\", baseState.troveBeforeRedistribution, baseStateUpdate.troveBeforeRedistribution),\n        stabilityDeposit: this._updateIfChanged(equals, \"stabilityDeposit\", baseState.stabilityDeposit, baseStateUpdate.stabilityDeposit),\n        remainingStabilityPoolLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.remainingStabilityPoolLQTYReward, baseStateUpdate.remainingStabilityPoolLQTYReward),\n        _feesInNormalMode: this._silentlyUpdateIfChanged(equals, baseState._feesInNormalMode, baseStateUpdate._feesInNormalMode),\n        lqtyStake: this._updateIfChanged(equals, \"lqtyStake\", baseState.lqtyStake, baseStateUpdate.lqtyStake),\n        totalStakedLQTY: this._updateIfChanged(eq, \"totalStakedLQTY\", baseState.totalStakedLQTY, baseStateUpdate.totalStakedLQTY),\n        _riskiestTroveBeforeRedistribution: this._silentlyUpdateIfChanged(equals, baseState._riskiestTroveBeforeRedistribution, baseStateUpdate._riskiestTroveBeforeRedistribution)\n      };\n    }\n  }, {\n    key: \"_derive\",\n    value: function _derive(_ref3) {\n      var troveBeforeRedistribution = _ref3.troveBeforeRedistribution,\n          totalRedistributed = _ref3.totalRedistributed,\n          _feesInNormalMode = _ref3._feesInNormalMode,\n          total = _ref3.total,\n          price = _ref3.price,\n          _riskiestTroveBeforeRedistribution = _ref3._riskiestTroveBeforeRedistribution;\n\n      var fees = _feesInNormalMode._setRecoveryMode(total.collateralRatioIsBelowCritical(price));\n\n      return {\n        trove: troveBeforeRedistribution.applyRedistribution(totalRedistributed),\n        fees: fees,\n        borrowingRate: fees.borrowingRate(),\n        redemptionRate: fees.redemptionRate(),\n        haveUndercollateralizedTroves: _riskiestTroveBeforeRedistribution.applyRedistribution(totalRedistributed).collateralRatioIsBelowMinimum(price)\n      };\n    }\n  }, {\n    key: \"_reduceDerived\",\n    value: function _reduceDerived(derivedState, derivedStateUpdate) {\n      return {\n        fees: this._updateFees(\"fees\", derivedState.fees, derivedStateUpdate.fees),\n        trove: this._updateIfChanged(equals, \"trove\", derivedState.trove, derivedStateUpdate.trove),\n        borrowingRate: this._silentlyUpdateIfChanged(eq, derivedState.borrowingRate, derivedStateUpdate.borrowingRate),\n        redemptionRate: this._silentlyUpdateIfChanged(eq, derivedState.redemptionRate, derivedStateUpdate.redemptionRate),\n        haveUndercollateralizedTroves: this._updateIfChanged(strictEquals, \"haveUndercollateralizedTroves\", derivedState.haveUndercollateralizedTroves, derivedStateUpdate.haveUndercollateralizedTroves)\n      };\n    }\n  }, {\n    key: \"_notify\",\n    value: function _notify(params) {\n      var _this3 = this;\n\n      // Iterate on a copy of `_listeners`, to avoid notifying any new listeners subscribed by\n      // existing listeners, as that could result in infinite loops.\n      //\n      // Before calling a listener from our copy of `_listeners`, check if it has been removed from\n      // the original set. This way we avoid calling listeners that have already been unsubscribed\n      // by an earlier listener callback.\n      _toConsumableArray(this._listeners).forEach(function (listener) {\n        if (_this3._listeners.has(listener)) {\n          listener(params);\n        }\n      });\n    }\n    /**\n     * Register a state change listener.\n     *\n     * @param listener - Function that will be called whenever state changes.\n     * @returns Function to unregister this listener.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(listener) {\n      var _this4 = this;\n\n      var uniqueListener = wrap(listener);\n\n      this._listeners.add(uniqueListener);\n\n      return function () {\n        _this4._listeners.delete(uniqueListener);\n      };\n    }\n    /** @internal */\n\n  }, {\n    key: \"_load\",\n    value: function _load(baseState, extraState) {\n      assert_1.default(!this._loaded);\n      this._baseState = baseState;\n      this._derivedState = this._derive(baseState);\n      this._extraState = extraState;\n      this._loaded = true;\n\n      this._scheduleUpdate();\n\n      if (this.onLoaded) {\n        this.onLoaded();\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"_update\",\n    value: function _update(baseStateUpdate, extraStateUpdate) {\n      assert_1.default(this._baseState && this._derivedState);\n      var oldState = this.state;\n\n      if (baseStateUpdate) {\n        this._baseState = this._reduce(this._baseState, baseStateUpdate);\n      } // Always running this lets us derive state based on passage of time, like baseRate decay\n\n\n      this._derivedState = this._reduceDerived(this._derivedState, this._derive(this._baseState));\n\n      if (extraStateUpdate) {\n        assert_1.default(this._extraState);\n        this._extraState = this._reduceExtra(this._extraState, extraStateUpdate);\n      }\n\n      this._scheduleUpdate();\n\n      this._notify({\n        newState: this.state,\n        oldState: oldState,\n        stateChange: difference(this.state, oldState)\n      });\n    }\n  }]);\n\n  return LiquityStore;\n}();\n\nexports.LiquityStore = LiquityStore;","map":{"version":3,"sources":["../../src/LiquityStore.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LiquityStore = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst strictEquals = (a, b) => a === b;\nconst eq = (a, b) => a.eq(b);\nconst equals = (a, b) => a.equals(b);\nconst frontendStatusEquals = (a, b) => a.status === \"unregistered\"\n    ? b.status === \"unregistered\"\n    : b.status === \"registered\" && a.kickbackRate.eq(b.kickbackRate);\nconst showFrontendStatus = (x) => x.status === \"unregistered\"\n    ? '{ status: \"unregistered\" }'\n    : `{ status: \"registered\", kickbackRate: ${x.kickbackRate} }`;\nconst wrap = (f) => (...args) => f(...args);\nconst difference = (a, b) => Object.fromEntries(Object.entries(a).filter(([key, value]) => value !== b[key]));\n/**\n * Abstract base class of Liquity data store implementations.\n *\n * @remarks\n * The type parameter `T` may be used to type extra state added to {@link LiquityStoreState} by the\n * subclass.\n *\n * Implemented by {@link @liquity/lib-ethers#BlockPolledLiquityStore}.\n *\n * @public\n */\nclass LiquityStore {\n    constructor() {\n        /** Turn console logging on/off. */\n        this.logging = false;\n        /** @internal */\n        this._loaded = false;\n        this._listeners = new Set();\n    }\n    /**\n     * The current store state.\n     *\n     * @remarks\n     * Should not be accessed before the store is loaded. Assign a function to\n     * {@link LiquityStore.onLoaded | onLoaded} to get a callback when this happens.\n     *\n     * See {@link LiquityStoreState} for the list of properties returned.\n     */\n    get state() {\n        return Object.assign({}, this._baseState, this._derivedState, this._extraState);\n    }\n    /**\n     * Start monitoring the blockchain for Liquity state changes.\n     *\n     * @remarks\n     * The {@link LiquityStore.onLoaded | onLoaded} callback will be called after the state is fetched\n     * for the first time.\n     *\n     * Use the {@link LiquityStore.subscribe | subscribe()} function to register listeners.\n     *\n     * @returns Function to stop the monitoring.\n     */\n    start() {\n        const doStop = this._doStart();\n        return () => {\n            doStop();\n            this._cancelUpdateIfScheduled();\n        };\n    }\n    _cancelUpdateIfScheduled() {\n        if (this._updateTimeoutId !== undefined) {\n            clearTimeout(this._updateTimeoutId);\n        }\n    }\n    _scheduleUpdate() {\n        this._cancelUpdateIfScheduled();\n        this._updateTimeoutId = setTimeout(() => {\n            this._updateTimeoutId = undefined;\n            this._update();\n        }, 30000);\n    }\n    _logUpdate(name, next, show) {\n        if (this.logging) {\n            console.log(`${name} updated to ${show ? show(next) : next}`);\n        }\n        return next;\n    }\n    _updateIfChanged(equals, name, prev, next, show) {\n        return next !== undefined && !equals(prev, next) ? this._logUpdate(name, next, show) : prev;\n    }\n    _silentlyUpdateIfChanged(equals, prev, next) {\n        return next !== undefined && !equals(prev, next) ? next : prev;\n    }\n    _updateFees(name, prev, next) {\n        if (next && !next.equals(prev)) {\n            // Filter out fee update spam that happens on every new block by only logging when string\n            // representation changes.\n            if (`${next}` !== `${prev}`) {\n                this._logUpdate(name, next);\n            }\n            return next;\n        }\n        else {\n            return prev;\n        }\n    }\n    _reduce(baseState, baseStateUpdate) {\n        return {\n            frontend: this._updateIfChanged(frontendStatusEquals, \"frontend\", baseState.frontend, baseStateUpdate.frontend, showFrontendStatus),\n            ownFrontend: this._updateIfChanged(frontendStatusEquals, \"ownFrontend\", baseState.ownFrontend, baseStateUpdate.ownFrontend, showFrontendStatus),\n            numberOfTroves: this._updateIfChanged(strictEquals, \"numberOfTroves\", baseState.numberOfTroves, baseStateUpdate.numberOfTroves),\n            accountBalance: this._updateIfChanged(eq, \"accountBalance\", baseState.accountBalance, baseStateUpdate.accountBalance),\n            lusdBalance: this._updateIfChanged(eq, \"lusdBalance\", baseState.lusdBalance, baseStateUpdate.lusdBalance),\n            lqtyBalance: this._updateIfChanged(eq, \"lqtyBalance\", baseState.lqtyBalance, baseStateUpdate.lqtyBalance),\n            uniTokenBalance: this._updateIfChanged(eq, \"uniTokenBalance\", baseState.uniTokenBalance, baseStateUpdate.uniTokenBalance),\n            uniTokenAllowance: this._updateIfChanged(eq, \"uniTokenAllowance\", baseState.uniTokenAllowance, baseStateUpdate.uniTokenAllowance),\n            remainingLiquidityMiningLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.remainingLiquidityMiningLQTYReward, baseStateUpdate.remainingLiquidityMiningLQTYReward),\n            liquidityMiningStake: this._updateIfChanged(eq, \"liquidityMiningStake\", baseState.liquidityMiningStake, baseStateUpdate.liquidityMiningStake),\n            totalStakedUniTokens: this._updateIfChanged(eq, \"totalStakedUniTokens\", baseState.totalStakedUniTokens, baseStateUpdate.totalStakedUniTokens),\n            liquidityMiningLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.liquidityMiningLQTYReward, baseStateUpdate.liquidityMiningLQTYReward),\n            collateralSurplusBalance: this._updateIfChanged(eq, \"collateralSurplusBalance\", baseState.collateralSurplusBalance, baseStateUpdate.collateralSurplusBalance),\n            price: this._updateIfChanged(eq, \"price\", baseState.price, baseStateUpdate.price),\n            lusdInStabilityPool: this._updateIfChanged(eq, \"lusdInStabilityPool\", baseState.lusdInStabilityPool, baseStateUpdate.lusdInStabilityPool),\n            total: this._updateIfChanged(equals, \"total\", baseState.total, baseStateUpdate.total),\n            totalRedistributed: this._updateIfChanged(equals, \"totalRedistributed\", baseState.totalRedistributed, baseStateUpdate.totalRedistributed),\n            troveBeforeRedistribution: this._updateIfChanged(equals, \"troveBeforeRedistribution\", baseState.troveBeforeRedistribution, baseStateUpdate.troveBeforeRedistribution),\n            stabilityDeposit: this._updateIfChanged(equals, \"stabilityDeposit\", baseState.stabilityDeposit, baseStateUpdate.stabilityDeposit),\n            remainingStabilityPoolLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.remainingStabilityPoolLQTYReward, baseStateUpdate.remainingStabilityPoolLQTYReward),\n            _feesInNormalMode: this._silentlyUpdateIfChanged(equals, baseState._feesInNormalMode, baseStateUpdate._feesInNormalMode),\n            lqtyStake: this._updateIfChanged(equals, \"lqtyStake\", baseState.lqtyStake, baseStateUpdate.lqtyStake),\n            totalStakedLQTY: this._updateIfChanged(eq, \"totalStakedLQTY\", baseState.totalStakedLQTY, baseStateUpdate.totalStakedLQTY),\n            _riskiestTroveBeforeRedistribution: this._silentlyUpdateIfChanged(equals, baseState._riskiestTroveBeforeRedistribution, baseStateUpdate._riskiestTroveBeforeRedistribution)\n        };\n    }\n    _derive({ troveBeforeRedistribution, totalRedistributed, _feesInNormalMode, total, price, _riskiestTroveBeforeRedistribution }) {\n        const fees = _feesInNormalMode._setRecoveryMode(total.collateralRatioIsBelowCritical(price));\n        return {\n            trove: troveBeforeRedistribution.applyRedistribution(totalRedistributed),\n            fees,\n            borrowingRate: fees.borrowingRate(),\n            redemptionRate: fees.redemptionRate(),\n            haveUndercollateralizedTroves: _riskiestTroveBeforeRedistribution\n                .applyRedistribution(totalRedistributed)\n                .collateralRatioIsBelowMinimum(price)\n        };\n    }\n    _reduceDerived(derivedState, derivedStateUpdate) {\n        return {\n            fees: this._updateFees(\"fees\", derivedState.fees, derivedStateUpdate.fees),\n            trove: this._updateIfChanged(equals, \"trove\", derivedState.trove, derivedStateUpdate.trove),\n            borrowingRate: this._silentlyUpdateIfChanged(eq, derivedState.borrowingRate, derivedStateUpdate.borrowingRate),\n            redemptionRate: this._silentlyUpdateIfChanged(eq, derivedState.redemptionRate, derivedStateUpdate.redemptionRate),\n            haveUndercollateralizedTroves: this._updateIfChanged(strictEquals, \"haveUndercollateralizedTroves\", derivedState.haveUndercollateralizedTroves, derivedStateUpdate.haveUndercollateralizedTroves)\n        };\n    }\n    _notify(params) {\n        // Iterate on a copy of `_listeners`, to avoid notifying any new listeners subscribed by\n        // existing listeners, as that could result in infinite loops.\n        //\n        // Before calling a listener from our copy of `_listeners`, check if it has been removed from\n        // the original set. This way we avoid calling listeners that have already been unsubscribed\n        // by an earlier listener callback.\n        [...this._listeners].forEach(listener => {\n            if (this._listeners.has(listener)) {\n                listener(params);\n            }\n        });\n    }\n    /**\n     * Register a state change listener.\n     *\n     * @param listener - Function that will be called whenever state changes.\n     * @returns Function to unregister this listener.\n     */\n    subscribe(listener) {\n        const uniqueListener = wrap(listener);\n        this._listeners.add(uniqueListener);\n        return () => {\n            this._listeners.delete(uniqueListener);\n        };\n    }\n    /** @internal */\n    _load(baseState, extraState) {\n        assert_1.default(!this._loaded);\n        this._baseState = baseState;\n        this._derivedState = this._derive(baseState);\n        this._extraState = extraState;\n        this._loaded = true;\n        this._scheduleUpdate();\n        if (this.onLoaded) {\n            this.onLoaded();\n        }\n    }\n    /** @internal */\n    _update(baseStateUpdate, extraStateUpdate) {\n        assert_1.default(this._baseState && this._derivedState);\n        const oldState = this.state;\n        if (baseStateUpdate) {\n            this._baseState = this._reduce(this._baseState, baseStateUpdate);\n        }\n        // Always running this lets us derive state based on passage of time, like baseRate decay\n        this._derivedState = this._reduceDerived(this._derivedState, this._derive(this._baseState));\n        if (extraStateUpdate) {\n            assert_1.default(this._extraState);\n            this._extraState = this._reduceExtra(this._extraState, extraStateUpdate);\n        }\n        this._scheduleUpdate();\n        this._notify({\n            newState: this.state,\n            oldState,\n            stateChange: difference(this.state, oldState)\n        });\n    }\n}\nexports.LiquityStore = LiquityStore;\n//# sourceMappingURL=LiquityStore.js.map"]},"metadata":{},"sourceType":"script"}