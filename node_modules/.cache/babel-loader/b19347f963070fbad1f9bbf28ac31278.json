{"ast":null,"code":"var _jsxFileName = \"/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Transaction.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { Flex, Text, Box } from \"theme-ui\";\nimport { hexDataSlice, hexDataLength } from \"@ethersproject/bytes\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { buildStyles, CircularProgressbarWithChildren } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { useLiquity } from \"../hooks/LiquityContext\";\nimport { Icon } from \"./Icon\";\nimport { Tooltip } from \"./Tooltip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst strokeWidth = 10;\nconst circularProgressbarStyle = {\n  strokeLinecap: \"butt\",\n  pathColor: \"white\",\n  trailColor: \"rgba(255, 255, 255, 0.33)\"\n};\nconst slowProgress = {\n  strokeWidth,\n  styles: buildStyles({ ...circularProgressbarStyle,\n    pathTransitionDuration: 30\n  })\n};\nconst fastProgress = {\n  strokeWidth,\n  styles: buildStyles({ ...circularProgressbarStyle,\n    pathTransitionDuration: 0.75\n  })\n};\nconst TransactionContext = /*#__PURE__*/React.createContext(undefined);\nexport const TransactionProvider = ({\n  children\n}) => {\n  _s();\n\n  const transactionState = useState({\n    type: \"idle\"\n  });\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: transactionState,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionProvider, \"EEoMs4ELHnjW0Xb8GRPk3mmFbYk=\");\n\n_c = TransactionProvider;\n\nconst useTransactionState = () => {\n  _s2();\n\n  const transactionState = useContext(TransactionContext);\n\n  if (!transactionState) {\n    throw new Error(\"You must provide a TransactionContext via TransactionProvider\");\n  }\n\n  return transactionState;\n};\n\n_s2(useTransactionState, \"LA9ekIBb5ZCCeu8didxt2n7Nvgw=\");\n\nexport const useMyTransactionState = myId => {\n  _s3();\n\n  const [transactionState] = useTransactionState();\n  return transactionState.type !== \"idle\" && (typeof myId === \"string\" ? transactionState.id === myId : transactionState.id.match(myId)) ? transactionState : {\n    type: \"idle\"\n  };\n};\n\n_s3(useMyTransactionState, \"HsfCrDjbxvHXuLvTBg/epFzlGG0=\", false, function () {\n  return [useTransactionState];\n});\n\nconst hasMessage = error => typeof error === \"object\" && error !== null && \"message\" in error && typeof error.message === \"string\";\n\nexport const useTransactionFunction = (id, send) => {\n  _s4();\n\n  const [transactionState, setTransactionState] = useTransactionState();\n  const sendTransaction = useCallback(async () => {\n    setTransactionState({\n      type: \"waitingForApproval\",\n      id\n    });\n\n    try {\n      const tx = await send();\n      setTransactionState({\n        type: \"waitingForConfirmation\",\n        id,\n        tx\n      });\n    } catch (error) {\n      if (hasMessage(error) && error.message.includes(\"User denied transaction signature\")) {\n        setTransactionState({\n          type: \"cancelled\",\n          id\n        });\n      } else {\n        console.error(error);\n        setTransactionState({\n          type: \"failed\",\n          id,\n          error: new Error(\"Failed to send transaction (try again)\")\n        });\n      }\n    }\n  }, [send, id, setTransactionState]);\n  return [sendTransaction, transactionState];\n};\n\n_s4(useTransactionFunction, \"jl3SDYhUeloVs1/pZrWe6vvUAUs=\", false, function () {\n  return [useTransactionState];\n});\n\nexport function Transaction({\n  id,\n  tooltip,\n  tooltipPlacement,\n  showFailure,\n  requires,\n  send,\n  children\n}) {\n  _s5();\n\n  var _showFailure;\n\n  const [sendTransaction, transactionState] = useTransactionFunction(id, send);\n  const trigger = React.Children.only(children);\n  const failureReasons = (requires || []).filter(([requirement]) => !requirement).map(([, reason]) => reason);\n\n  if (transactionState.type === \"waitingForApproval\" || transactionState.type === \"waitingForConfirmation\") {\n    failureReasons.push(\"You must wait for confirmation\");\n  }\n\n  showFailure = failureReasons.length > 0 ? (_showFailure = showFailure) !== null && _showFailure !== void 0 ? _showFailure : tooltip ? \"asTooltip\" : \"asChildText\" : undefined;\n  const clonedTrigger = showFailure === \"asChildText\" ? /*#__PURE__*/React.cloneElement(trigger, {\n    disabled: true,\n    variant: \"danger\"\n  }, failureReasons[0]) : showFailure === \"asTooltip\" ? /*#__PURE__*/React.cloneElement(trigger, {\n    disabled: true\n  }) : /*#__PURE__*/React.cloneElement(trigger, {\n    onClick: sendTransaction\n  });\n\n  if (showFailure === \"asTooltip\") {\n    tooltip = failureReasons[0];\n  }\n\n  return tooltip ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Tooltip, {\n      message: tooltip,\n      placement: tooltipPlacement || \"right\",\n      children: clonedTrigger\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)\n  }, void 0, false) : clonedTrigger;\n} // Doesn't work on Kovan:\n// https://github.com/MetaMask/metamask-extension/issues/5579\n\n_s5(Transaction, \"bZ13HEGjEWoTm9B/yMgxamBQUU8=\", false, function () {\n  return [useTransactionFunction];\n});\n\n_c2 = Transaction;\n\nconst tryToGetRevertReason = async (provider, hash) => {\n  try {\n    const tx = await provider.getTransaction(hash);\n    const result = await provider.call(tx, tx.blockNumber);\n\n    if (hexDataLength(result) % 32 === 4 && hexDataSlice(result, 0, 4) === \"0x08c379a0\") {\n      return defaultAbiCoder.decode([\"string\"], hexDataSlice(result, 4))[0];\n    }\n  } catch {\n    return undefined;\n  }\n};\n\nconst Donut = /*#__PURE__*/React.memo(CircularProgressbarWithChildren, ({\n  value: prev\n}, {\n  value: next\n}) => prev === next);\n_c3 = Donut;\n\nconst TransactionProgressDonut = ({\n  state\n}) => {\n  _s6();\n\n  const [value, setValue] = useState(0);\n  const maxValue = 1;\n  useEffect(() => {\n    if (state === \"confirmed\") {\n      setTimeout(() => setValue(maxValue), 40);\n    } else {\n      setTimeout(() => setValue(maxValue * 0.67), 20);\n    }\n  }, [state]);\n  return state === \"confirmed\" ? /*#__PURE__*/_jsxDEV(Donut, {\n    value,\n    maxValue,\n    ...fastProgress,\n    children: /*#__PURE__*/_jsxDEV(Icon, {\n      name: \"check\",\n      color: \"white\",\n      size: \"lg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this) : state === \"failed\" || state === \"cancelled\" ? /*#__PURE__*/_jsxDEV(Donut, {\n    value: 0,\n    maxValue,\n    ...fastProgress,\n    children: /*#__PURE__*/_jsxDEV(Icon, {\n      name: \"times\",\n      color: \"white\",\n      size: \"lg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Donut, {\n    value,\n    maxValue,\n    ...slowProgress,\n    children: /*#__PURE__*/_jsxDEV(Icon, {\n      name: \"cog\",\n      color: \"white\",\n      size: \"lg\",\n      spin: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n};\n\n_s6(TransactionProgressDonut, \"QEMGEmq5Rfwf2KLuWFF3dZYTA2c=\");\n\n_c4 = TransactionProgressDonut;\nexport const TransactionMonitor = () => {\n  _s7();\n\n  const {\n    provider\n  } = useLiquity();\n  const [transactionState, setTransactionState] = useTransactionState();\n  const id = transactionState.type !== \"idle\" ? transactionState.id : undefined;\n  const tx = transactionState.type === \"waitingForConfirmation\" ? transactionState.tx : undefined;\n  useEffect(() => {\n    if (id && tx) {\n      let cancelled = false;\n      let finished = false;\n      const txHash = tx.rawSentTransaction.hash;\n\n      const waitForConfirmation = async () => {\n        try {\n          const receipt = await tx.waitForReceipt();\n\n          if (cancelled) {\n            return;\n          }\n\n          const {\n            confirmations\n          } = receipt.rawReceipt;\n          const blockNumber = receipt.rawReceipt.blockNumber + confirmations - 1;\n          console.log(`Block #${blockNumber} ${confirmations}-confirms tx ${txHash}`);\n          console.log(`Finish monitoring tx ${txHash}`);\n          finished = true;\n\n          if (receipt.status === \"succeeded\") {\n            console.log(`${receipt}`);\n            setTransactionState({\n              type: \"confirmedOneShot\",\n              id\n            });\n          } else {\n            const reason = await tryToGetRevertReason(provider, txHash);\n\n            if (cancelled) {\n              return;\n            }\n\n            console.error(`Tx ${txHash} failed`);\n\n            if (reason) {\n              console.error(`Revert reason: ${reason}`);\n            }\n\n            setTransactionState({\n              type: \"failed\",\n              id,\n              error: new Error(reason ? `Reverted: ${reason}` : \"Failed\")\n            });\n          }\n        } catch (rawError) {\n          if (cancelled) {\n            return;\n          }\n\n          console.error(`Failed to get receipt for tx ${txHash}`);\n          console.error(rawError);\n          setTransactionState({\n            type: \"failed\",\n            id,\n            error: new Error(\"Failed\")\n          });\n        }\n      };\n\n      console.log(`Start monitoring tx ${txHash}`);\n      waitForConfirmation();\n      return () => {\n        if (!finished) {\n          setTransactionState({\n            type: \"idle\"\n          });\n          console.log(`Cancel monitoring tx ${txHash}`);\n          cancelled = true;\n        }\n      };\n    }\n  }, [provider, id, tx, setTransactionState]);\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\" && id) {\n      // hack: the txn confirmed state lasts 5 seconds which blocks other states, review with Dani\n      setTransactionState({\n        type: \"confirmed\",\n        id\n      });\n    } else if (transactionState.type === \"confirmed\" || transactionState.type === \"failed\" || transactionState.type === \"cancelled\") {\n      let cancelled = false;\n      setTimeout(() => {\n        if (!cancelled) {\n          setTransactionState({\n            type: \"idle\"\n          });\n        }\n      }, 5000);\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [transactionState.type, setTransactionState, id]);\n\n  if (transactionState.type === \"idle\" || transactionState.type === \"waitingForApproval\") {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    sx: {\n      alignItems: \"center\",\n      bg: transactionState.type === \"confirmed\" ? \"success\" : transactionState.type === \"cancelled\" ? \"warning\" : transactionState.type === \"failed\" ? \"danger\" : \"primary\",\n      p: 3,\n      pl: 4,\n      position: \"fixed\",\n      width: \"100vw\",\n      bottom: 0,\n      overflow: \"hidden\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mr: 3,\n        width: \"40px\",\n        height: \"40px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(TransactionProgressDonut, {\n        state: transactionState.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      sx: {\n        fontSize: 3,\n        color: \"white\"\n      },\n      children: transactionState.type === \"waitingForConfirmation\" ? \"Waiting for confirmation\" : transactionState.type === \"cancelled\" ? \"Cancelled\" : transactionState.type === \"failed\" ? transactionState.error.message : \"Confirmed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 399,\n    columnNumber: 5\n  }, this);\n};\n\n_s7(TransactionMonitor, \"qKIW+OYLFm1RAXA0uM7X1SGoppE=\", false, function () {\n  return [useLiquity, useTransactionState];\n});\n\n_c5 = TransactionMonitor;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"TransactionProvider\");\n$RefreshReg$(_c2, \"Transaction\");\n$RefreshReg$(_c3, \"Donut\");\n$RefreshReg$(_c4, \"TransactionProgressDonut\");\n$RefreshReg$(_c5, \"TransactionMonitor\");","map":{"version":3,"sources":["/Users/diegoponciano/Desktop/ryan/liquity/frontend/packages/dev-frontend/src/components/Transaction.tsx"],"names":["React","useState","useContext","useEffect","useCallback","Flex","Text","Box","hexDataSlice","hexDataLength","defaultAbiCoder","buildStyles","CircularProgressbarWithChildren","useLiquity","Icon","Tooltip","strokeWidth","circularProgressbarStyle","strokeLinecap","pathColor","trailColor","slowProgress","styles","pathTransitionDuration","fastProgress","TransactionContext","createContext","undefined","TransactionProvider","children","transactionState","type","useTransactionState","Error","useMyTransactionState","myId","id","match","hasMessage","error","message","useTransactionFunction","send","setTransactionState","sendTransaction","tx","includes","console","Transaction","tooltip","tooltipPlacement","showFailure","requires","trigger","Children","only","failureReasons","filter","requirement","map","reason","push","length","clonedTrigger","cloneElement","disabled","variant","onClick","tryToGetRevertReason","provider","hash","getTransaction","result","call","blockNumber","decode","Donut","memo","value","prev","next","TransactionProgressDonut","state","setValue","maxValue","setTimeout","TransactionMonitor","cancelled","finished","txHash","rawSentTransaction","waitForConfirmation","receipt","waitForReceipt","confirmations","rawReceipt","log","status","rawError","alignItems","bg","p","pl","position","width","bottom","overflow","mr","height","fontSize","color"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { Flex, Text, Box } from \"theme-ui\";\nimport { Provider, TransactionResponse, TransactionReceipt } from \"@ethersproject/abstract-provider\";\nimport { hexDataSlice, hexDataLength } from \"@ethersproject/bytes\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\n\nimport { buildStyles, CircularProgressbarWithChildren } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\nimport { EthersTransactionOverrides } from \"@liquity/lib-ethers\";\nimport { SentLiquityTransaction, LiquityReceipt } from \"@liquity/lib-base\";\n\nimport { useLiquity } from \"../hooks/LiquityContext\";\n\nimport { Icon } from \"./Icon\";\nimport { Tooltip, TooltipProps, Hoverable } from \"./Tooltip\";\n\nconst strokeWidth = 10;\n\nconst circularProgressbarStyle = {\n  strokeLinecap: \"butt\",\n  pathColor: \"white\",\n  trailColor: \"rgba(255, 255, 255, 0.33)\"\n};\n\nconst slowProgress = {\n  strokeWidth,\n  styles: buildStyles({\n    ...circularProgressbarStyle,\n    pathTransitionDuration: 30\n  })\n};\n\nconst fastProgress = {\n  strokeWidth,\n  styles: buildStyles({\n    ...circularProgressbarStyle,\n    pathTransitionDuration: 0.75\n  })\n};\n\ntype TransactionIdle = {\n  type: \"idle\";\n};\n\ntype TransactionFailed = {\n  type: \"failed\";\n  id: string;\n  error: Error;\n};\n\ntype TransactionWaitingForApproval = {\n  type: \"waitingForApproval\";\n  id: string;\n};\n\ntype TransactionCancelled = {\n  type: \"cancelled\";\n  id: string;\n};\n\ntype TransactionWaitingForConfirmations = {\n  type: \"waitingForConfirmation\";\n  id: string;\n  tx: SentTransaction;\n};\n\ntype TransactionConfirmed = {\n  type: \"confirmed\";\n  id: string;\n};\n\ntype TransactionConfirmedOneShot = {\n  type: \"confirmedOneShot\";\n  id: string;\n};\n\ntype TransactionState =\n  | TransactionIdle\n  | TransactionFailed\n  | TransactionWaitingForApproval\n  | TransactionCancelled\n  | TransactionWaitingForConfirmations\n  | TransactionConfirmed\n  | TransactionConfirmedOneShot;\n\nconst TransactionContext = React.createContext<\n  [TransactionState, (state: TransactionState) => void] | undefined\n>(undefined);\n\nexport const TransactionProvider: React.FC = ({ children }) => {\n  const transactionState = useState<TransactionState>({ type: \"idle\" });\n  return (\n    <TransactionContext.Provider value={transactionState}>{children}</TransactionContext.Provider>\n  );\n};\n\nconst useTransactionState = () => {\n  const transactionState = useContext(TransactionContext);\n\n  if (!transactionState) {\n    throw new Error(\"You must provide a TransactionContext via TransactionProvider\");\n  }\n\n  return transactionState;\n};\n\nexport const useMyTransactionState = (myId: string | RegExp): TransactionState => {\n  const [transactionState] = useTransactionState();\n\n  return transactionState.type !== \"idle\" &&\n    (typeof myId === \"string\" ? transactionState.id === myId : transactionState.id.match(myId))\n    ? transactionState\n    : { type: \"idle\" };\n};\n\nconst hasMessage = (error: unknown): error is { message: string } =>\n  typeof error === \"object\" &&\n  error !== null &&\n  \"message\" in error &&\n  typeof (error as { message: unknown }).message === \"string\";\n\ntype ButtonlikeProps = {\n  disabled?: boolean;\n  variant?: string;\n  onClick?: () => void;\n};\n\ntype SentTransaction = SentLiquityTransaction<\n  TransactionResponse,\n  LiquityReceipt<TransactionReceipt>\n>;\n\nexport type TransactionFunction = (\n  overrides?: EthersTransactionOverrides\n) => Promise<SentTransaction>;\n\ntype TransactionProps<C> = {\n  id: string;\n  tooltip?: string;\n  tooltipPlacement?: TooltipProps<C>[\"placement\"];\n  showFailure?: \"asTooltip\" | \"asChildText\";\n  requires?: readonly (readonly [boolean, string])[];\n  send: TransactionFunction;\n  children: C;\n};\n\nexport const useTransactionFunction = (\n  id: string,\n  send: TransactionFunction\n): [sendTransaction: () => Promise<void>, transactionState: TransactionState] => {\n  const [transactionState, setTransactionState] = useTransactionState();\n\n  const sendTransaction = useCallback(async () => {\n    setTransactionState({ type: \"waitingForApproval\", id });\n\n    try {\n      const tx = await send();\n\n      setTransactionState({\n        type: \"waitingForConfirmation\",\n        id,\n        tx\n      });\n    } catch (error) {\n      if (hasMessage(error) && error.message.includes(\"User denied transaction signature\")) {\n        setTransactionState({ type: \"cancelled\", id });\n      } else {\n        console.error(error);\n\n        setTransactionState({\n          type: \"failed\",\n          id,\n          error: new Error(\"Failed to send transaction (try again)\")\n        });\n      }\n    }\n  }, [send, id, setTransactionState]);\n\n  return [sendTransaction, transactionState];\n};\n\nexport function Transaction<C extends React.ReactElement<ButtonlikeProps & Hoverable>>({\n  id,\n  tooltip,\n  tooltipPlacement,\n  showFailure,\n  requires,\n  send,\n  children\n}: TransactionProps<C>) {\n  const [sendTransaction, transactionState] = useTransactionFunction(id, send);\n  const trigger = React.Children.only<C>(children);\n\n  const failureReasons = (requires || [])\n    .filter(([requirement]) => !requirement)\n    .map(([, reason]) => reason);\n\n  if (\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\"\n  ) {\n    failureReasons.push(\"You must wait for confirmation\");\n  }\n\n  showFailure =\n    failureReasons.length > 0 ? showFailure ?? (tooltip ? \"asTooltip\" : \"asChildText\") : undefined;\n\n  const clonedTrigger =\n    showFailure === \"asChildText\"\n      ? React.cloneElement(\n          trigger,\n          {\n            disabled: true,\n            variant: \"danger\"\n          },\n          failureReasons[0]\n        )\n      : showFailure === \"asTooltip\"\n      ? React.cloneElement(trigger, { disabled: true })\n      : React.cloneElement(trigger, { onClick: sendTransaction });\n\n  if (showFailure === \"asTooltip\") {\n    tooltip = failureReasons[0];\n  }\n\n  return tooltip ? (\n    <>\n      <Tooltip message={tooltip} placement={tooltipPlacement || \"right\"}>\n        {clonedTrigger}\n      </Tooltip>\n    </>\n  ) : (\n    clonedTrigger\n  );\n}\n\n// Doesn't work on Kovan:\n// https://github.com/MetaMask/metamask-extension/issues/5579\nconst tryToGetRevertReason = async (provider: Provider, hash: string) => {\n  try {\n    const tx = await provider.getTransaction(hash);\n    const result = await provider.call(tx, tx.blockNumber);\n\n    if (hexDataLength(result) % 32 === 4 && hexDataSlice(result, 0, 4) === \"0x08c379a0\") {\n      return (defaultAbiCoder.decode([\"string\"], hexDataSlice(result, 4)) as [string])[0];\n    }\n  } catch {\n    return undefined;\n  }\n};\n\nconst Donut = React.memo(\n  CircularProgressbarWithChildren,\n  ({ value: prev }, { value: next }) => prev === next\n);\n\ntype TransactionProgressDonutProps = {\n  state: TransactionState[\"type\"];\n};\n\nconst TransactionProgressDonut: React.FC<TransactionProgressDonutProps> = ({ state }) => {\n  const [value, setValue] = useState(0);\n  const maxValue = 1;\n\n  useEffect(() => {\n    if (state === \"confirmed\") {\n      setTimeout(() => setValue(maxValue), 40);\n    } else {\n      setTimeout(() => setValue(maxValue * 0.67), 20);\n    }\n  }, [state]);\n\n  return state === \"confirmed\" ? (\n    <Donut {...{ value, maxValue, ...fastProgress }}>\n      <Icon name=\"check\" color=\"white\" size=\"lg\" />\n    </Donut>\n  ) : state === \"failed\" || state === \"cancelled\" ? (\n    <Donut value={0} {...{ maxValue, ...fastProgress }}>\n      <Icon name=\"times\" color=\"white\" size=\"lg\" />\n    </Donut>\n  ) : (\n    <Donut {...{ value, maxValue, ...slowProgress }}>\n      <Icon name=\"cog\" color=\"white\" size=\"lg\" spin />\n    </Donut>\n  );\n};\n\nexport const TransactionMonitor: React.FC = () => {\n  const { provider } = useLiquity();\n  const [transactionState, setTransactionState] = useTransactionState();\n\n  const id = transactionState.type !== \"idle\" ? transactionState.id : undefined;\n  const tx = transactionState.type === \"waitingForConfirmation\" ? transactionState.tx : undefined;\n\n  useEffect(() => {\n    if (id && tx) {\n      let cancelled = false;\n      let finished = false;\n\n      const txHash = tx.rawSentTransaction.hash;\n\n      const waitForConfirmation = async () => {\n        try {\n          const receipt = await tx.waitForReceipt();\n\n          if (cancelled) {\n            return;\n          }\n\n          const { confirmations } = receipt.rawReceipt;\n          const blockNumber = receipt.rawReceipt.blockNumber + confirmations - 1;\n          console.log(`Block #${blockNumber} ${confirmations}-confirms tx ${txHash}`);\n          console.log(`Finish monitoring tx ${txHash}`);\n          finished = true;\n\n          if (receipt.status === \"succeeded\") {\n            console.log(`${receipt}`);\n\n            setTransactionState({\n              type: \"confirmedOneShot\",\n              id\n            });\n          } else {\n            const reason = await tryToGetRevertReason(provider, txHash);\n\n            if (cancelled) {\n              return;\n            }\n\n            console.error(`Tx ${txHash} failed`);\n            if (reason) {\n              console.error(`Revert reason: ${reason}`);\n            }\n\n            setTransactionState({\n              type: \"failed\",\n              id,\n              error: new Error(reason ? `Reverted: ${reason}` : \"Failed\")\n            });\n          }\n        } catch (rawError) {\n          if (cancelled) {\n            return;\n          }\n\n          console.error(`Failed to get receipt for tx ${txHash}`);\n          console.error(rawError);\n\n          setTransactionState({\n            type: \"failed\",\n            id,\n            error: new Error(\"Failed\")\n          });\n        }\n      };\n\n      console.log(`Start monitoring tx ${txHash}`);\n      waitForConfirmation();\n\n      return () => {\n        if (!finished) {\n          setTransactionState({ type: \"idle\" });\n          console.log(`Cancel monitoring tx ${txHash}`);\n          cancelled = true;\n        }\n      };\n    }\n  }, [provider, id, tx, setTransactionState]);\n\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\" && id) {\n      // hack: the txn confirmed state lasts 5 seconds which blocks other states, review with Dani\n      setTransactionState({ type: \"confirmed\", id });\n    } else if (\n      transactionState.type === \"confirmed\" ||\n      transactionState.type === \"failed\" ||\n      transactionState.type === \"cancelled\"\n    ) {\n      let cancelled = false;\n\n      setTimeout(() => {\n        if (!cancelled) {\n          setTransactionState({ type: \"idle\" });\n        }\n      }, 5000);\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [transactionState.type, setTransactionState, id]);\n\n  if (transactionState.type === \"idle\" || transactionState.type === \"waitingForApproval\") {\n    return null;\n  }\n\n  return (\n    <Flex\n      sx={{\n        alignItems: \"center\",\n        bg:\n          transactionState.type === \"confirmed\"\n            ? \"success\"\n            : transactionState.type === \"cancelled\"\n            ? \"warning\"\n            : transactionState.type === \"failed\"\n            ? \"danger\"\n            : \"primary\",\n        p: 3,\n        pl: 4,\n        position: \"fixed\",\n        width: \"100vw\",\n        bottom: 0,\n        overflow: \"hidden\"\n      }}\n    >\n      <Box sx={{ mr: 3, width: \"40px\", height: \"40px\" }}>\n        <TransactionProgressDonut state={transactionState.type} />\n      </Box>\n\n      <Text sx={{ fontSize: 3, color: \"white\" }}>\n        {transactionState.type === \"waitingForConfirmation\"\n          ? \"Waiting for confirmation\"\n          : transactionState.type === \"cancelled\"\n          ? \"Cancelled\"\n          : transactionState.type === \"failed\"\n          ? transactionState.error.message\n          : \"Confirmed\"}\n      </Text>\n    </Flex>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}